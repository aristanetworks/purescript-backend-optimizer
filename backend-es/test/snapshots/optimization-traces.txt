== Snapshot.TopLevelLetRecEliminatesSingleton ==================================
================================================================================

++ Snapshot.TopLevelLetRecEliminatesSingleton.test$0$k$$rec Step 1 (Original) ++
  letrec
    k@0 =
      \m@1 ->
        {- Inline -}
        let @2 = Snapshot.TopLevelLetRecEliminatesSingleton.eq m@1 100 in
        {- Inline -}
        let
          @3 =
            \() -> go@0 (Snapshot.TopLevelLetRecEliminatesSingleton.sub m@1 1) in
        {- Inline -}
        let
          @4 =
            \() ->
              {- Inline -}
              let @4 = Snapshot.TopLevelLetRecEliminatesSingleton.eq m@1 900 in
              {- Inline -}
              let @5 = \() -> 42 in
              {- Inline -}
              let
                @6 =
                  \() ->
                    k@0 (Snapshot.TopLevelLetRecEliminatesSingleton.sub m@1 1) in
              if #[prim.boolean.eq](@4, true) then@5()
              else 
                @6() in
        if #[prim.boolean.eq](@2, true) then@3()
        else 
          @4()
    go@0 =
      \n@1 ->
        {- Inline -}
        let @2 = Snapshot.TopLevelLetRecEliminatesSingleton.eq n@1 0 in
        {- Inline -}
        let @3 = \() -> n@1 in
        {- Inline -}
        let
          @4 =
            \() ->
              {- Inline -}
              let
                @4 =
                  Snapshot.TopLevelLetRecEliminatesSingleton.lessThanOrEq
                    n@1
                    100 in
              {- Inline -}
              let
                @5 =
                  \() ->
                    go@0 (Snapshot.TopLevelLetRecEliminatesSingleton.sub n@1 1) in
              {- Inline -}
              let
                @6 =
                  \() ->
                    k@0 (Snapshot.TopLevelLetRecEliminatesSingleton.sub n@1 1) in
              if #[prim.boolean.eq](@4, true) then@5()
              else 
                @6() in
        if #[prim.boolean.eq](@2, true) then@3()
        else 
          @4() in
  go@0

-- Snapshot.TopLevelLetRecEliminatesSingleton.test$0$k$$rec Step 2 -------------
  letrec
    k@0 =
      \m@1 ->
        if
          {- Inline -}
          let @2 = 100 in
          #[prim.int.eq](m@1, @2) then{- Inline -}
          let @2 = 1 in
          go@0 (#[prim.int.sub](m@1, @2))
        else if
          {- Inline -}
          let @2 = 900 in
          #[prim.int.eq](m@1, @2) then42
        else 
          {- Inline -}
          let @2 = 1 in
          k@0 (#[prim.int.sub](m@1, @2))
    go@0 =
      \n@1 ->
        if
          {- Inline -}
          let @2 = 0 in
          #[prim.int.eq](n@1, @2) thenn@1
        else if
          {- Inline -}
          let @2 = 100 in
          #[prim.int.lte](n@1, @2) then{- Inline -}
          let @2 = 1 in
          go@0 (#[prim.int.sub](n@1, @2))
        else 
          {- Inline -}
          let @2 = 1 in
          k@0 (#[prim.int.sub](n@1, @2)) in
  go@0

-- Snapshot.TopLevelLetRecEliminatesSingleton.test$0$k$$rec Step 3 (Final) -----
  letrec
    k@0 =
      \m@1 ->
        if #[prim.int.eq](m@1, 100) thengo@0 (#[prim.int.sub](m@1, 1))
        else if #[prim.int.eq](m@1, 900) then42
        else 
          k@0 (#[prim.int.sub](m@1, 1))
    go@0 =
      \n@1 ->
        if #[prim.int.eq](n@1, 0) thenn@1
        else if #[prim.int.lte](n@1, 100) thengo@0 (#[prim.int.sub](n@1, 1))
        else 
          k@0 (#[prim.int.sub](n@1, 1)) in
  go@0