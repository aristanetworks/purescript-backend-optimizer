Snapshot.PrimOpString02.stringValues (Step 0; Original)
  (\op@v0 -> 
    [
      ((op@v0 "a") "a"),
      ((op@v0 "a") "b"),
      ((op@v0 "b") "a"),
    ]
  )
---------------
Snapshot.PrimOpString02.stringValues (Step 1; Final)
  (\op@v0 -> 
    [
      ((op@v0 "a") "a"),
      ((op@v0 "a") "b"),
      ((op@v0 "b") "a"),
    ]
  )

===============

Snapshot.PrimOpString02.test1 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Eq.eq Data.Eq.eqString))
---------------
Snapshot.PrimOpString02.test1 (Step 1)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 "a"),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 "b"),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 "a"),
  ]
---------------
Snapshot.PrimOpString02.test1 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    (== "a" v0),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    (== "a" v0),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    (== "b" v0),
  ]
---------------
Snapshot.PrimOpString02.test1 (Step 3; Final)
  [
    true,
    false,
    false,
  ]

===============

Snapshot.PrimOpString02.test2 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Eq.notEq Data.Eq.eqString))
---------------
Snapshot.PrimOpString02.test2 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\x@v0 -> \y@v1 -> 
      (/= x@v0 y@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 "a") "a"),
      ((v0 "a") "b"),
      ((v0 "b") "a"),
    ];
  v1
---------------
Snapshot.PrimOpString02.test2 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (/= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "b";
    (/= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (/= v0 v1),
  ]
---------------
Snapshot.PrimOpString02.test2 (Step 3; Final)
  [
    false,
    true,
    true,
  ]

===============

Snapshot.PrimOpString02.test3 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Ord.lessThan Data.Ord.ordString))
---------------
Snapshot.PrimOpString02.test3 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (< a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 "a") "a"),
      ((v0 "a") "b"),
      ((v0 "b") "a"),
    ];
  v1
---------------
Snapshot.PrimOpString02.test3 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (< v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "b";
    (< v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (< v0 v1),
  ]
---------------
Snapshot.PrimOpString02.test3 (Step 3; Final)
  [
    false,
    true,
    false,
  ]

===============

Snapshot.PrimOpString02.test4 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Ord.greaterThan Data.Ord.ordString))
---------------
Snapshot.PrimOpString02.test4 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (> a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 "a") "a"),
      ((v0 "a") "b"),
      ((v0 "b") "a"),
    ];
  v1
---------------
Snapshot.PrimOpString02.test4 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (> v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "b";
    (> v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (> v0 v1),
  ]
---------------
Snapshot.PrimOpString02.test4 (Step 3; Final)
  [
    false,
    false,
    true,
  ]

===============

Snapshot.PrimOpString02.test5 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Ord.lessThanOrEq Data.Ord.ordString))
---------------
Snapshot.PrimOpString02.test5 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (<= a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 "a") "a"),
      ((v0 "a") "b"),
      ((v0 "b") "a"),
    ];
  v1
---------------
Snapshot.PrimOpString02.test5 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (<= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "b";
    (<= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (<= v0 v1),
  ]
---------------
Snapshot.PrimOpString02.test5 (Step 3; Final)
  [
    true,
    true,
    false,
  ]

===============

Snapshot.PrimOpString02.test6 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Ord.greaterThanOrEq Data.Ord.ordString))
---------------
Snapshot.PrimOpString02.test6 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (>= a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 "a") "a"),
      ((v0 "a") "b"),
      ((v0 "b") "a"),
    ];
  v1
---------------
Snapshot.PrimOpString02.test6 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (>= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      "b";
    (>= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      "a";
    (>= v0 v1),
  ]
---------------
Snapshot.PrimOpString02.test6 (Step 3; Final)
  [
    true,
    false,
    true,
  ]

===============

Snapshot.PrimOpString02.test7 (Step 0; Original)
  (Snapshot.PrimOpString02.stringValues (Data.Semigroup.append Data.Semigroup.semigroupString))
---------------
Snapshot.PrimOpString02.test7 (Step 1)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (stringAppend v0 v1)
      );
    (v1 "a"),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (stringAppend v0 v1)
      );
    (v1 "b"),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (stringAppend v0 v1)
      );
    (v1 "a"),
  ]
---------------
Snapshot.PrimOpString02.test7 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    (stringAppend "a" v0),
    {#- Rewrite - Inline -#}
    let v0 =
      "b";
    (stringAppend "a" v0),
    {#- Rewrite - Inline -#}
    let v0 =
      "a";
    (stringAppend "b" v0),
  ]
---------------
Snapshot.PrimOpString02.test7 (Step 3; Final)
  [
    "aa",
    "ab",
    "ba",
  ]