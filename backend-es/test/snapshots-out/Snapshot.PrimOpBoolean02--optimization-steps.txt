Snapshot.PrimOpBoolean02.boolValues (Step 0; Original)
  (\op@v0 -> 
    [
      ((op@v0 true) true),
      ((op@v0 true) false),
      ((op@v0 false) true),
      ((op@v0 false) false),
    ]
  )
---------------
Snapshot.PrimOpBoolean02.boolValues (Step 1; Final)
  (\op@v0 -> 
    [
      ((op@v0 true) true),
      ((op@v0 true) false),
      ((op@v0 false) true),
      ((op@v0 false) false),
    ]
  )

===============

Snapshot.PrimOpBoolean02.not (Step 0; Original)
  (Data.HeytingAlgebra.not Data.HeytingAlgebra.heytingAlgebraBoolean)
---------------
Snapshot.PrimOpBoolean02.not (Step 1; Final)
  Data.HeytingAlgebra.boolNot

===============

Snapshot.PrimOpBoolean02.test1 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.HeytingAlgebra.conj Data.HeytingAlgebra.heytingAlgebraBoolean))
---------------
Snapshot.PrimOpBoolean02.test1 (Step 1)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanAnd v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanAnd v0 v1)
      );
    (v1 false),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanAnd v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanAnd v0 v1)
      );
    (v1 false),
  ]
---------------
Snapshot.PrimOpBoolean02.test1 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    v0,
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    v0,
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    false,
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    false,
  ]
---------------
Snapshot.PrimOpBoolean02.test1 (Step 3; Final)
  [
    true,
    false,
    false,
    false,
  ]

===============

Snapshot.PrimOpBoolean02.test2 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.HeytingAlgebra.disj Data.HeytingAlgebra.heytingAlgebraBoolean))
---------------
Snapshot.PrimOpBoolean02.test2 (Step 1)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanOr v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanOr v0 v1)
      );
    (v1 false),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanOr v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (booleanOr v0 v1)
      );
    (v1 false),
  ]
---------------
Snapshot.PrimOpBoolean02.test2 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    true,
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    true,
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    v0,
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    v0,
  ]
---------------
Snapshot.PrimOpBoolean02.test2 (Step 3; Final)
  [
    true,
    true,
    true,
    false,
  ]

===============

Snapshot.PrimOpBoolean02.test3 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Eq.eq Data.Eq.eqBoolean))
---------------
Snapshot.PrimOpBoolean02.test3 (Step 1)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 false),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 true),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      (\v1 -> 
        (== v0 v1)
      );
    (v1 false),
  ]
---------------
Snapshot.PrimOpBoolean02.test3 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    v0,
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    v0,
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    (not v0),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    (not v0),
  ]
---------------
Snapshot.PrimOpBoolean02.test3 (Step 3; Final)
  [
    true,
    false,
    false,
    true,
  ]

===============

Snapshot.PrimOpBoolean02.test4 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Eq.notEq Data.Eq.eqBoolean))
---------------
Snapshot.PrimOpBoolean02.test4 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\x@v0 -> \y@v1 -> 
      (/= x@v0 y@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 true) true),
      ((v0 true) false),
      ((v0 false) true),
      ((v0 false) false),
    ];
  v1
---------------
Snapshot.PrimOpBoolean02.test4 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (/= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (/= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (/= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (/= v0 v1),
  ]
---------------
Snapshot.PrimOpBoolean02.test4 (Step 3; Final)
  [
    false,
    true,
    true,
    false,
  ]

===============

Snapshot.PrimOpBoolean02.test5 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Ord.lessThan Data.Ord.ordBoolean))
---------------
Snapshot.PrimOpBoolean02.test5 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (< a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 true) true),
      ((v0 true) false),
      ((v0 false) true),
      ((v0 false) false),
    ];
  v1
---------------
Snapshot.PrimOpBoolean02.test5 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (< v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (< v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (< v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (< v0 v1),
  ]
---------------
Snapshot.PrimOpBoolean02.test5 (Step 3; Final)
  [
    false,
    false,
    true,
    false,
  ]

===============

Snapshot.PrimOpBoolean02.test6 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Ord.greaterThan Data.Ord.ordBoolean))
---------------
Snapshot.PrimOpBoolean02.test6 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (> a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 true) true),
      ((v0 true) false),
      ((v0 false) true),
      ((v0 false) false),
    ];
  v1
---------------
Snapshot.PrimOpBoolean02.test6 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (> v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (> v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (> v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (> v0 v1),
  ]
---------------
Snapshot.PrimOpBoolean02.test6 (Step 3; Final)
  [
    false,
    true,
    false,
    false,
  ]

===============

Snapshot.PrimOpBoolean02.test7 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Ord.lessThanOrEq Data.Ord.ordBoolean))
---------------
Snapshot.PrimOpBoolean02.test7 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (<= a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 true) true),
      ((v0 true) false),
      ((v0 false) true),
      ((v0 false) false),
    ];
  v1
---------------
Snapshot.PrimOpBoolean02.test7 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (<= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (<= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (<= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (<= v0 v1),
  ]
---------------
Snapshot.PrimOpBoolean02.test7 (Step 3; Final)
  [
    true,
    false,
    true,
    true,
  ]

===============

Snapshot.PrimOpBoolean02.test8 (Step 0; Original)
  (Snapshot.PrimOpBoolean02.boolValues (Data.Ord.greaterThanOrEq Data.Ord.ordBoolean))
---------------
Snapshot.PrimOpBoolean02.test8 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a1@v0 -> \a2@v1 -> 
      (>= a1@v0 a2@v1)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    [
      ((v0 true) true),
      ((v0 true) false),
      ((v0 false) true),
      ((v0 false) false),
    ];
  v1
---------------
Snapshot.PrimOpBoolean02.test8 (Step 2)
  [
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (>= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      true;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (>= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      true;
    (>= v0 v1),
    {#- Rewrite - Inline -#}
    let v0 =
      false;
    {#- Rewrite - Inline -#}
    let v1 =
      false;
    (>= v0 v1),
  ]
---------------
Snapshot.PrimOpBoolean02.test8 (Step 3; Final)
  [
    true,
    true,
    false,
    true,
  ]

===============

Snapshot.PrimOpBoolean02.test9 (Step 0; Original)
  [
    (Snapshot.PrimOpBoolean02.not true),
    (Snapshot.PrimOpBoolean02.not false),
  ]
---------------
Snapshot.PrimOpBoolean02.test9 (Step 1; Final)
  [
    false,
    true,
  ]