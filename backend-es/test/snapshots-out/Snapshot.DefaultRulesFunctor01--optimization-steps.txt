Snapshot.DefaultRulesFunctor01.flap (Step 0; Original)
  (Data.Functor.flap Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.flap (Step 1)
  (\ff@v0 -> \x@v1 ->
    -- Inline v2
    let v2 = (\f@v2 -> (f@v2 x@v1));
    -- Inline v3
    let v3 =
      (\v1@v3 ->
        if (isTag Data.Maybe.Just v1@v3) then
          (Data.Maybe.Just.Maybe (v2 v1@v3#value0))
        else
          Data.Maybe.Nothing
      );
    (v3 ff@v0)
  )
---------------
Snapshot.DefaultRulesFunctor01.flap (Step 2)
  (\ff@v0 -> \x@v1 ->
    if (isTag Data.Maybe.Just ff@v0) then
      (Data.Maybe.Just.Maybe
        -- Inline v2
        let v2 = ff@v0#value0;
        (v2 x@v1)
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.flap (Step 3; Final)
  (\ff@v0 -> \x@v1 ->
    if (isTag Data.Maybe.Just ff@v0) then
      (Data.Maybe.Just.Maybe (ff@v0#value0 x@v1))
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.map (Step 0; Original)
  (Data.Functor.map Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.map (Step 1; Final)
  Data.Maybe.functorMaybe.map

===============

Snapshot.DefaultRulesFunctor01.mapFlipped (Step 0; Original)
  (Data.Functor.mapFlipped Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.mapFlipped (Step 1; Final)
  (\fa@v0 -> \f@v1 ->
    if (isTag Data.Maybe.Just fa@v0) then
      (Data.Maybe.Just.Maybe (f@v1 fa@v0#value0))
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.show (Step 0; Original)
  (Data.Show.show Data.Show.showInt)
---------------
Snapshot.DefaultRulesFunctor01.show (Step 1; Final)
  Data.Show.showIntImpl

===============

Snapshot.DefaultRulesFunctor01.test1 (Step 0; Original)
  (\mb@v0 ->
    (Snapshot.DefaultRulesFunctor01.mapFlipped
      mb@v0
      (\v@v1 ->
        -- Inline v2
        let v2 = v@v1;
        -- Inline v3
        let v3 = (\i@v3 -> (Snapshot.DefaultRulesFunctor01.show i@v3));
        (v3 i@v2)
      )
    )
  )
---------------
Snapshot.DefaultRulesFunctor01.test1 (Step 1)
  (\mb@v0 ->
    -- Inline v1
    let v1 = (\v@v1 -> (Data.Show.showIntImpl v@v1));
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe (v1 mb@v0#value0))
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test1 (Step 2)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe
        -- Inline v1
        let v1 = mb@v0#value0;
        (Data.Show.showIntImpl v1)
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test1 (Step 3; Final)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe (Data.Show.showIntImpl mb@v0#value0))
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.test2 (Step 0; Original)
  (\mb@v0 -> (Snapshot.DefaultRulesFunctor01.void mb@v0))
---------------
Snapshot.DefaultRulesFunctor01.test2 (Step 1; Final)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe <PrimUndefined>)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.test3 (Step 0; Original)
  (\mb@v0 -> ((Snapshot.DefaultRulesFunctor01.voidLeft mb@v0) 42))
---------------
Snapshot.DefaultRulesFunctor01.test3 (Step 1)
  (\mb@v0 ->
    -- Inline v1
    let v1 = 42;
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe v1)
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test3 (Step 2; Final)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe 42)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.test4 (Step 0; Original)
  (\mb@v0 -> ((Snapshot.DefaultRulesFunctor01.voidRight 42) mb@v0))
---------------
Snapshot.DefaultRulesFunctor01.test4 (Step 1)
  (\mb@v0 ->
    -- Inline v1
    let v1 = 42;
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe v1)
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test4 (Step 2; Final)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe 42)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.test5 (Step 0; Original)
  (\mb@v0 ->
    (Snapshot.DefaultRulesFunctor01.flap
      ((Snapshot.DefaultRulesFunctor01.map Data.Function.const) mb@v0)
      12
    )
  )
---------------
Snapshot.DefaultRulesFunctor01.test5 (Step 1)
  (\mb@v0 ->
    -- DistBranchesLet v1
    let v1 =
      if (isTag Data.Maybe.Just mb@v0) then
        (Data.Maybe.Just.Maybe
          let v1 = mb@v0#value0;
          -- Inline v2
          let v2 = (\v@v2 -> v1);
          v2
        )
      else
        Data.Maybe.Nothing;
    -- Inline v2
    let v2 = 12;
    if (isTag Data.Maybe.Just v1) then
      (Data.Maybe.Just.Maybe (v1#value0 v2))
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test5 (Step 2)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe
        let v1 = mb@v0#value0;
        -- Inline v2
        let v2 = (\v@v2 -> v1);
        (v2 12)
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test5 (Step 3)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe
        -- Inline v1
        let v1 = mb@v0#value0;
        -- Inline v2
        let v2 = 12;
        v1
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.test5 (Step 4; Final)
  (\mb@v0 ->
    if (isTag Data.Maybe.Just mb@v0) then
      (Data.Maybe.Just.Maybe mb@v0#value0)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.void (Step 0; Original)
  (Data.Functor.void Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.void (Step 1)
  -- Inline v0
  let v0 = (\v@v0 -> <PrimUndefined>);
  -- Inline v1
  let v1 =
    -- Inline v1
    let v1 =
      -- Inline v1
      let v1 =
        (\v1@v1 ->
          if (isTag Data.Maybe.Just v1@v1) then
            (Data.Maybe.Just.Maybe (v0 v1@v1#value0))
          else
            Data.Maybe.Nothing
        );
      v1;
    v1;
  v1
---------------
Snapshot.DefaultRulesFunctor01.void (Step 2)
  (\v1@v0 ->
    if (isTag Data.Maybe.Just v1@v0) then
      (Data.Maybe.Just.Maybe
        -- Inline v1
        let v1 = v1@v0#value0;
        <PrimUndefined>
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.void (Step 3; Final)
  (\v1@v0 ->
    if (isTag Data.Maybe.Just v1@v0) then
      (Data.Maybe.Just.Maybe <PrimUndefined>)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.voidLeft (Step 0; Original)
  (Data.Functor.voidLeft Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.voidLeft (Step 1)
  (\f@v0 -> \x@v1 ->
    -- Inline v2
    let v2 = (\v@v2 -> x@v1);
    -- Inline v3
    let v3 =
      (\v1@v3 ->
        if (isTag Data.Maybe.Just v1@v3) then
          (Data.Maybe.Just.Maybe (v2 v1@v3#value0))
        else
          Data.Maybe.Nothing
      );
    (v3 f@v0)
  )
---------------
Snapshot.DefaultRulesFunctor01.voidLeft (Step 2)
  (\f@v0 -> \x@v1 ->
    if (isTag Data.Maybe.Just f@v0) then
      (Data.Maybe.Just.Maybe
        -- Inline v2
        let v2 = f@v0#value0;
        x@v1
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.voidLeft (Step 3; Final)
  (\f@v0 -> \x@v1 ->
    if (isTag Data.Maybe.Just f@v0) then
      (Data.Maybe.Just.Maybe x@v1)
    else
      Data.Maybe.Nothing
  )

===============

Snapshot.DefaultRulesFunctor01.voidRight (Step 0; Original)
  (Data.Functor.voidRight Data.Maybe.functorMaybe)
---------------
Snapshot.DefaultRulesFunctor01.voidRight (Step 1)
  (\x@v0 ->
    -- Inline v1
    let v1 = (\v@v1 -> x@v0);
    -- Inline v2
    let v2 =
      (\v1@v2 ->
        if (isTag Data.Maybe.Just v1@v2) then
          (Data.Maybe.Just.Maybe (v1 v1@v2#value0))
        else
          Data.Maybe.Nothing
      );
    v2
  )
---------------
Snapshot.DefaultRulesFunctor01.voidRight (Step 2)
  (\x@v0 -> \v1@v1 ->
    if (isTag Data.Maybe.Just v1@v1) then
      (Data.Maybe.Just.Maybe
        -- Inline v2
        let v2 = v1@v1#value0;
        x@v0
      )
    else
      Data.Maybe.Nothing
  )
---------------
Snapshot.DefaultRulesFunctor01.voidRight (Step 3; Final)
  (\x@v0 -> \v1@v1 ->
    if (isTag Data.Maybe.Just v1@v1) then
      (Data.Maybe.Just.Maybe x@v0)
    else
      Data.Maybe.Nothing
  )