Snapshot.EffectLoops01.discard (Step 0; Original)
  ((Control.Bind.discard Control.Bind.discardUnit) Effect.bindEffect)
---------------
Snapshot.EffectLoops01.discard (Step 1; Final)
  Effect.bindE

===============

Snapshot.EffectLoops01.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordInt)
---------------
Snapshot.EffectLoops01.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> ((lt a1@v0) a2@v1))

===============

Snapshot.EffectLoops01.log (Step 0; Original)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectLoops01.log (Step 1; Final)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)

===============

Snapshot.EffectLoops01.logShow (Step 0; Original)
  (Effect.Class.Console.logShow
    Effect.Class.monadEffectEffect
    Data.Show.showInt
  )
---------------
Snapshot.EffectLoops01.logShow (Step 1; Final)
  (Effect.Class.Console.logShow
    Effect.Class.monadEffectEffect
    Data.Show.showInt
  )

===============

Snapshot.EffectLoops01.test1 (Step 0; Original)
  (\k@v0 ->
    (Effect.foreachE
      (k@v0 42)
      (\a@v1 ->
        (Snapshot.EffectLoops01.discard
          (Snapshot.EffectLoops01.logShow a@v1)
          (\$__unused@v2 -> (Snapshot.EffectLoops01.logShow a@v1))
        )
      )
    )
  )
---------------
Snapshot.EffectLoops01.test1 (Step 1)
  (\k@v0 ->
    let v1 = (k@v0 42);
    -- Inline v2
    let v2 =
      (# effectDefer
        (-- Stop
        Effect.foreachE
          v1
          (\a@v2 ->
            (# effectDefer
              let v3 =
                -- Inline v3
                let v3 = (Effect.Console.log (Data.Show.showIntImpl a@v2));
                v3;
              -- Inline v4
              let v4 =
                letEffect $__unused@v4 = v3;
                -- Inline v5
                let v5 = (Effect.Console.log (Data.Show.showIntImpl a@v2));
                v5;
              v4
            #)
          )
        )
      #);
    v2
  )
---------------
Snapshot.EffectLoops01.test1 (Step 2)
  (\k@v0 ->
    let v1 = (k@v0 42);
    (# effectDefer
      (-- Stop
      Effect.foreachE
        v1
        (\a@v2 ->
          (# effectDefer
            -- Inline v3
            let v3 = (Effect.Console.log (Data.Show.showIntImpl a@v2));
            letEffect $__unused@v4 = v3;
            (Effect.Console.log (Data.Show.showIntImpl a@v2))
          #)
        )
      )
    #)
  )
---------------
Snapshot.EffectLoops01.test1 (Step 3; Final)
  (\k@v0 ->
    let v1 = (k@v0 42);
    (# effectDefer
      (-- Stop
      Effect.foreachE
        v1
        (\a@v2 ->
          (# effectDefer
            letEffect $__unused@v3 =
              (Effect.Console.log (Data.Show.showIntImpl a@v2));
            (Effect.Console.log (Data.Show.showIntImpl a@v2))
          #)
        )
      )
    #)
  )

===============

Snapshot.EffectLoops01.test2 (Step 0; Original)
  (\k@v0 ->
    (Snapshot.EffectLoops01.discard
      (Effect.foreachE
        (k@v0 42)
        (\a@v1 -> (Snapshot.EffectLoops01.logShow a@v1))
      )
      (\$__unused@v1 ->
        (Snapshot.EffectLoops01.discard
          ((Effect.foreachE (k@v0 42)) Snapshot.EffectLoops01.logShow)
          (\$__unused@v2 ->
            (Effect.foreachE
              (k@v0 42)
              (Data.Function.const (Snapshot.EffectLoops01.log "wat"))
            )
          )
        )
      )
    )
  )
---------------
Snapshot.EffectLoops01.test2 (Step 1)
  (\k@v0 ->
    -- LetAssoc
    let v1 =
      let v1 = (k@v0 42);
      -- Inline v2
      let v2 =
        (# effectDefer
          (-- Stop
          Effect.foreachE
            v1
            (\a@v2 ->
              (# effectDefer
                -- Inline v3
                let v3 = (Effect.Console.log (Data.Show.showIntImpl a@v2));
                v3
              #)
            )
          )
        #);
      v2;
    -- Inline v2
    let v2 =
      letEffect $__unused@v2 = v1;
      -- LetAssoc
      let v3 =
        let v3 = (k@v0 42);
        -- Inline v4
        let v4 =
          -- Inline v4
          let v4 =
            (Effect.Class.Console.logShow
              Effect.Class.monadEffectEffect
              Data.Show.showInt
            );
          (# effectDefer
            (-- Stop
            Effect.foreachE
              v3
              (\v5 -> (# effectDefer (v4 v5) #))
            )
          #);
        v4;
      -- Inline v4
      let v4 =
        letEffect $__unused@v4 = v3;
        let v5 = (k@v0 42);
        -- LetAssoc
        let v6 =
          let v6 =
            let v6 =
              -- Inline v6
              let v6 = "wat";
              -- Inline v7
              let v7 =
                -- Inline v7
                let v7 = (Effect.Console.log v6);
                v7;
              v7;
            -- Inline v7
            let v7 = (\v@v7 -> v6);
            v7;
          (# effectDefer
            (-- Stop
            Effect.foreachE
              v5
              (\v7 -> (# effectDefer (v6 v7) #))
            )
          #);
        v6;
      v4;
    v2
  )
---------------
Snapshot.EffectLoops01.test2 (Step 2)
  (\k@v0 ->
    let v1 = (k@v0 42);
    -- Inline v2
    let v2 =
      (# effectDefer
        (-- Stop
        Effect.foreachE
          v1
          (\a@v2 ->
            (# effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v2)) #)
          )
        )
      #);
    letEffect $__unused@v3 = v2;
    let v4 = (k@v0 42);
    -- Inline v5
    let v5 =
      (# effectDefer
        (-- Stop
        Effect.foreachE
          v4
          (\v5 ->
            (# effectDefer
              -- Inline v6
              let v6 = (Effect.Console.log (Data.Show.showIntImpl v5));
              v6
            #)
          )
        )
      #);
    letEffect $__unused@v6 = v5;
    let v7 = (k@v0 42);
    let v8 = (Effect.Console.log "wat");
    -- Inline v9
    let v9 = (\v@v9 -> v8);
    -- Inline v10
    let v10 =
      (# effectDefer
        (-- Stop
        Effect.foreachE
          v7
          (\v10 -> (# effectDefer (v9 v10) #))
        )
      #);
    v10
  )
---------------
Snapshot.EffectLoops01.test2 (Step 3)
  (\k@v0 ->
    let v1 = (k@v0 42);
    letEffect $__unused@v2 =
      (-- Stop
      Effect.foreachE
        v1
        (\a@v2 ->
          (# effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v2)) #)
        )
      );
    -- Inline v3
    let v3 = (k@v0 42);
    letEffect $__unused@v4 =
      (-- Stop
      Effect.foreachE
        v3
        (\v4 ->
          (# effectDefer (Effect.Console.log (Data.Show.showIntImpl v4)) #)
        )
      );
    -- Inline v5
    let v5 = (k@v0 42);
    let v6 = (Effect.Console.log "wat");
    (# effectDefer
      (-- Stop
      Effect.foreachE
        v5
        (\v7 -> (# effectDefer v6 #))
      )
    #)
  )
---------------
Snapshot.EffectLoops01.test2 (Step 4; Final)
  (\k@v0 ->
    let v1 = (k@v0 42);
    letEffect $__unused@v2 =
      (-- Stop
      Effect.foreachE
        v1
        (\a@v2 ->
          (# effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v2)) #)
        )
      );
    letEffect $__unused@v3 =
      (-- Stop
      Effect.foreachE
        (k@v0 42)
        (\v3 ->
          (# effectDefer (Effect.Console.log (Data.Show.showIntImpl v3)) #)
        )
      );
    let v4 = (Effect.Console.log "wat");
    (# effectDefer
      (-- Stop
      Effect.foreachE
        (k@v0 42)
        (\v5 -> (# effectDefer v4 #))
      )
    #)
  )

===============

Snapshot.EffectLoops01.test3 (Step 0; Original)
  (\arr@v0 ->
    (Effect.foreachE
      arr@v0
      (\a@v1 ->
        (Snapshot.EffectLoops01.when
          ((Snapshot.EffectLoops01.lessThan a@v1) 10)
          (Snapshot.EffectLoops01.logShow a@v1)
        )
      )
    )
  )
---------------
Snapshot.EffectLoops01.test3 (Step 1)
  (\arr@v0 ->
    (# effectDefer
      (-- Stop
      Effect.foreachE
        arr@v0
        (\a@v1 ->
          (# effectDefer
            -- Inline v2
            let v2 =
              -- Inline v2
              let v2 = 10;
              ((lt a@v1) v2);
            let v3 =
              -- Inline v3
              let v3 = (Effect.Console.log (Data.Show.showIntImpl a@v1));
              v3;
            if v2 then v3 else (# effectPure <PrimUndefined> #)
          #)
        )
      )
    #)
  )
---------------
Snapshot.EffectLoops01.test3 (Step 2; Final)
  (\arr@v0 ->
    (# effectDefer
      (-- Stop
      Effect.foreachE
        arr@v0
        (\a@v1 ->
          (# effectDefer
            let v2 = (Effect.Console.log (Data.Show.showIntImpl a@v1));
            if ((lt a@v1) 10) then v2 else (# effectPure <PrimUndefined> #)
          #)
        )
      )
    #)
  )

===============

Snapshot.EffectLoops01.test4 (Step 0; Original)
  (\arr@v0 ->
    (Effect.foreachE
      arr@v0
      (\a@v1 ->
        (Snapshot.EffectLoops01.void
          -- Inline v2
          let v2 = ((Snapshot.EffectLoops01.lessThan a@v1) 10);
          -- Inline v3
          let v3 = (\-> (Snapshot.EffectLoops01.logShow a@v1));
          -- Inline v4
          let v4 = (\-> (Snapshot.EffectLoops01.log "wat"));
          if ((eq v2) true) then (v3!) else (v4!)
        )
      )
    )
  )
---------------
Snapshot.EffectLoops01.test4 (Step 1)
  (\arr@v0 ->
    (# effectDefer
      (-- Stop
      Effect.foreachE
        arr@v0
        (\a@v1 ->
          (# effectDefer
            -- Inline v2
            let v2 =
              if -- Inline v2
              let v2 = 10;
              ((lt a@v1) v2) then
                -- Inline v2
                let v2 = (Effect.Console.log (Data.Show.showIntImpl a@v1));
                v2
              else
                -- Inline v2
                let v2 = "wat";
                -- Inline v3
                let v3 =
                  -- Inline v3
                  let v3 = (Effect.Console.log v2);
                  v3;
                v3;
            (# effectDefer
              letEffect a'@v3 = v2;
              (# effectPure <PrimUndefined> #)
            #)
          #)
        )
      )
    #)
  )
---------------
Snapshot.EffectLoops01.test4 (Step 2; Final)
  (\arr@v0 ->
    (# effectDefer
      (-- Stop
      Effect.foreachE
        arr@v0
        (\a@v1 ->
          (# effectDefer
            letEffect a'@v2 =
              if ((lt a@v1) 10) then
                (Effect.Console.log (Data.Show.showIntImpl a@v1))
              else
                (Effect.Console.log "wat");
            (# effectPure <PrimUndefined> #)
          #)
        )
      )
    #)
  )

===============

Snapshot.EffectLoops01.void (Step 0; Original)
  (Data.Functor.void Effect.functorEffect)
---------------
Snapshot.EffectLoops01.void (Step 1)
  -- Inline v0
  let v0 = (\v@v0 -> <PrimUndefined>);
  -- Inline v1
  let v1 =
    -- Inline v1
    let v1 =
      -- Inline v1
      let v1 =
        (\a@v1 ->
          (# effectDefer
            letEffect a'@v2 = a@v1;
            (# effectPure (v0 a'@v2) #)
          #)
        );
      v1;
    v1;
  v1
---------------
Snapshot.EffectLoops01.void (Step 2; Final)
  (\a@v0 ->
    (# effectDefer
      letEffect a'@v1 = a@v0;
      (# effectPure <PrimUndefined> #)
    #)
  )

===============

Snapshot.EffectLoops01.when (Step 0; Original)
  (Control.Applicative.when Effect.applicativeEffect)
---------------
Snapshot.EffectLoops01.when (Step 1)
  (\v@v0 -> \v1@v1 ->
    if v@v0 then
      v1@v1
    else
      -- Inline v2
      let v2 = <PrimUndefined>;
      -- Inline v3
      let v3 = (# effectPure v2 #);
      v3
  )
---------------
Snapshot.EffectLoops01.when (Step 2; Final)
  (\v@v0 -> \v1@v1 -> if v@v0 then v1@v1 else (# effectPure <PrimUndefined> #))