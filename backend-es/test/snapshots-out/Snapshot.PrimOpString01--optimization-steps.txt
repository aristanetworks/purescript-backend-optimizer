Snapshot.PrimOpString01.append (Step 0; Original)
  (Data.Semigroup.append Data.Semigroup.semigroupString)
---------------
Snapshot.PrimOpString01.append (Step 1; Final)
  Data.Semigroup.concatString

===============

Snapshot.PrimOpString01.eq (Step 0; Original)
  (Data.Eq.eq Data.Eq.eqString)
---------------
Snapshot.PrimOpString01.eq (Step 1; Final)
  Data.Eq.eqStringImpl

===============

Snapshot.PrimOpString01.greaterThan (Step 0; Original)
  (Data.Ord.greaterThan Data.Ord.ordString)
---------------
Snapshot.PrimOpString01.greaterThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (> a1@v0 a2@v1)
  )

===============

Snapshot.PrimOpString01.greaterThanOrEq (Step 0; Original)
  (Data.Ord.greaterThanOrEq Data.Ord.ordString)
---------------
Snapshot.PrimOpString01.greaterThanOrEq (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (>= a1@v0 a2@v1)
  )

===============

Snapshot.PrimOpString01.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordString)
---------------
Snapshot.PrimOpString01.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (< a1@v0 a2@v1)
  )

===============

Snapshot.PrimOpString01.lessThanOrEq (Step 0; Original)
  (Data.Ord.lessThanOrEq Data.Ord.ordString)
---------------
Snapshot.PrimOpString01.lessThanOrEq (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (<= a1@v0 a2@v1)
  )

===============

Snapshot.PrimOpString01.notEq (Step 0; Original)
  (Data.Eq.notEq Data.Eq.eqString)
---------------
Snapshot.PrimOpString01.notEq (Step 1; Final)
  (\x@v0 -> \y@v1 -> 
    (/= x@v0 y@v1)
  )

===============

Snapshot.PrimOpString01.test1 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.eq a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test1 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (== a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test2 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.notEq a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test2 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (/= a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test3 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.lessThan a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test3 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (< a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test4 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.greaterThan a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test4 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (> a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test5 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.lessThanOrEq a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test5 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (<= a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test6 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.greaterThanOrEq a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test6 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (>= a@v0 b@v1)
  )

===============

Snapshot.PrimOpString01.test7 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.PrimOpString01.append a@v0) b@v1)
  )
---------------
Snapshot.PrimOpString01.test7 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    (stringAppend a@v0 b@v1)
  )