Snapshot.DefaultRulesMonoid01.guard (Step 0; Original)
  (Data.Monoid.guard Data.Monoid.monoidArray)
---------------
Snapshot.DefaultRulesMonoid01.guard (Step 1; Final)
  (Data.Monoid.guard Data.Monoid.monoidArray)

===============

Snapshot.DefaultRulesMonoid01.test1 (Step 0; Original)
  ((Data.Function.flip Snapshot.DefaultRulesMonoid01.guard) [ 1, 2, 3 ])
---------------
Snapshot.DefaultRulesMonoid01.test1 (Step 1)
  -- Inline v0
  let v0 = [ 1, 2, 3 ];
  (\a@v1 ->
    -- Inline mempty1@v2
    let mempty1@v2 = [];
    -- Inline v3
    let v3 =
      -- Inline v3
      let v3 =
        -- Inline v3
        let v3 = (\v@v3 -> \v1@v4 -> if v@v3 then v1@v4 else mempty1@v2);
        (v3 a@v1);
      v3;
    (v3 v0)
  )
---------------
Snapshot.DefaultRulesMonoid01.test1 (Step 2)
  (\a@v0 ->
    -- Inline v1
    let v1 = [ 1, 2, 3 ];
    if a@v0 then v1 else []
  )
---------------
Snapshot.DefaultRulesMonoid01.test1 (Step 3; Final)
  (\a@v0 -> if a@v0 then [ 1, 2, 3 ] else [])

===============

Snapshot.DefaultRulesMonoid01.test2 (Step 0; Original)
  (\f@v0 ->
    (Data.Function.flip
      Snapshot.DefaultRulesMonoid01.guard
      (f@v0 [ 1, 2, 3 ])
    )
  )
---------------
Snapshot.DefaultRulesMonoid01.test2 (Step 1)
  (\f@v0 ->
    let v1 = (f@v0 [ 1, 2, 3 ]);
    (\a@v2 ->
      -- Inline mempty1@v3
      let mempty1@v3 = [];
      -- Inline v4
      let v4 =
        -- Inline v4
        let v4 =
          -- Inline v4
          let v4 = (\v@v4 -> \v1@v5 -> if v@v4 then v1@v5 else mempty1@v3);
          (v4 a@v2);
        v4;
      (v4 v1)
    )
  )
---------------
Snapshot.DefaultRulesMonoid01.test2 (Step 2; Final)
  (\f@v0 ->
    let v1 = (f@v0 [ 1, 2, 3 ]);
    (\a@v2 -> if a@v2 then v1 else [])
  )