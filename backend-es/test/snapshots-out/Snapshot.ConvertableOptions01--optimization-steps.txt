Snapshot.ConvertableOptions01.Flub (Step 0; Original)
  let Flub =
    { tag =
        "Flub"
    };
---------------
Snapshot.ConvertableOptions01.Flub (Step 1; Final)
  let Flub =
    { tag =
        "Flub"
    };

===============

Snapshot.ConvertableOptions01.barIsSymbol (Step 0; Original)
  { reflectSymbol =
      (\$__unused@v0 -> 
        "bar"
      )
  }
---------------
Snapshot.ConvertableOptions01.barIsSymbol (Step 1; Final)
  { reflectSymbol =
      (\$__unused@v0 -> 
        "bar"
      )
  }

===============

Snapshot.ConvertableOptions01.bazIsSymbol (Step 0; Original)
  { reflectSymbol =
      (\$__unused@v0 -> 
        "baz"
      )
  }
---------------
Snapshot.ConvertableOptions01.bazIsSymbol (Step 1; Final)
  { reflectSymbol =
      (\$__unused@v0 -> 
        "baz"
      )
  }

===============

Snapshot.ConvertableOptions01.convertFlubBar1 (Step 0; Original)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \int@v2 -> 
        (Snapshot.ConvertableOptions01.show int@v2)
      )
  }
---------------
Snapshot.ConvertableOptions01.convertFlubBar1 (Step 1; Final)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \int@v2 -> 
        (Data.Show.showIntImpl int@v2)
      )
  }

===============

Snapshot.ConvertableOptions01.convertFlubBar2 (Step 0; Original)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \str@v2 -> 
        str@v2
      )
  }
---------------
Snapshot.ConvertableOptions01.convertFlubBar2 (Step 1; Final)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \str@v2 -> 
        str@v2
      )
  }

===============

Snapshot.ConvertableOptions01.convertFlubBaz1 (Step 0; Original)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \bool@v2 -> 
        (Data.Maybe.Just bool@v2)
      )
  }
---------------
Snapshot.ConvertableOptions01.convertFlubBaz1 (Step 1; Final)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \bool@v2 -> 
        (Data.Maybe.Just.Maybe bool@v2)
      )
  }

===============

Snapshot.ConvertableOptions01.convertFlubBaz2 (Step 0; Original)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \mb@v2 -> 
        mb@v2
      )
  }
---------------
Snapshot.ConvertableOptions01.convertFlubBaz2 (Step 1; Final)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \mb@v2 -> 
        mb@v2
      )
  }

===============

Snapshot.ConvertableOptions01.convertFlubDefault (Step 0; Original)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \a@v2 -> 
        a@v2
      )
  }
---------------
Snapshot.ConvertableOptions01.convertFlubDefault (Step 1; Final)
  { convertOption =
      (\v@v0 -> \v1@v1 -> \a@v2 -> 
        a@v2
      )
  }

===============

Snapshot.ConvertableOptions01.convertOptionsRecord (Step 0; Original)
  (ConvertableOptions.convertOptionsRecord <PrimUndefined>)
---------------
Snapshot.ConvertableOptions01.convertOptionsRecord (Step 1; Final)
  (ConvertableOptions.convertOptionsRecord <PrimUndefined>)

===============

Snapshot.ConvertableOptions01.convertRecordOptionsCons (Step 0; Original)
  (ConvertableOptions.convertRecordOptionsCons ConvertableOptions.convertRecordOptionsNil)
---------------
Snapshot.ConvertableOptions01.convertRecordOptionsCons (Step 1; Final)
  (ConvertableOptions.convertRecordOptionsCons ConvertableOptions.convertRecordOptionsNil)

===============

Snapshot.ConvertableOptions01.convertRecordOptionsCons1 (Step 0; Original)
  (ConvertableOptions.convertRecordOptionsCons (((((Snapshot.ConvertableOptions01.convertRecordOptionsCons Snapshot.ConvertableOptions01.convertFlubDefault) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) { reflectSymbol =
      (\$__unused@v0 -> 
        "foo"
      )
  }))
---------------
Snapshot.ConvertableOptions01.convertRecordOptionsCons1 (Step 1)
  (ConvertableOptions.convertRecordOptionsCons {#- Rewrite - Inline -#}
  let v0 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      let v3 =
        { reflectSymbol =
            (\$__unused@v3 -> 
              "foo"
            )
        };
      { convertRecordOptions =
          (\t@v4 -> \v@v5 -> \r@v6 -> 
            let v7 =
              (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v3) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
              let v7 =
                Type.Proxy.Proxy;
              {#- Rewrite - Inline -#}
              let v8 =
                ((Record.Unsafe.unsafeGet ((
                  v3
                ).reflectSymbol Type.Proxy.Proxy)) r@v6);
              v8);
            {#- Rewrite - Inline -#}
            let v8 =
              ((((
                ConvertableOptions.convertRecordOptionsNil
              ).convertRecordOptions t@v4) Type.Proxy.Proxy) r@v6);
            (\x@v9 -> 
              (v7 (v8 x@v9))
            )
          )
      };
    v1;
  v1)
---------------
Snapshot.ConvertableOptions01.convertRecordOptionsCons1 (Step 2)
  (ConvertableOptions.convertRecordOptionsCons let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  { convertRecordOptions =
      (\t@v1 -> \v@v2 -> \r@v3 -> 
        let v4 =
          (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
            v0
          ).reflectSymbol Type.Proxy.Proxy)) r@v3));
        (\x@v5 -> 
          (v4 {#- Rewrite - Inline -#}
          let v6 =
            Type.Proxy.Proxy;
          x@v5)
        )
      )
  })
---------------
Snapshot.ConvertableOptions01.convertRecordOptionsCons1 (Step 3; Final)
  (ConvertableOptions.convertRecordOptionsCons let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  { convertRecordOptions =
      (\t@v1 -> \v@v2 -> \r@v3 -> 
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
          v0
        ).reflectSymbol Type.Proxy.Proxy)) r@v3))
      )
  })

===============

Snapshot.ConvertableOptions01.defaultOptions (Step 0; Original)
  { foo =
      42
  , baz =
      Data.Maybe.Nothing
  }
---------------
Snapshot.ConvertableOptions01.defaultOptions (Step 1; Final)
  { foo =
      42
  , baz =
      Data.Maybe.Nothing
  }

===============

Snapshot.ConvertableOptions01.defaultsRecord (Step 0; Original)
  ((ConvertableOptions.defaultsRecord <PrimUndefined>) <PrimUndefined>)
---------------
Snapshot.ConvertableOptions01.defaultsRecord (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      <PrimUndefined>;
    { defaults =
        (\b@v2 -> \a@v3 -> 
          (Record.Unsafe.Union.unsafeUnionFn a@v3 b@v2)
        )
    };
  v1
---------------
Snapshot.ConvertableOptions01.defaultsRecord (Step 2; Final)
  { defaults =
      (\b@v0 -> \a@v1 -> 
        (Record.Unsafe.Union.unsafeUnionFn a@v1 b@v0)
      )
  }

===============

Snapshot.ConvertableOptions01.flub (Step 0; Original)
  (\dictConvertOptionsWithDefaults@v0 -> 
    let convertOptionsWithDefaults@v1 =
      (ConvertableOptions.convertOptionsWithDefaults dictConvertOptionsWithDefaults@v0);
    (\provided@v2 -> 
      {#- Rewrite - Inline -#}
      let all@v3 =
        (((convertOptionsWithDefaults@v1 Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) provided@v2);
      (Snapshot.ConvertableOptions01.flubImpl all@v3)
    )
  )
---------------
Snapshot.ConvertableOptions01.flub (Step 1)
  (\dictConvertOptionsWithDefaults@v0 -> 
    {#- Rewrite - Inline -#}
    let convertOptionsWithDefaults@v1 =
      (
        dictConvertOptionsWithDefaults@v0
      ).convertOptionsWithDefaults;
    (\provided@v2 -> 
      ([[ Stop
        Snapshot.ConvertableOptions01.flubImpl
      ]] (((convertOptionsWithDefaults@v1 Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) provided@v2))
    )
  )
---------------
Snapshot.ConvertableOptions01.flub (Step 2; Final)
  (\dictConvertOptionsWithDefaults@v0 -> \provided@v1 -> 
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      dictConvertOptionsWithDefaults@v0
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) provided@v1))
  )

===============

Snapshot.ConvertableOptions01.flubImpl (Step 0; Original)
  (\v@v0 -> 
    "???"
  )
---------------
Snapshot.ConvertableOptions01.flubImpl (Step 1; Final)
  (\v@v0 -> 
    "???"
  )

===============

Snapshot.ConvertableOptions01.show (Step 0; Original)
  (Data.Show.show Data.Show.showInt)
---------------
Snapshot.ConvertableOptions01.show (Step 1; Final)
  Data.Show.showIntImpl

===============

Snapshot.ConvertableOptions01.test1 (Step 0; Original)
  ((Snapshot.ConvertableOptions01.flub ((ConvertableOptions.convertOptionsWithDefaultsRecord (Snapshot.ConvertableOptions01.convertOptionsRecord (((((Snapshot.ConvertableOptions01.convertRecordOptionsCons Snapshot.ConvertableOptions01.convertFlubBar2) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol))) Snapshot.ConvertableOptions01.defaultsRecord)) { bar =
      "Hello"
  })
---------------
Snapshot.ConvertableOptions01.test1 (Step 1)
  [[ LetAssoc
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      [[ LetAssoc
        let v1 =
          {#- Rewrite - Inline -#}
          let v1 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              {#- Rewrite - Inline -#}
              let v2 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v3 =
                <PrimUndefined>;
              { convertRecordOptions =
                  (\t@v4 -> \v@v5 -> \r@v6 -> 
                    let v7 =
                      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                      let v7 =
                        Type.Proxy.Proxy;
                      {#- Rewrite - Inline -#}
                      let v8 =
                        ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                        let v8 =
                          Type.Proxy.Proxy;
                        {#- Rewrite - Inline -#}
                        let v9 =
                          "bar";
                        v9) r@v6);
                      v8);
                    {#- Rewrite - Inline -#}
                    let v8 =
                      ((((
                        ConvertableOptions.convertRecordOptionsNil
                      ).convertRecordOptions t@v4) Type.Proxy.Proxy) r@v6);
                    (\x@v9 -> 
                      (v7 (v8 x@v9))
                    )
                  )
              };
            v2;
          v2;
        let v1 =
          { convertOptions =
              (\t@v2 -> \i@v3 -> 
                (((((
                  v1
                ).convertRecordOptions t@v2) Type.Proxy.Proxy) i@v3) })
              )
          };
        v1
      ]];
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\dictDefaults@v1 -> 
          { convertOptionsWithDefaults =
              (\t@v2 -> \def@v3 -> 
                let v4 =
                  ((
                    dictDefaults@v1
                  ).defaults def@v3);
                let v5 =
                  ((
                    v0
                  ).convertOptions t@v2);
                (\x@v6 -> 
                  (v4 (v5 x@v6))
                )
              )
          }
        );
      (v1 Snapshot.ConvertableOptions01.defaultsRecord);
    {#- Rewrite - Inline -#}
    let v1 =
      { bar =
          "Hello"
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v0
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) v1))
  ]]
---------------
Snapshot.ConvertableOptions01.test1 (Step 2)
  let v0 =
    [[ UnpackOp
      For identifier v0
        Unpack record
        labels = ["convertRecordOptions"]
      inside
        {#- Rewrite - Inline -#}
        let v1 =
          { convertOptions =
              (\t@v1 -> \i@v2 -> 
                (((((
                  v0
                ).convertRecordOptions t@v1) Type.Proxy.Proxy) i@v2) })
              )
          };
        v1
    ]];
  {#- Rewrite - Inline -#}
  let v1 =
    { convertOptionsWithDefaults =
        (\t@v1 -> \def@v2 -> 
          {#- Rewrite - Inline -#}
          let v3 =
            ((
              Snapshot.ConvertableOptions01.defaultsRecord
            ).defaults def@v2);
          let v4 =
            ((
              v0
            ).convertOptions t@v1);
          (\x@v5 -> 
            (v3 (v4 x@v5))
          )
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] ((((
    v1
  ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) { bar =
      "Hello"
  }))
---------------
Snapshot.ConvertableOptions01.test1 (Step 3)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      (\t@v0 -> \v@v1 -> \r@v2 -> \x@v3 -> 
        {#- Rewrite - Inline -#}
        let v4 =
          <PrimUndefined>;
        {#- Rewrite - Inline -#}
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v6 =
            Type.Proxy.Proxy;
          {#- Rewrite - Inline -#}
          let v7 =
            (
              r@v2
            ).bar;
          (((Record.Builder.unsafeInsert "bar") v7) x@v3);
        v5
      );
    { convertOptions =
        (\t@v1 -> \i@v2 -> 
          ((((v0 t@v1) Type.Proxy.Proxy) i@v2) })
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v1 =
    Snapshot.ConvertableOptions01.Flub;
  let v2 =
    ((
      v0
    ).convertOptions v1);
  {#- Rewrite - Inline -#}
  let v3 =
    (\x@v3 -> 
      {#- Rewrite - Inline -#}
      let v4 =
        (v2 x@v3);
      {#- Rewrite - Inline -#}
      let v5 =
        (Record.Unsafe.Union.unsafeUnionFn v4 Snapshot.ConvertableOptions01.defaultOptions);
      v5
    );
  (v3 { bar =
      "Hello"
  }))
---------------
Snapshot.ConvertableOptions01.test1 (Step 4)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      Snapshot.ConvertableOptions01.Flub;
    (\i@v1 -> 
      {#- Rewrite - Inline -#}
      let v2 =
        Type.Proxy.Proxy;
      {#- Rewrite - Inline -#}
      let v3 =
        };
      (((Record.Builder.unsafeInsert "bar") (
        i@v1
      ).bar) v3)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    { bar =
        "Hello"
    };
  (Record.Unsafe.Union.unsafeUnionFn (v0 v1) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test1 (Step 5)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn {#- Rewrite - Inline -#}
  let v0 =
    { bar =
        "Hello"
    };
  { bar =
      (
        v0
      ).bar
  } Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test1 (Step 6; Final)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn { bar =
      "Hello"
  } Snapshot.ConvertableOptions01.defaultOptions))

===============

Snapshot.ConvertableOptions01.test2 (Step 0; Original)
  ((Snapshot.ConvertableOptions01.flub ((ConvertableOptions.convertOptionsWithDefaultsRecord (Snapshot.ConvertableOptions01.convertOptionsRecord (((((Snapshot.ConvertableOptions01.convertRecordOptionsCons1 Snapshot.ConvertableOptions01.convertFlubBar2) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol))) Snapshot.ConvertableOptions01.defaultsRecord)) { foo =
      99
  , bar =
      "Hello"
  })
---------------
Snapshot.ConvertableOptions01.test2 (Step 1)
  [[ LetAssoc
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      [[ LetAssoc
        let v1 =
          { reflectSymbol =
              (\$__unused@v1 -> 
                "foo"
              )
          };
        let v1 =
          { convertRecordOptions =
              (\t@v2 -> \v@v3 -> \r@v4 -> 
                (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v1) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
                  v1
                ).reflectSymbol Type.Proxy.Proxy)) r@v4))
              )
          };
        let v1 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              {#- Rewrite - Inline -#}
              let v2 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v3 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v4 =
                <PrimUndefined>;
              { convertRecordOptions =
                  (\t@v5 -> \v@v6 -> \r@v7 -> 
                    let v8 =
                      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                      let v8 =
                        Type.Proxy.Proxy;
                      {#- Rewrite - Inline -#}
                      let v9 =
                        ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                        let v9 =
                          Type.Proxy.Proxy;
                        {#- Rewrite - Inline -#}
                        let v10 =
                          "bar";
                        v10) r@v7);
                      v9);
                    let v9 =
                      ((((
                        v1
                      ).convertRecordOptions t@v5) Type.Proxy.Proxy) r@v7);
                    (\x@v10 -> 
                      (v8 (v9 x@v10))
                    )
                  )
              };
            v2;
          v2;
        let v1 =
          { convertOptions =
              (\t@v2 -> \i@v3 -> 
                (((((
                  v1
                ).convertRecordOptions t@v2) Type.Proxy.Proxy) i@v3) })
              )
          };
        v1
      ]];
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\dictDefaults@v1 -> 
          { convertOptionsWithDefaults =
              (\t@v2 -> \def@v3 -> 
                let v4 =
                  ((
                    dictDefaults@v1
                  ).defaults def@v3);
                let v5 =
                  ((
                    v0
                  ).convertOptions t@v2);
                (\x@v6 -> 
                  (v4 (v5 x@v6))
                )
              )
          }
        );
      (v1 Snapshot.ConvertableOptions01.defaultsRecord);
    {#- Rewrite - Inline -#}
    let v1 =
      { foo =
          99
      , bar =
          "Hello"
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v0
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) v1))
  ]]
---------------
Snapshot.ConvertableOptions01.test2 (Step 2)
  [[ LetAssoc
    let v0 =
      { reflectSymbol =
          (\$__unused@v0 -> 
            "foo"
          )
      };
    let v0 =
      [[ UnpackOp
        For identifier v1
          Unpack record
          labels = ["convertRecordOptions"]
        inside
          [[ UnpackOp
            For identifier v2
              Unpack record
              labels = ["convertRecordOptions"]
            inside
              {#- Rewrite - Inline -#}
              let v3 =
                { convertOptions =
                    (\t@v3 -> \i@v4 -> 
                      (((((
                        v2
                      ).convertRecordOptions t@v3) Type.Proxy.Proxy) i@v4) })
                    )
                };
              v3
          ]]
      ]];
    {#- Rewrite - Inline -#}
    let v1 =
      { convertOptionsWithDefaults =
          (\t@v1 -> \def@v2 -> 
            {#- Rewrite - Inline -#}
            let v3 =
              ((
                Snapshot.ConvertableOptions01.defaultsRecord
              ).defaults def@v2);
            let v4 =
              ((
                v0
              ).convertOptions t@v1);
            (\x@v5 -> 
              (v3 (v4 x@v5))
            )
          )
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v1
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) { foo =
        99
    , bar =
        "Hello"
    }))
  ]]
---------------
Snapshot.ConvertableOptions01.test2 (Step 3)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      (\t@v1 -> \v@v2 -> \r@v3 -> 
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
          v0
        ).reflectSymbol Type.Proxy.Proxy)) r@v3))
      );
    {#- Rewrite - Inline -#}
    let v2 =
      (\t@v2 -> \v@v3 -> \r@v4 -> 
        let v5 =
          (((v1 t@v2) Type.Proxy.Proxy) r@v4);
        (\x@v6 -> 
          {#- Rewrite - Inline -#}
          let v7 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v8 =
            {#- Rewrite - Inline -#}
            let v8 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v9 =
              Type.Proxy.Proxy;
            {#- Rewrite - Inline -#}
            let v10 =
              (
                r@v4
              ).bar;
            {#- Rewrite - Inline -#}
            let v11 =
              (v5 x@v6);
            (((Record.Builder.unsafeInsert "bar") v10) v11);
          v8
        )
      );
    { convertOptions =
        (\t@v3 -> \i@v4 -> 
          ((((v2 t@v3) Type.Proxy.Proxy) i@v4) })
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v2 =
    Snapshot.ConvertableOptions01.Flub;
  let v3 =
    ((
      v1
    ).convertOptions v2);
  {#- Rewrite - Inline -#}
  let v4 =
    (\x@v4 -> 
      {#- Rewrite - Inline -#}
      let v5 =
        (v3 x@v4);
      {#- Rewrite - Inline -#}
      let v6 =
        (Record.Unsafe.Union.unsafeUnionFn v5 Snapshot.ConvertableOptions01.defaultOptions);
      v6
    );
  (v4 { foo =
      99
  , bar =
      "Hello"
  }))
---------------
Snapshot.ConvertableOptions01.test2 (Step 4)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      Snapshot.ConvertableOptions01.Flub;
    (\i@v2 -> 
      {#- Rewrite - Inline -#}
      let v3 =
        Type.Proxy.Proxy;
      let v4 =
        {#- Rewrite - Inline -#}
        let v4 =
          Type.Proxy.Proxy;
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
          v0
        ).reflectSymbol Type.Proxy.Proxy)) i@v2));
      {#- Rewrite - Inline -#}
      let v5 =
        (\x@v5 -> 
          (((Record.Builder.unsafeInsert "bar") (
            i@v2
          ).bar) (v4 x@v5))
        );
      (v5 })
    );
  {#- Rewrite - Inline -#}
  let v2 =
    { foo =
        99
    , bar =
        "Hello"
    };
  (Record.Unsafe.Union.unsafeUnionFn (v1 v2) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 5)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    };
  {#- Rewrite - Inline -#}
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
      v0
    ).reflectSymbol Type.Proxy.Proxy)) v1));
  {#- Rewrite - Inline -#}
  let v3 =
    {#- Rewrite - Inline -#}
    let v3 =
      };
    (((Record.Builder.unsafeInsert "bar") (
      v1
    ).bar) (v2 v3));
  v3 Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 6)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["reflectSymbol"]
    inside
      ([[ Stop
        Snapshot.ConvertableOptions01.flubImpl
      ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
        { foo =
            99
        , bar =
            "Hello"
        };
      (((Record.Builder.unsafeInsert "bar") (
        v1
      ).bar) {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          <PrimUndefined>;
        {#- Rewrite - Inline -#}
        let v4 =
          Type.Proxy.Proxy;
        {#- Rewrite - Inline -#}
        let v5 =
          ((Record.Unsafe.unsafeGet ((
            v0
          ).reflectSymbol Type.Proxy.Proxy)) v1);
        {#- Rewrite - Inline -#}
        let v6 =
          };
        (((Record.Builder.unsafeInsert ((
          v0
        ).reflectSymbol v4)) v5) v6);
      v3) Snapshot.ConvertableOptions01.defaultOptions))
  ]]
---------------
Snapshot.ConvertableOptions01.test2 (Step 7)
  {#- Rewrite - Inline -#}
  let v0 =
    (\$__unused@v0 -> 
      "foo"
    );
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    };
  (((Record.Builder.unsafeInsert "bar") (
    v1
  ).bar) (((Record.Builder.unsafeInsert (v0 Type.Proxy.Proxy)) ((Record.Unsafe.unsafeGet (v0 Type.Proxy.Proxy)) v1)) })) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 8)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v0 =
    { foo =
        99
    , bar =
        "Hello"
    };
  (((Record.Builder.unsafeInsert "bar") (
    v0
  ).bar) (((Record.Builder.unsafeInsert {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") v0)) })) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 9)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["foo","bar"]
    inside
      { foo =
          (
            v0
          ).foo
      , bar =
          (
            v0
          ).bar
      }
  ]] Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 10)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn {#- Rewrite - Inline -#}
  let v0 =
    99;
  {#- Rewrite - Inline -#}
  let v1 =
    "Hello";
  { foo =
      v0
  , bar =
      v1
  } Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test2 (Step 11; Final)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn { foo =
      99
  , bar =
      "Hello"
  } Snapshot.ConvertableOptions01.defaultOptions))

===============

Snapshot.ConvertableOptions01.test3 (Step 0; Original)
  ((Snapshot.ConvertableOptions01.flub ((ConvertableOptions.convertOptionsWithDefaultsRecord (Snapshot.ConvertableOptions01.convertOptionsRecord ((((((ConvertableOptions.convertRecordOptionsCons (((((Snapshot.ConvertableOptions01.convertRecordOptionsCons1 Snapshot.ConvertableOptions01.convertFlubBaz2) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.bazIsSymbol)) Snapshot.ConvertableOptions01.convertFlubBar2) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol))) Snapshot.ConvertableOptions01.defaultsRecord)) { foo =
      99
  , bar =
      "Hello"
  , baz =
      (Data.Maybe.Just true)
  })
---------------
Snapshot.ConvertableOptions01.test3 (Step 1)
  [[ LetAssoc
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      [[ LetAssoc
        let v1 =
          { reflectSymbol =
              (\$__unused@v1 -> 
                "foo"
              )
          };
        let v1 =
          { convertRecordOptions =
              (\t@v2 -> \v@v3 -> \r@v4 -> 
                (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v1) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
                  v1
                ).reflectSymbol Type.Proxy.Proxy)) r@v4))
              )
          };
        let v1 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              {#- Rewrite - Inline -#}
              let v2 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v3 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v4 =
                <PrimUndefined>;
              { convertRecordOptions =
                  (\t@v5 -> \v@v6 -> \r@v7 -> 
                    let v8 =
                      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.bazIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                      let v8 =
                        Type.Proxy.Proxy;
                      {#- Rewrite - Inline -#}
                      let v9 =
                        ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                        let v9 =
                          Type.Proxy.Proxy;
                        {#- Rewrite - Inline -#}
                        let v10 =
                          "baz";
                        v10) r@v7);
                      v9);
                    let v9 =
                      ((((
                        v1
                      ).convertRecordOptions t@v5) Type.Proxy.Proxy) r@v7);
                    (\x@v10 -> 
                      (v8 (v9 x@v10))
                    )
                  )
              };
            v2;
          v2;
        let v1 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v3 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v4 =
              <PrimUndefined>;
            { convertRecordOptions =
                (\t@v5 -> \v@v6 -> \r@v7 -> 
                  let v8 =
                    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                    let v8 =
                      Type.Proxy.Proxy;
                    {#- Rewrite - Inline -#}
                    let v9 =
                      ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                      let v9 =
                        Type.Proxy.Proxy;
                      {#- Rewrite - Inline -#}
                      let v10 =
                        "bar";
                      v10) r@v7);
                    v9);
                  let v9 =
                    ((((
                      v1
                    ).convertRecordOptions t@v5) Type.Proxy.Proxy) r@v7);
                  (\x@v10 -> 
                    (v8 (v9 x@v10))
                  )
                )
            };
          v2;
        let v1 =
          { convertOptions =
              (\t@v2 -> \i@v3 -> 
                (((((
                  v1
                ).convertRecordOptions t@v2) Type.Proxy.Proxy) i@v3) })
              )
          };
        v1
      ]];
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\dictDefaults@v1 -> 
          { convertOptionsWithDefaults =
              (\t@v2 -> \def@v3 -> 
                let v4 =
                  ((
                    dictDefaults@v1
                  ).defaults def@v3);
                let v5 =
                  ((
                    v0
                  ).convertOptions t@v2);
                (\x@v6 -> 
                  (v4 (v5 x@v6))
                )
              )
          }
        );
      (v1 Snapshot.ConvertableOptions01.defaultsRecord);
    {#- Rewrite - Inline -#}
    let v1 =
      { foo =
          99
      , bar =
          "Hello"
      , baz =
          (Data.Maybe.Just.Maybe true)
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v0
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) v1))
  ]]
---------------
Snapshot.ConvertableOptions01.test3 (Step 2)
  [[ LetAssoc
    let v0 =
      { reflectSymbol =
          (\$__unused@v0 -> 
            "foo"
          )
      };
    let v0 =
      [[ UnpackOp
        For identifier v1
          Unpack record
          labels = ["convertRecordOptions"]
        inside
          [[ UnpackOp
            For identifier v2
              Unpack record
              labels = ["convertRecordOptions"]
            inside
              [[ UnpackOp
                For identifier v3
                  Unpack record
                  labels = ["convertRecordOptions"]
                inside
                  {#- Rewrite - Inline -#}
                  let v4 =
                    { convertOptions =
                        (\t@v4 -> \i@v5 -> 
                          (((((
                            v3
                          ).convertRecordOptions t@v4) Type.Proxy.Proxy) i@v5) })
                        )
                    };
                  v4
              ]]
          ]]
      ]];
    {#- Rewrite - Inline -#}
    let v1 =
      { convertOptionsWithDefaults =
          (\t@v1 -> \def@v2 -> 
            {#- Rewrite - Inline -#}
            let v3 =
              ((
                Snapshot.ConvertableOptions01.defaultsRecord
              ).defaults def@v2);
            let v4 =
              ((
                v0
              ).convertOptions t@v1);
            (\x@v5 -> 
              (v3 (v4 x@v5))
            )
          )
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v1
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    }))
  ]]
---------------
Snapshot.ConvertableOptions01.test3 (Step 3)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      (\t@v1 -> \v@v2 -> \r@v3 -> 
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
          v0
        ).reflectSymbol Type.Proxy.Proxy)) r@v3))
      );
    {#- Rewrite - Inline -#}
    let v2 =
      (\t@v2 -> \v@v3 -> \r@v4 -> 
        let v5 =
          (((v1 t@v2) Type.Proxy.Proxy) r@v4);
        (\x@v6 -> 
          {#- Rewrite - Inline -#}
          let v7 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v8 =
            {#- Rewrite - Inline -#}
            let v8 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v9 =
              Type.Proxy.Proxy;
            {#- Rewrite - Inline -#}
            let v10 =
              (
                r@v4
              ).baz;
            {#- Rewrite - Inline -#}
            let v11 =
              (v5 x@v6);
            (((Record.Builder.unsafeInsert "baz") v10) v11);
          v8
        )
      );
    {#- Rewrite - Inline -#}
    let v3 =
      (\t@v3 -> \v@v4 -> \r@v5 -> 
        let v6 =
          (((v2 t@v3) Type.Proxy.Proxy) r@v5);
        (\x@v7 -> 
          {#- Rewrite - Inline -#}
          let v8 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v9 =
            {#- Rewrite - Inline -#}
            let v9 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v10 =
              Type.Proxy.Proxy;
            {#- Rewrite - Inline -#}
            let v11 =
              (
                r@v5
              ).bar;
            {#- Rewrite - Inline -#}
            let v12 =
              (v6 x@v7);
            (((Record.Builder.unsafeInsert "bar") v11) v12);
          v9
        )
      );
    { convertOptions =
        (\t@v4 -> \i@v5 -> 
          ((((v3 t@v4) Type.Proxy.Proxy) i@v5) })
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v2 =
    Snapshot.ConvertableOptions01.Flub;
  let v3 =
    ((
      v1
    ).convertOptions v2);
  {#- Rewrite - Inline -#}
  let v4 =
    (\x@v4 -> 
      {#- Rewrite - Inline -#}
      let v5 =
        (v3 x@v4);
      {#- Rewrite - Inline -#}
      let v6 =
        (Record.Unsafe.Union.unsafeUnionFn v5 Snapshot.ConvertableOptions01.defaultOptions);
      v6
    );
  (v4 { foo =
      99
  , bar =
      "Hello"
  , baz =
      (Data.Maybe.Just.Maybe true)
  }))
---------------
Snapshot.ConvertableOptions01.test3 (Step 4)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      Snapshot.ConvertableOptions01.Flub;
    (\i@v2 -> 
      {#- Rewrite - Inline -#}
      let v3 =
        Type.Proxy.Proxy;
      let v4 =
        {#- Rewrite - Inline -#}
        let v4 =
          Type.Proxy.Proxy;
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            Type.Proxy.Proxy;
          (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
            v0
          ).reflectSymbol Type.Proxy.Proxy)) i@v2));
        {#- Rewrite - Inline -#}
        let v6 =
          (\x@v6 -> 
            (((Record.Builder.unsafeInsert "baz") (
              i@v2
            ).baz) (v5 x@v6))
          );
        v6;
      {#- Rewrite - Inline -#}
      let v5 =
        (\x@v5 -> 
          (((Record.Builder.unsafeInsert "bar") (
            i@v2
          ).bar) (v4 x@v5))
        );
      (v5 })
    );
  {#- Rewrite - Inline -#}
  let v2 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  (Record.Unsafe.Union.unsafeUnionFn (v1 v2) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 5)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  [[ LetAssoc
    let v2 =
      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
        v0
      ).reflectSymbol Type.Proxy.Proxy)) v1));
    let v2 =
      (\x@v3 -> 
        (((Record.Builder.unsafeInsert "baz") (
          v1
        ).baz) (v2 x@v3))
      );
    {#- Rewrite - Inline -#}
    let v3 =
      {#- Rewrite - Inline -#}
      let v3 =
        };
      (((Record.Builder.unsafeInsert "bar") (
        v1
      ).bar) (v2 v3));
    v3
  ]] Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 6)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
      v0
    ).reflectSymbol Type.Proxy.Proxy)) v1));
  {#- Rewrite - Inline -#}
  let v3 =
    (\x@v3 -> 
      (((Record.Builder.unsafeInsert "baz") (
        v1
      ).baz) (v2 x@v3))
    );
  (((Record.Builder.unsafeInsert "bar") (
    v1
  ).bar) (v3 })) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 7)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  {#- Rewrite - Inline -#}
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
      v0
    ).reflectSymbol Type.Proxy.Proxy)) v1));
  (((Record.Builder.unsafeInsert "bar") (
    v1
  ).bar) {#- Rewrite - Inline -#}
  let v3 =
    };
  (((Record.Builder.unsafeInsert "baz") (
    v1
  ).baz) (v2 v3))) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 8)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["reflectSymbol"]
    inside
      ([[ Stop
        Snapshot.ConvertableOptions01.flubImpl
      ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
        { foo =
            99
        , bar =
            "Hello"
        , baz =
            (Data.Maybe.Just.Maybe true)
        };
      (((Record.Builder.unsafeInsert "bar") (
        v1
      ).bar) (((Record.Builder.unsafeInsert "baz") (
        v1
      ).baz) {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          <PrimUndefined>;
        {#- Rewrite - Inline -#}
        let v4 =
          Type.Proxy.Proxy;
        {#- Rewrite - Inline -#}
        let v5 =
          ((Record.Unsafe.unsafeGet ((
            v0
          ).reflectSymbol Type.Proxy.Proxy)) v1);
        {#- Rewrite - Inline -#}
        let v6 =
          };
        (((Record.Builder.unsafeInsert ((
          v0
        ).reflectSymbol v4)) v5) v6);
      v3)) Snapshot.ConvertableOptions01.defaultOptions))
  ]]
---------------
Snapshot.ConvertableOptions01.test3 (Step 9)
  {#- Rewrite - Inline -#}
  let v0 =
    (\$__unused@v0 -> 
      "foo"
    );
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  (((Record.Builder.unsafeInsert "bar") (
    v1
  ).bar) (((Record.Builder.unsafeInsert "baz") (
    v1
  ).baz) (((Record.Builder.unsafeInsert (v0 Type.Proxy.Proxy)) ((Record.Unsafe.unsafeGet (v0 Type.Proxy.Proxy)) v1)) }))) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 10)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v0 =
    { foo =
        99
    , bar =
        "Hello"
    , baz =
        (Data.Maybe.Just.Maybe true)
    };
  (((Record.Builder.unsafeInsert "bar") (
    v0
  ).bar) (((Record.Builder.unsafeInsert "baz") (
    v0
  ).baz) (((Record.Builder.unsafeInsert {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") v0)) }))) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 11)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["foo","bar","baz"]
    inside
      { foo =
          (
            v0
          ).foo
      , baz =
          (
            v0
          ).baz
      , bar =
          (
            v0
          ).bar
      }
  ]] Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 12)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn {#- Rewrite - Inline -#}
  let v0 =
    99;
  {#- Rewrite - Inline -#}
  let v1 =
    "Hello";
  {#- Rewrite - Inline -#}
  let v2 =
    (Data.Maybe.Just.Maybe true);
  { foo =
      v0
  , baz =
      v2
  , bar =
      v1
  } Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test3 (Step 13; Final)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn { foo =
      99
  , baz =
      (Data.Maybe.Just.Maybe true)
  , bar =
      "Hello"
  } Snapshot.ConvertableOptions01.defaultOptions))

===============

Snapshot.ConvertableOptions01.test4 (Step 0; Original)
  ((Snapshot.ConvertableOptions01.flub ((ConvertableOptions.convertOptionsWithDefaultsRecord (Snapshot.ConvertableOptions01.convertOptionsRecord ((((((ConvertableOptions.convertRecordOptionsCons (((((Snapshot.ConvertableOptions01.convertRecordOptionsCons1 Snapshot.ConvertableOptions01.convertFlubBaz1) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.bazIsSymbol)) Snapshot.ConvertableOptions01.convertFlubBar1) <PrimUndefined>) <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol))) Snapshot.ConvertableOptions01.defaultsRecord)) { foo =
      99
  , bar =
      42
  , baz =
      true
  })
---------------
Snapshot.ConvertableOptions01.test4 (Step 1)
  [[ LetAssoc
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      [[ LetAssoc
        let v1 =
          { reflectSymbol =
              (\$__unused@v1 -> 
                "foo"
              )
          };
        let v1 =
          { convertRecordOptions =
              (\t@v2 -> \v@v3 -> \r@v4 -> 
                (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v1) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
                  v1
                ).reflectSymbol Type.Proxy.Proxy)) r@v4))
              )
          };
        let v1 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              {#- Rewrite - Inline -#}
              let v2 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v3 =
                <PrimUndefined>;
              {#- Rewrite - Inline -#}
              let v4 =
                <PrimUndefined>;
              { convertRecordOptions =
                  (\t@v5 -> \v@v6 -> \r@v7 -> 
                    let v8 =
                      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.bazIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                      let v8 =
                        Type.Proxy.Proxy;
                      {#- Rewrite - Inline -#}
                      let v9 =
                        {#- Rewrite - Inline -#}
                        let v9 =
                          ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                          let v9 =
                            Type.Proxy.Proxy;
                          {#- Rewrite - Inline -#}
                          let v10 =
                            "baz";
                          v10) r@v7);
                        (Data.Maybe.Just.Maybe v9);
                      v9);
                    let v9 =
                      ((((
                        v1
                      ).convertRecordOptions t@v5) Type.Proxy.Proxy) r@v7);
                    (\x@v10 -> 
                      (v8 (v9 x@v10))
                    )
                  )
              };
            v2;
          v2;
        let v1 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v3 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v4 =
              <PrimUndefined>;
            { convertRecordOptions =
                (\t@v5 -> \v@v6 -> \r@v7 -> 
                  let v8 =
                    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) {#- Rewrite - Inline -#}
                    let v8 =
                      Type.Proxy.Proxy;
                    {#- Rewrite - Inline -#}
                    let v9 =
                      {#- Rewrite - Inline -#}
                      let v9 =
                        ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                        let v9 =
                          Type.Proxy.Proxy;
                        {#- Rewrite - Inline -#}
                        let v10 =
                          "bar";
                        v10) r@v7);
                      (Data.Show.showIntImpl v9);
                    v9);
                  let v9 =
                    ((((
                      v1
                    ).convertRecordOptions t@v5) Type.Proxy.Proxy) r@v7);
                  (\x@v10 -> 
                    (v8 (v9 x@v10))
                  )
                )
            };
          v2;
        let v1 =
          { convertOptions =
              (\t@v2 -> \i@v3 -> 
                (((((
                  v1
                ).convertRecordOptions t@v2) Type.Proxy.Proxy) i@v3) })
              )
          };
        v1
      ]];
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\dictDefaults@v1 -> 
          { convertOptionsWithDefaults =
              (\t@v2 -> \def@v3 -> 
                let v4 =
                  ((
                    dictDefaults@v1
                  ).defaults def@v3);
                let v5 =
                  ((
                    v0
                  ).convertOptions t@v2);
                (\x@v6 -> 
                  (v4 (v5 x@v6))
                )
              )
          }
        );
      (v1 Snapshot.ConvertableOptions01.defaultsRecord);
    {#- Rewrite - Inline -#}
    let v1 =
      { foo =
          99
      , bar =
          42
      , baz =
          true
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v0
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) v1))
  ]]
---------------
Snapshot.ConvertableOptions01.test4 (Step 2)
  [[ LetAssoc
    let v0 =
      { reflectSymbol =
          (\$__unused@v0 -> 
            "foo"
          )
      };
    let v0 =
      [[ UnpackOp
        For identifier v1
          Unpack record
          labels = ["convertRecordOptions"]
        inside
          [[ UnpackOp
            For identifier v2
              Unpack record
              labels = ["convertRecordOptions"]
            inside
              [[ UnpackOp
                For identifier v3
                  Unpack record
                  labels = ["convertRecordOptions"]
                inside
                  {#- Rewrite - Inline -#}
                  let v4 =
                    { convertOptions =
                        (\t@v4 -> \i@v5 -> 
                          (((((
                            v3
                          ).convertRecordOptions t@v4) Type.Proxy.Proxy) i@v5) })
                        )
                    };
                  v4
              ]]
          ]]
      ]];
    {#- Rewrite - Inline -#}
    let v1 =
      { convertOptionsWithDefaults =
          (\t@v1 -> \def@v2 -> 
            {#- Rewrite - Inline -#}
            let v3 =
              ((
                Snapshot.ConvertableOptions01.defaultsRecord
              ).defaults def@v2);
            let v4 =
              ((
                v0
              ).convertOptions t@v1);
            (\x@v5 -> 
              (v3 (v4 x@v5))
            )
          )
      };
    ([[ Stop
      Snapshot.ConvertableOptions01.flubImpl
    ]] ((((
      v1
    ).convertOptionsWithDefaults Snapshot.ConvertableOptions01.Flub) Snapshot.ConvertableOptions01.defaultOptions) { foo =
        99
    , bar =
        42
    , baz =
        true
    }))
  ]]
---------------
Snapshot.ConvertableOptions01.test4 (Step 3)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      (\t@v1 -> \v@v2 -> \r@v3 -> 
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
          v0
        ).reflectSymbol Type.Proxy.Proxy)) r@v3))
      );
    {#- Rewrite - Inline -#}
    let v2 =
      (\t@v2 -> \v@v3 -> \r@v4 -> 
        let v5 =
          (((v1 t@v2) Type.Proxy.Proxy) r@v4);
        (\x@v6 -> 
          {#- Rewrite - Inline -#}
          let v7 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v8 =
            {#- Rewrite - Inline -#}
            let v8 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v9 =
              Type.Proxy.Proxy;
            {#- Rewrite - Inline -#}
            let v10 =
              (Data.Maybe.Just.Maybe (
                r@v4
              ).baz);
            {#- Rewrite - Inline -#}
            let v11 =
              (v5 x@v6);
            (((Record.Builder.unsafeInsert "baz") v10) v11);
          v8
        )
      );
    {#- Rewrite - Inline -#}
    let v3 =
      (\t@v3 -> \v@v4 -> \r@v5 -> 
        let v6 =
          (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) (Data.Show.showIntImpl (
            r@v5
          ).bar));
        let v7 =
          (((v2 t@v3) Type.Proxy.Proxy) r@v5);
        (\x@v8 -> 
          (v6 (v7 x@v8))
        )
      );
    { convertOptions =
        (\t@v4 -> \i@v5 -> 
          ((((v3 t@v4) Type.Proxy.Proxy) i@v5) })
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v2 =
    Snapshot.ConvertableOptions01.Flub;
  let v3 =
    ((
      v1
    ).convertOptions v2);
  {#- Rewrite - Inline -#}
  let v4 =
    (\x@v4 -> 
      {#- Rewrite - Inline -#}
      let v5 =
        (v3 x@v4);
      {#- Rewrite - Inline -#}
      let v6 =
        (Record.Unsafe.Union.unsafeUnionFn v5 Snapshot.ConvertableOptions01.defaultOptions);
      v6
    );
  (v4 { foo =
      99
  , bar =
      42
  , baz =
      true
  }))
---------------
Snapshot.ConvertableOptions01.test4 (Step 4)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      Snapshot.ConvertableOptions01.Flub;
    (\i@v2 -> 
      {#- Rewrite - Inline -#}
      let v3 =
        Type.Proxy.Proxy;
      let v4 =
        (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) (Data.Show.showIntImpl (
          i@v2
        ).bar));
      [[ LetAssoc
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            Type.Proxy.Proxy;
          let v6 =
            {#- Rewrite - Inline -#}
            let v6 =
              Type.Proxy.Proxy;
            (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
              v0
            ).reflectSymbol Type.Proxy.Proxy)) i@v2));
          {#- Rewrite - Inline -#}
          let v7 =
            (\x@v7 -> 
              (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
                i@v2
              ).baz)) (v6 x@v7))
            );
          v7;
        let v5 =
          (\x@v6 -> 
            (v4 (v5 x@v6))
          );
        (v5 })
      ]]
    );
  {#- Rewrite - Inline -#}
  let v2 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  (Record.Unsafe.Union.unsafeUnionFn (v1 v2) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 5)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) (Data.Show.showIntImpl (
      v1
    ).bar));
  [[ LetAssoc
    let v3 =
      (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
        v0
      ).reflectSymbol Type.Proxy.Proxy)) v1));
    let v3 =
      (\x@v4 -> 
        (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
          v1
        ).baz)) (v3 x@v4))
      );
    let v3 =
      {#- Rewrite - Inline -#}
      let v4 =
        (\x@v4 -> 
          (v2 (v3 x@v4))
        );
      (v4 });
    v3
  ]] Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 6)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  {#- Rewrite - Inline -#}
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) Snapshot.ConvertableOptions01.barIsSymbol) Type.Proxy.Proxy) (Data.Show.showIntImpl (
      v1
    ).bar));
  let v3 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
      v0
    ).reflectSymbol Type.Proxy.Proxy)) v1));
  {#- Rewrite - Inline -#}
  let v4 =
    (\x@v4 -> 
      (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
        v1
      ).baz)) (v3 x@v4))
    );
  {#- Rewrite - Inline -#}
  let v5 =
    {#- Rewrite - Inline -#}
    let v5 =
      };
    (v2 (v4 v5));
  v5 Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 7)
  let v0 =
    { reflectSymbol =
        (\$__unused@v0 -> 
          "foo"
        )
    };
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  {#- Rewrite - Inline -#}
  let v2 =
    (((((Record.Builder.insert <PrimUndefined>) <PrimUndefined>) v0) Type.Proxy.Proxy) ((Record.Unsafe.unsafeGet ((
      v0
    ).reflectSymbol Type.Proxy.Proxy)) v1));
  {#- Rewrite - Inline -#}
  let v3 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v4 =
    {#- Rewrite - Inline -#}
    let v4 =
      <PrimUndefined>;
    {#- Rewrite - Inline -#}
    let v5 =
      Type.Proxy.Proxy;
    {#- Rewrite - Inline -#}
    let v6 =
      (Data.Show.showIntImpl (
        v1
      ).bar);
    {#- Rewrite - Inline -#}
    let v7 =
      {#- Rewrite - Inline -#}
      let v7 =
        };
      (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
        v1
      ).baz)) (v2 v7));
    (((Record.Builder.unsafeInsert "bar") v6) v7);
  v4 Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 8)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["reflectSymbol"]
    inside
      ([[ Stop
        Snapshot.ConvertableOptions01.flubImpl
      ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
        { foo =
            99
        , bar =
            42
        , baz =
            true
        };
      (((Record.Builder.unsafeInsert "bar") (Data.Show.showIntImpl (
        v1
      ).bar)) (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
        v1
      ).baz)) {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          <PrimUndefined>;
        {#- Rewrite - Inline -#}
        let v4 =
          Type.Proxy.Proxy;
        {#- Rewrite - Inline -#}
        let v5 =
          ((Record.Unsafe.unsafeGet ((
            v0
          ).reflectSymbol Type.Proxy.Proxy)) v1);
        {#- Rewrite - Inline -#}
        let v6 =
          };
        (((Record.Builder.unsafeInsert ((
          v0
        ).reflectSymbol v4)) v5) v6);
      v3)) Snapshot.ConvertableOptions01.defaultOptions))
  ]]
---------------
Snapshot.ConvertableOptions01.test4 (Step 9)
  {#- Rewrite - Inline -#}
  let v0 =
    (\$__unused@v0 -> 
      "foo"
    );
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v1 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  (((Record.Builder.unsafeInsert "bar") (Data.Show.showIntImpl (
    v1
  ).bar)) (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
    v1
  ).baz)) (((Record.Builder.unsafeInsert (v0 Type.Proxy.Proxy)) ((Record.Unsafe.unsafeGet (v0 Type.Proxy.Proxy)) v1)) }))) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 10)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn let v0 =
    { foo =
        99
    , bar =
        42
    , baz =
        true
    };
  (((Record.Builder.unsafeInsert "bar") (Data.Show.showIntImpl (
    v0
  ).bar)) (((Record.Builder.unsafeInsert "baz") (Data.Maybe.Just.Maybe (
    v0
  ).baz)) (((Record.Builder.unsafeInsert {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  "foo") v0)) }))) Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 11)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["foo","bar","baz"]
    inside
      { foo =
          (
            v0
          ).foo
      , baz =
          (Data.Maybe.Just.Maybe (
            v0
          ).baz)
      , bar =
          (Data.Show.showIntImpl (
            v0
          ).bar)
      }
  ]] Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 12)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn {#- Rewrite - Inline -#}
  let v0 =
    99;
  {#- Rewrite - Inline -#}
  let v1 =
    42;
  {#- Rewrite - Inline -#}
  let v2 =
    true;
  { foo =
      v0
  , baz =
      (Data.Maybe.Just.Maybe v2)
  , bar =
      (Data.Show.showIntImpl v1)
  } Snapshot.ConvertableOptions01.defaultOptions))
---------------
Snapshot.ConvertableOptions01.test4 (Step 13; Final)
  ([[ Stop
    Snapshot.ConvertableOptions01.flubImpl
  ]] (Record.Unsafe.Union.unsafeUnionFn { foo =
      99
  , baz =
      (Data.Maybe.Just.Maybe true)
  , bar =
      "42"
  } Snapshot.ConvertableOptions01.defaultOptions))