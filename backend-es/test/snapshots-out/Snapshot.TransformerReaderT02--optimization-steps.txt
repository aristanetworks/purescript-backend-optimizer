Snapshot.TransformerReaderT02.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.TransformerReaderT02.add (Step 1; Final)
  Data.Semiring.intAdd
===============
Snapshot.TransformerReaderT02.apply (Step 0; Original)
  (Control.Apply.apply (Control.Monad.Reader.Trans.applyReaderT Effect.applyEffect))
---------------
Snapshot.TransformerReaderT02.apply (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      Effect.functorEffect;
    [[ LetAssoc
      let functorReaderT1@v1 =
        { map =
            (\x@v1 -> 
              let v2 =
                ((
                  v0
                ).map x@v1);
              (\v@v3 -> \x@v4 -> 
                (v2 (v@v3 x@v4))
              )
            )
        };
      let v1 =
        { apply =
            (\v@v2 -> \v1@v3 -> \r@v4 -> 
              let v5 =
                (v@v2 r@v4);
              [[ LetAssoc
                let v6 =
                  (v1@v3 r@v4);
                let v6 =
                  letEffect f'@v7 =
                    v5;
                  letEffect a'@v8 =
                    v6;
                  let v9 =
                    (f'@v7 a'@v8);
                  {#- Rewrite - Inline -#}
                  let v10 =
                    (effectPure v9);
                  v10;
                v6
              ]]
            )
        , Functor0 =
            (\$__unused@v2 -> 
              functorReaderT1@v1
            )
        };
      let v1 =
        v1;
      v1
    ]];
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).apply;
  v1
---------------
Snapshot.TransformerReaderT02.apply (Step 2)
  let functorReaderT1@v0 =
    { map =
        (\x@v0 -> 
          {#- Rewrite - Inline -#}
          let v1 =
            (\a@v1 -> 
              (effectDefer letEffect a'@v2 =
                a@v1;
              (effectPure (x@v0 a'@v2)))
            );
          (\v@v2 -> \x@v3 -> 
            (v1 (v@v2 x@v3))
          )
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      { apply =
          (\v@v1 -> \v1@v2 -> \r@v3 -> 
            let v4 =
              (v@v1 r@v3);
            let v5 =
              (v1@v2 r@v3);
            {#- Rewrite - Inline -#}
            let v6 =
              letEffect f'@v6 =
                v4;
              letEffect a'@v7 =
                v5;
              {#- Rewrite - Inline -#}
              let v8 =
                (f'@v6 a'@v7);
              (effectPure v8);
            v6
          )
      , Functor0 =
          (\$__unused@v1 -> 
            functorReaderT1@v0
          )
      };
    v1;
  (
    v1
  ).apply
---------------
Snapshot.TransformerReaderT02.apply (Step 3)
  {#- Rewrite - Inline -#}
  let functorReaderT1@v0 =
    { map =
        (\x@v0 -> \v@v1 -> \x@v2 -> 
          let v3 =
            (v@v1 x@v2);
          (effectDefer letEffect a'@v4 =
            v3;
          (effectPure (x@v0 a'@v4)))
        )
    };
  (\v@v1 -> \v1@v2 -> \r@v3 -> 
    let v4 =
      (v@v1 r@v3);
    let v5 =
      (v1@v2 r@v3);
    letEffect f'@v6 =
      v4;
    letEffect a'@v7 =
      v5;
    (effectPure (f'@v6 a'@v7))
  )
---------------
Snapshot.TransformerReaderT02.apply (Step 4; Final)
  (\v@v0 -> \v1@v1 -> \r@v2 -> 
    let v3 =
      (v@v0 r@v2);
    let v4 =
      (v1@v1 r@v2);
    letEffect f'@v5 =
      v3;
    letEffect a'@v6 =
      v4;
    (effectPure (f'@v5 a'@v6))
  )
===============
Snapshot.TransformerReaderT02.ask (Step 0; Original)
  (Control.Monad.Reader.Class.ask (Control.Monad.Reader.Trans.monadAskReaderT Effect.monadEffect))
---------------
Snapshot.TransformerReaderT02.ask (Step 1)
  [[ LetAssoc
    let monadReaderT1@v0 =
      (Control.Monad.Reader.Trans.monadReaderT Effect.monadEffect);
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          { ask =
              {#- Rewrite - Inline -#}
              let v1 =
                <PrimUndefined>;
              Effect.pureE
          , Monad0 =
              (\$__unused@v1 -> 
                monadReaderT1@v0
              )
          };
        v1;
      v1;
    {#- Rewrite - Inline -#}
    let v1 =
      (
        v0
      ).ask;
    v1
  ]]
---------------
Snapshot.TransformerReaderT02.ask (Step 2)
  let monadReaderT1@v0 =
    (Control.Monad.Reader.Trans.monadReaderT Effect.monadEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    { ask =
        Effect.pureE
    , Monad0 =
        (\$__unused@v1 -> 
          monadReaderT1@v0
        )
    };
  (
    v1
  ).ask
---------------
Snapshot.TransformerReaderT02.ask (Step 3)
  {#- Rewrite - Inline -#}
  let monadReaderT1@v0 =
    (Control.Monad.Reader.Trans.monadReaderT Effect.monadEffect);
  Effect.pureE
---------------
Snapshot.TransformerReaderT02.ask (Step 4; Final)
  Effect.pureE
===============
Snapshot.TransformerReaderT02.bind (Step 0; Original)
  (Control.Bind.bind Snapshot.TransformerReaderT02.bindReaderT)
---------------
Snapshot.TransformerReaderT02.bind (Step 1; Final)
  (
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind
===============
Snapshot.TransformerReaderT02.bindReaderT (Step 0; Original)
  (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect)
---------------
Snapshot.TransformerReaderT02.bindReaderT (Step 1; Final)
  (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect)
===============
Snapshot.TransformerReaderT02.discard (Step 0; Original)
  (Control.Bind.discard Control.Bind.discardUnit)
---------------
Snapshot.TransformerReaderT02.discard (Step 1; Final)
  (
    Control.Bind.discardUnit
  ).discard
===============
Snapshot.TransformerReaderT02.liftEffect (Step 0; Original)
  (Effect.Class.liftEffect Snapshot.TransformerReaderT02.monadEffectReader)
---------------
Snapshot.TransformerReaderT02.liftEffect (Step 1; Final)
  (
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect
===============
Snapshot.TransformerReaderT02.local (Step 0; Original)
  (Control.Monad.Reader.Class.local Snapshot.TransformerReaderT02.monadReaderReaderT)
---------------
Snapshot.TransformerReaderT02.local (Step 1; Final)
  (
    Snapshot.TransformerReaderT02.monadReaderReaderT
  ).local
===============
Snapshot.TransformerReaderT02.map (Step 0; Original)
  (Data.Functor.map (Control.Monad.Reader.Trans.functorReaderT Effect.functorEffect))
---------------
Snapshot.TransformerReaderT02.map (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    { map =
        (\x@v0 -> 
          {#- Rewrite - Inline -#}
          let v1 =
            (\a@v1 -> 
              (effectDefer letEffect a'@v2 =
                a@v1;
              (effectPure (x@v0 a'@v2)))
            );
          (\v@v2 -> \x@v3 -> 
            (v1 (v@v2 x@v3))
          )
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).map;
  v1
---------------
Snapshot.TransformerReaderT02.map (Step 2; Final)
  (\x@v0 -> \v@v1 -> \x@v2 -> 
    let v3 =
      (v@v1 x@v2);
    (effectDefer letEffect a'@v4 =
      v3;
    (effectPure (x@v0 a'@v4)))
  )
===============
Snapshot.TransformerReaderT02.monadEffectReader (Step 0; Original)
  (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
---------------
Snapshot.TransformerReaderT02.monadEffectReader (Step 1; Final)
  (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
===============
Snapshot.TransformerReaderT02.monadReaderReaderT (Step 0; Original)
  (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
---------------
Snapshot.TransformerReaderT02.monadReaderReaderT (Step 1; Final)
  (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
===============
Snapshot.TransformerReaderT02.mul (Step 0; Original)
  (Data.Semiring.mul Data.Semiring.semiringInt)
---------------
Snapshot.TransformerReaderT02.mul (Step 1; Final)
  Data.Semiring.intMul
===============
Snapshot.TransformerReaderT02.program1 (Step 0; Original)
  (\dictMonadReader@v0 -> 
    let ask1@v1 =
      (Control.Monad.Reader.Class.ask ((
        dictMonadReader@v0
      ).MonadAsk0 <PrimUndefined>));
    let local1@v2 =
      (Control.Monad.Reader.Class.local dictMonadReader@v0);
    (\dictMonadEffect@v3 -> 
      let Monad0@v4 =
        ((
          dictMonadEffect@v3
        ).Monad0 <PrimUndefined>);
      let Bind1@v5 =
        ((
          Monad0@v4
        ).Bind1 <PrimUndefined>);
      let liftEffect1@v6 =
        (Effect.Class.liftEffect dictMonadEffect@v3);
      let bind1@v7 =
        (Control.Bind.bind Bind1@v5);
      let Apply0@v8 =
        ((
          Bind1@v5
        ).Apply0 <PrimUndefined>);
      let map1@v9 =
        (Data.Functor.map ((
          Apply0@v8
        ).Functor0 <PrimUndefined>));
      let apply1@v10 =
        (Control.Apply.apply Apply0@v8);
      let pure1@v11 =
        (Control.Applicative.pure ((
          Monad0@v4
        ).Applicative0 <PrimUndefined>));
      (((Snapshot.TransformerReaderT02.discard Bind1@v5) (liftEffect1@v6 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v7 (liftEffect1@v6 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v7 ((map1@v9 (\v@v14 -> 
            ((Snapshot.TransformerReaderT02.add v@v14) 1)
          )) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((bind1@v7 ((apply1@v10 ((map1@v9 Snapshot.TransformerReaderT02.add) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
              ((bind1@v7 ask1@v1) (\five@v16 -> 
                ((bind1@v7 ((local1@v2 (\v@v17 -> 
                  ((Snapshot.TransformerReaderT02.mul v@v17) 2)
                )) ((bind1@v7 ask1@v1) (\ten@v17 -> 
                  (liftEffect1@v6 ((Effect.Random.randomInt ten@v17) 20))
                )))) (\i4@v17 -> 
                  (pure1@v11 ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add 4) i1@v13)) i2@v14)) i3@v15)) five@v16)) i4@v17))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerReaderT02.program1 (Step 1)
  (\dictMonadReader@v0 -> 
    let ask1@v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        ((
          dictMonadReader@v0
        ).MonadAsk0 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let v2 =
        (
          v1
        ).ask;
      v2;
    {#- Rewrite - Inline -#}
    let local1@v2 =
      (
        dictMonadReader@v0
      ).local;
    (\dictMonadEffect@v3 -> 
      let Monad0@v4 =
        ((
          dictMonadEffect@v3
        ).Monad0 <PrimUndefined>);
      let Bind1@v5 =
        ((
          Monad0@v4
        ).Bind1 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let liftEffect1@v6 =
        (
          dictMonadEffect@v3
        ).liftEffect;
      {#- Rewrite - Inline -#}
      let bind1@v7 =
        (
          Bind1@v5
        ).bind;
      let Apply0@v8 =
        ((
          Bind1@v5
        ).Apply0 <PrimUndefined>);
      let map1@v9 =
        {#- Rewrite - Inline -#}
        let v9 =
          ((
            Apply0@v8
          ).Functor0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v10 =
          (
            v9
          ).map;
        v10;
      {#- Rewrite - Inline -#}
      let apply1@v10 =
        (
          Apply0@v8
        ).apply;
      let pure1@v11 =
        {#- Rewrite - Inline -#}
        let v11 =
          ((
            Monad0@v4
          ).Applicative0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v12 =
          (
            v11
          ).pure;
        v12;
      (((
        Bind1@v5
      ).bind (liftEffect1@v6 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v7 (liftEffect1@v6 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v7 ((map1@v9 (\v@v14 -> 
            {#- Rewrite - Inline -#}
            let v15 =
              1;
            (add v@v14 v15)
          )) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((bind1@v7 ((apply1@v10 ((map1@v9 Data.Semiring.intAdd) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
              ((bind1@v7 ask1@v1) (\five@v16 -> 
                ((bind1@v7 ((local1@v2 (\v@v17 -> 
                  {#- Rewrite - Inline -#}
                  let v18 =
                    2;
                  (multiply v@v17 v18)
                )) ((bind1@v7 ask1@v1) (\ten@v17 -> 
                  (liftEffect1@v6 ((Effect.Random.randomInt ten@v17) 20))
                )))) (\i4@v17 -> 
                  (pure1@v11 [[ LetAssoc
                    let v18 =
                      {#- Rewrite - Inline -#}
                      let v18 =
                        4;
                      {#- Rewrite - Inline -#}
                      let v19 =
                        (\v19 -> 
                          (add v18 v19)
                        );
                      (v19 i1@v13);
                    let v18 =
                      {#- Rewrite - Inline -#}
                      let v19 =
                        (\v19 -> 
                          (add v18 v19)
                        );
                      (v19 i2@v14);
                    let v18 =
                      {#- Rewrite - Inline -#}
                      let v19 =
                        (\v19 -> 
                          (add v18 v19)
                        );
                      (v19 i3@v15);
                    let v18 =
                      {#- Rewrite - Inline -#}
                      let v19 =
                        (\v19 -> 
                          (add v18 v19)
                        );
                      (v19 five@v16);
                    {#- Rewrite - Inline -#}
                    let v19 =
                      (\v19 -> 
                        (add v18 v19)
                      );
                    (v19 i4@v17)
                  ]])
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerReaderT02.program1 (Step 2)
  (\dictMonadReader@v0 -> 
    let ask1@v1 =
      (
        ((
          dictMonadReader@v0
        ).MonadAsk0 <PrimUndefined>)
      ).ask;
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      let Apply0@v5 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map1@v6 =
        (
          ((
            Apply0@v5
          ).Functor0 <PrimUndefined>)
        ).map;
      let pure1@v7 =
        (
          ((
            Monad0@v3
          ).Applicative0 <PrimUndefined>)
        ).pure;
      (((
        Bind1@v4
      ).bind ((
        dictMonadEffect@v2
      ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v8 -> 
        (((
          Bind1@v4
        ).bind ((
          dictMonadEffect@v2
        ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v9 -> 
          (((
            Bind1@v4
          ).bind ((map1@v6 (\v@v10 -> 
            (add v@v10 1)
          )) ((
            dictMonadEffect@v2
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
            (((
              Bind1@v4
            ).bind (((
              Apply0@v5
            ).apply ((map1@v6 Data.Semiring.intAdd) ((
              dictMonadEffect@v2
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
              dictMonadEffect@v2
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
              (((
                Bind1@v4
              ).bind ask1@v1) (\five@v12 -> 
                (((
                  Bind1@v4
                ).bind (((
                  dictMonadReader@v0
                ).local (\v@v13 -> 
                  (multiply v@v13 2)
                )) (((
                  Bind1@v4
                ).bind ask1@v1) (\ten@v13 -> 
                  ((
                    dictMonadEffect@v2
                  ).liftEffect ((Effect.Random.randomInt ten@v13) 20))
                )))) (\i4@v13 -> 
                  (pure1@v7 {#- Rewrite - Inline -#}
                  let v14 =
                    (add 4 i1@v9);
                  {#- Rewrite - Inline -#}
                  let v15 =
                    (add v14 i2@v10);
                  {#- Rewrite - Inline -#}
                  let v16 =
                    (add v15 i3@v11);
                  {#- Rewrite - Inline -#}
                  let v17 =
                    (add v16 five@v12);
                  (add v17 i4@v13))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerReaderT02.program1 (Step 3; Final)
  (\dictMonadReader@v0 -> 
    let ask1@v1 =
      (
        ((
          dictMonadReader@v0
        ).MonadAsk0 <PrimUndefined>)
      ).ask;
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      let Apply0@v5 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map1@v6 =
        (
          ((
            Apply0@v5
          ).Functor0 <PrimUndefined>)
        ).map;
      let pure1@v7 =
        (
          ((
            Monad0@v3
          ).Applicative0 <PrimUndefined>)
        ).pure;
      (((
        Bind1@v4
      ).bind ((
        dictMonadEffect@v2
      ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v8 -> 
        (((
          Bind1@v4
        ).bind ((
          dictMonadEffect@v2
        ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v9 -> 
          (((
            Bind1@v4
          ).bind ((map1@v6 (\v@v10 -> 
            (add v@v10 1)
          )) ((
            dictMonadEffect@v2
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
            (((
              Bind1@v4
            ).bind (((
              Apply0@v5
            ).apply ((map1@v6 Data.Semiring.intAdd) ((
              dictMonadEffect@v2
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
              dictMonadEffect@v2
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
              (((
                Bind1@v4
              ).bind ask1@v1) (\five@v12 -> 
                (((
                  Bind1@v4
                ).bind (((
                  dictMonadReader@v0
                ).local (\v@v13 -> 
                  (multiply v@v13 2)
                )) (((
                  Bind1@v4
                ).bind ask1@v1) (\ten@v13 -> 
                  ((
                    dictMonadEffect@v2
                  ).liftEffect ((Effect.Random.randomInt ten@v13) 20))
                )))) (\i4@v13 -> 
                  (pure1@v7 (add (add (add (add (add 4 i1@v9) i2@v10) i3@v11) five@v12) i4@v13))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
===============
Snapshot.TransformerReaderT02.program2 (Step 0; Original)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (Effect.Class.liftEffect (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0));
    let bind1@v5 =
      (Control.Bind.bind bindReaderT1@v3);
    let Apply0@v6 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let map1@v7 =
      (Data.Functor.map (Control.Monad.Reader.Trans.functorReaderT ((
        Apply0@v6
      ).Functor0 <PrimUndefined>)));
    let apply1@v8 =
      (Control.Apply.apply (Control.Monad.Reader.Trans.applyReaderT Apply0@v6));
    let ask1@v9 =
      (Control.Monad.Reader.Class.ask (Control.Monad.Reader.Trans.monadAskReaderT Monad0@v1));
    let local1@v10 =
      (Control.Monad.Reader.Class.local (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1));
    let pure1@v11 =
      (Control.Applicative.pure (Control.Monad.Reader.Trans.applicativeReaderT ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)));
    (Control.Monad.Reader.Trans.runReaderT (((Snapshot.TransformerReaderT02.discard bindReaderT1@v3) (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
      ((bind1@v5 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
        ((bind1@v5 ((map1@v7 (\v@v14 -> 
          ((Snapshot.TransformerReaderT02.add v@v14) 1)
        )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
          ((bind1@v5 ((apply1@v8 ((map1@v7 Snapshot.TransformerReaderT02.add) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
            ((bind1@v5 ask1@v9) (\five@v16 -> 
              ((bind1@v5 ((local1@v10 (\v@v17 -> 
                ((Snapshot.TransformerReaderT02.mul v@v17) 2)
              )) ((bind1@v5 ask1@v9) (\ten@v17 -> 
                (liftEffect1@v4 ((Effect.Random.randomInt ten@v17) 20))
              )))) (\i4@v17 -> 
                (pure1@v11 ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add 4) i1@v13)) i2@v14)) i3@v15)) five@v16)) i4@v17))
              ))
            ))
          ))
        ))
      ))
    )))
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 1)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      {#- Rewrite - Inline -#}
      let v4 =
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0);
      {#- Rewrite - Inline -#}
      let v5 =
        (
          v4
        ).liftEffect;
      v5;
    {#- Rewrite - Inline -#}
    let bind1@v5 =
      (
        bindReaderT1@v3
      ).bind;
    let Apply0@v6 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    [[ LetAssoc
      let v7 =
        ((
          Apply0@v6
        ).Functor0 <PrimUndefined>);
      let v7 =
        {#- Rewrite - Inline -#}
        let v8 =
          { map =
              (\x@v8 -> 
                let v9 =
                  ((
                    v7
                  ).map x@v8);
                (\v@v10 -> \x@v11 -> 
                  (v9 (v@v10 x@v11))
                )
              )
          };
        v8;
      let map1@v7 =
        {#- Rewrite - Inline -#}
        let v8 =
          (
            v7
          ).map;
        v8;
      [[ LetAssoc
        let v8 =
          ((
            Apply0@v6
          ).Functor0 <PrimUndefined>);
        let v8 =
          [[ LetAssoc
            let functorReaderT1@v9 =
              { map =
                  (\x@v9 -> 
                    let v10 =
                      ((
                        v8
                      ).map x@v9);
                    (\v@v11 -> \x@v12 -> 
                      (v10 (v@v11 x@v12))
                    )
                  )
              };
            let v9 =
              { apply =
                  (\v@v10 -> \v1@v11 -> \r@v12 -> 
                    (((
                      Apply0@v6
                    ).apply (v@v10 r@v12)) (v1@v11 r@v12))
                  )
              , Functor0 =
                  (\$__unused@v10 -> 
                    functorReaderT1@v9
                  )
              };
            let v9 =
              v9;
            v9
          ]];
        let apply1@v8 =
          {#- Rewrite - Inline -#}
          let v9 =
            (
              v8
            ).apply;
          v9;
        [[ LetAssoc
          let monadReaderT1@v9 =
            (Control.Monad.Reader.Trans.monadReaderT Monad0@v1);
          let v9 =
            {#- Rewrite - Inline -#}
            let v10 =
              {#- Rewrite - Inline -#}
              let v10 =
                { ask =
                    (
                      ((
                        Monad0@v1
                      ).Applicative0 <PrimUndefined>)
                    ).pure
                , Monad0 =
                    (\$__unused@v10 -> 
                      monadReaderT1@v9
                    )
                };
              v10;
            v10;
          let ask1@v9 =
            {#- Rewrite - Inline -#}
            let v10 =
              (
                v9
              ).ask;
            v10;
          let local1@v10 =
            {#- Rewrite - Inline -#}
            let v10 =
              (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1);
            {#- Rewrite - Inline -#}
            let v11 =
              (
                v10
              ).local;
            v11;
          [[ LetAssoc
            let v11 =
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>);
            let v11 =
              [[ LetAssoc
                let v12 =
                  ((
                    v11
                  ).Apply0 <PrimUndefined>);
                let v12 =
                  [[ LetAssoc
                    let v13 =
                      ((
                        v12
                      ).Functor0 <PrimUndefined>);
                    let v13 =
                      let functorReaderT1@v14 =
                        { map =
                            (\x@v14 -> 
                              let v15 =
                                ((
                                  v13
                                ).map x@v14);
                              (\v@v16 -> \x@v17 -> 
                                (v15 (v@v16 x@v17))
                              )
                            )
                        };
                      let applyReaderT1@v15 =
                        { apply =
                            (\v@v15 -> \v1@v16 -> \r@v17 -> 
                              (((
                                v12
                              ).apply (v@v15 r@v17)) (v1@v16 r@v17))
                            )
                        , Functor0 =
                            (\$__unused@v15 -> 
                              functorReaderT1@v14
                            )
                        };
                      { pure =
                          (\x@v16 -> 
                            let v17 =
                              ((
                                v11
                              ).pure x@v16);
                            (\v@v18 -> 
                              v17
                            )
                          )
                      , Apply0 =
                          (\$__unused@v16 -> 
                            applyReaderT1@v15
                          )
                      };
                    v13
                  ]];
                v12
              ]];
            let pure1@v11 =
              {#- Rewrite - Inline -#}
              let v12 =
                (
                  v11
                ).pure;
              v12;
            {#- Rewrite - Inline -#}
            let v12 =
              (((
                bindReaderT1@v3
              ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
                ((bind1@v5 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
                  ((bind1@v5 ((map1@v7 (\v@v14 -> 
                    {#- Rewrite - Inline -#}
                    let v15 =
                      1;
                    (add v@v14 v15)
                  )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
                    ((bind1@v5 ((apply1@v8 ((map1@v7 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
                      ((bind1@v5 ask1@v9) (\five@v16 -> 
                        ((bind1@v5 ((local1@v10 (\v@v17 -> 
                          {#- Rewrite - Inline -#}
                          let v18 =
                            2;
                          (multiply v@v17 v18)
                        )) ((bind1@v5 ask1@v9) (\ten@v17 -> 
                          (liftEffect1@v4 ((Effect.Random.randomInt ten@v17) 20))
                        )))) (\i4@v17 -> 
                          (pure1@v11 [[ LetAssoc
                            let v18 =
                              {#- Rewrite - Inline -#}
                              let v18 =
                                4;
                              {#- Rewrite - Inline -#}
                              let v19 =
                                (\v19 -> 
                                  (add v18 v19)
                                );
                              (v19 i1@v13);
                            let v18 =
                              {#- Rewrite - Inline -#}
                              let v19 =
                                (\v19 -> 
                                  (add v18 v19)
                                );
                              (v19 i2@v14);
                            let v18 =
                              {#- Rewrite - Inline -#}
                              let v19 =
                                (\v19 -> 
                                  (add v18 v19)
                                );
                              (v19 i3@v15);
                            let v18 =
                              {#- Rewrite - Inline -#}
                              let v19 =
                                (\v19 -> 
                                  (add v18 v19)
                                );
                              (v19 five@v16);
                            {#- Rewrite - Inline -#}
                            let v19 =
                              (\v19 -> 
                                (add v18 v19)
                              );
                            (v19 i4@v17)
                          ]])
                        ))
                      ))
                    ))
                  ))
                ))
              ));
            v12
          ]]
        ]]
      ]]
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 2)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    [[ UnpackOp
      For identifier v7
        Unpack record
        labels = ["map"]
      inside
        {#- Rewrite - Inline -#}
        let map1@v8 =
          (
            v7
          ).map;
        let v9 =
          ((
            Apply0@v5
          ).Functor0 <PrimUndefined>);
        [[ LetAssoc
          let functorReaderT1@v10 =
            { map =
                (\x@v10 -> 
                  let v11 =
                    ((
                      v9
                    ).map x@v10);
                  (\v@v12 -> \x@v13 -> 
                    (v11 (v@v12 x@v13))
                  )
                )
            };
          let v10 =
            {#- Rewrite - Inline -#}
            let v11 =
              { apply =
                  (\v@v11 -> \v1@v12 -> \r@v13 -> 
                    (((
                      Apply0@v5
                    ).apply (v@v11 r@v13)) (v1@v12 r@v13))
                  )
              , Functor0 =
                  (\$__unused@v11 -> 
                    functorReaderT1@v10
                  )
              };
            v11;
          {#- Rewrite - Inline -#}
          let apply1@v11 =
            (
              v10
            ).apply;
          let monadReaderT1@v12 =
            (Control.Monad.Reader.Trans.monadReaderT Monad0@v1);
          {#- Rewrite - Inline -#}
          let v13 =
            { ask =
                (
                  ((
                    Monad0@v1
                  ).Applicative0 <PrimUndefined>)
                ).pure
            , Monad0 =
                (\$__unused@v13 -> 
                  monadReaderT1@v12
                )
            };
          let ask1@v14 =
            (
              v13
            ).ask;
          let local1@v15 =
            (
              (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
            ).local;
          let v16 =
            ((
              Monad0@v1
            ).Applicative0 <PrimUndefined>);
          [[ LetAssoc
            let v17 =
              ((
                v16
              ).Apply0 <PrimUndefined>);
            let v17 =
              [[ LetAssoc
                let v18 =
                  ((
                    v17
                  ).Functor0 <PrimUndefined>);
                let v18 =
                  [[ LetAssoc
                    let functorReaderT1@v19 =
                      { map =
                          (\x@v19 -> 
                            let v20 =
                              ((
                                v18
                              ).map x@v19);
                            (\v@v21 -> \x@v22 -> 
                              (v20 (v@v21 x@v22))
                            )
                          )
                      };
                    let v19 =
                      let applyReaderT1@v20 =
                        { apply =
                            (\v@v20 -> \v1@v21 -> \r@v22 -> 
                              (((
                                v17
                              ).apply (v@v20 r@v22)) (v1@v21 r@v22))
                            )
                        , Functor0 =
                            (\$__unused@v20 -> 
                              functorReaderT1@v19
                            )
                        };
                      { pure =
                          (\x@v21 -> 
                            let v22 =
                              ((
                                v16
                              ).pure x@v21);
                            (\v@v23 -> 
                              v22
                            )
                          )
                      , Apply0 =
                          (\$__unused@v21 -> 
                            applyReaderT1@v20
                          )
                      };
                    v19
                  ]];
                v18
              ]];
            {#- Rewrite - Inline -#}
            let pure1@v18 =
              (
                v17
              ).pure;
            (((
              bindReaderT1@v3
            ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v19 -> 
              (((
                bindReaderT1@v3
              ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v20 -> 
                (((
                  bindReaderT1@v3
                ).bind ((map1@v8 (\v@v21 -> 
                  (add v@v21 1)
                )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v21 -> 
                  (((
                    bindReaderT1@v3
                  ).bind ((apply1@v11 ((map1@v8 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v22 -> 
                    (((
                      bindReaderT1@v3
                    ).bind ask1@v14) (\five@v23 -> 
                      (((
                        bindReaderT1@v3
                      ).bind ((local1@v15 (\v@v24 -> 
                        (multiply v@v24 2)
                      )) (((
                        bindReaderT1@v3
                      ).bind ask1@v14) (\ten@v24 -> 
                        (liftEffect1@v4 ((Effect.Random.randomInt ten@v24) 20))
                      )))) (\i4@v24 -> 
                        (pure1@v18 {#- Rewrite - Inline -#}
                        let v25 =
                          (add 4 i1@v20);
                        {#- Rewrite - Inline -#}
                        let v26 =
                          (add v25 i2@v21);
                        {#- Rewrite - Inline -#}
                        let v27 =
                          (add v26 i3@v22);
                        {#- Rewrite - Inline -#}
                        let v28 =
                          (add v27 five@v23);
                        (add v28 i4@v24))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ]]
        ]]
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 3)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let v7 =
      (\x@v7 -> 
        let v8 =
          ((
            v6
          ).map x@v7);
        (\v@v9 -> \x@v10 -> 
          (v8 (v@v9 x@v10))
        )
      );
    let v8 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let functorReaderT1@v9 =
      { map =
          (\x@v9 -> 
            let v10 =
              ((
                v8
              ).map x@v9);
            (\v@v11 -> \x@v12 -> 
              (v10 (v@v11 x@v12))
            )
          )
      };
    [[ UnpackOp
      For identifier v10
        Unpack record
        labels = ["apply","Functor0"]
      inside
        {#- Rewrite - Inline -#}
        let monadReaderT1@v11 =
          (Control.Monad.Reader.Trans.monadReaderT Monad0@v1);
        let ask1@v12 =
          (
            ((
              Monad0@v1
            ).Applicative0 <PrimUndefined>)
          ).pure;
        let local1@v13 =
          (
            (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
          ).local;
        let v14 =
          ((
            Monad0@v1
          ).Applicative0 <PrimUndefined>);
        let v15 =
          ((
            v14
          ).Apply0 <PrimUndefined>);
        [[ LetAssoc
          let v16 =
            ((
              v15
            ).Functor0 <PrimUndefined>);
          let v16 =
            [[ LetAssoc
              let functorReaderT1@v17 =
                { map =
                    (\x@v17 -> 
                      let v18 =
                        ((
                          v16
                        ).map x@v17);
                      (\v@v19 -> \x@v20 -> 
                        (v18 (v@v19 x@v20))
                      )
                    )
                };
              let v17 =
                [[ LetAssoc
                  let applyReaderT1@v18 =
                    { apply =
                        (\v@v18 -> \v1@v19 -> \r@v20 -> 
                          (((
                            v15
                          ).apply (v@v18 r@v20)) (v1@v19 r@v20))
                        )
                    , Functor0 =
                        (\$__unused@v18 -> 
                          functorReaderT1@v17
                        )
                    };
                  let v18 =
                    { pure =
                        (\x@v19 -> 
                          let v20 =
                            ((
                              v14
                            ).pure x@v19);
                          (\v@v21 -> 
                            v20
                          )
                        )
                    , Apply0 =
                        (\$__unused@v19 -> 
                          applyReaderT1@v18
                        )
                    };
                  v18
                ]];
              v17
            ]];
          (((
            bindReaderT1@v3
          ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v17 -> 
            (((
              bindReaderT1@v3
            ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v18 -> 
              (((
                bindReaderT1@v3
              ).bind ((v7 (\v@v19 -> 
                (add v@v19 1)
              )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v19 -> 
                (((
                  bindReaderT1@v3
                ).bind (((
                  v10
                ).apply ((v7 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v20 -> 
                  (((
                    bindReaderT1@v3
                  ).bind ask1@v12) (\five@v21 -> 
                    (((
                      bindReaderT1@v3
                    ).bind ((local1@v13 (\v@v22 -> 
                      (multiply v@v22 2)
                    )) (((
                      bindReaderT1@v3
                    ).bind ask1@v12) (\ten@v22 -> 
                      (liftEffect1@v4 ((Effect.Random.randomInt ten@v22) 20))
                    )))) (\i4@v22 -> 
                      ((
                        v16
                      ).pure (add (add (add (add (add 4 i1@v18) i2@v19) i3@v20) five@v21) i4@v22))
                    ))
                  ))
                ))
              ))
            ))
          ))
        ]]
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 4)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let v7 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let functorReaderT1@v8 =
      { map =
          (\x@v8 -> 
            let v9 =
              ((
                v7
              ).map x@v8);
            (\v@v10 -> \x@v11 -> 
              (v9 (v@v10 x@v11))
            )
          )
      };
    {#- Rewrite - Inline -#}
    let v9 =
      (\v@v9 -> \v1@v10 -> \r@v11 -> 
        (((
          Apply0@v5
        ).apply (v@v9 r@v11)) (v1@v10 r@v11))
      );
    {#- Rewrite - Inline -#}
    let v10 =
      (\$__unused@v10 -> 
        functorReaderT1@v8
      );
    let ask1@v11 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v12 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v13 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    let v14 =
      ((
        v13
      ).Apply0 <PrimUndefined>);
    let v15 =
      ((
        v14
      ).Functor0 <PrimUndefined>);
    [[ LetAssoc
      let functorReaderT1@v16 =
        { map =
            (\x@v16 -> 
              let v17 =
                ((
                  v15
                ).map x@v16);
              (\v@v18 -> \x@v19 -> 
                (v17 (v@v18 x@v19))
              )
            )
        };
      let v16 =
        [[ LetAssoc
          let applyReaderT1@v17 =
            { apply =
                (\v@v17 -> \v1@v18 -> \r@v19 -> 
                  (((
                    v14
                  ).apply (v@v17 r@v19)) (v1@v18 r@v19))
                )
            , Functor0 =
                (\$__unused@v17 -> 
                  functorReaderT1@v16
                )
            };
          let v17 =
            {#- Rewrite - Inline -#}
            let v18 =
              { pure =
                  (\x@v18 -> 
                    let v19 =
                      ((
                        v13
                      ).pure x@v18);
                    (\v@v20 -> 
                      v19
                    )
                  )
              , Apply0 =
                  (\$__unused@v18 -> 
                    applyReaderT1@v17
                  )
              };
            v18;
          v17
        ]];
      (((
        bindReaderT1@v3
      ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v17 -> 
        (((
          bindReaderT1@v3
        ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v18 -> 
          (((
            bindReaderT1@v3
          ).bind {#- Rewrite - Inline -#}
          let v19 =
            (\v@v19 -> 
              (add v@v19 1)
            );
          let v20 =
            ((
              v6
            ).map v19);
          {#- Rewrite - Inline -#}
          let v21 =
            (\v@v21 -> \x@v22 -> 
              (v20 (v@v21 x@v22))
            );
          (v21 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v19 -> 
            (((
              bindReaderT1@v3
            ).bind ((v9 let v20 =
              ((
                v6
              ).map Data.Semiring.intAdd);
            {#- Rewrite - Inline -#}
            let v21 =
              (\v@v21 -> \x@v22 -> 
                (v20 (v@v21 x@v22))
              );
            (v21 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v20 -> 
              (((
                bindReaderT1@v3
              ).bind ask1@v11) (\five@v21 -> 
                (((
                  bindReaderT1@v3
                ).bind ((local1@v12 (\v@v22 -> 
                  (multiply v@v22 2)
                )) (((
                  bindReaderT1@v3
                ).bind ask1@v11) (\ten@v22 -> 
                  (liftEffect1@v4 ((Effect.Random.randomInt ten@v22) 20))
                )))) (\i4@v22 -> 
                  ((
                    v16
                  ).pure (add (add (add (add (add 4 i1@v18) i2@v19) i3@v20) five@v21) i4@v22))
                ))
              ))
            ))
          ))
        ))
      ))
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 5)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let ask1@v7 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v8 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v9 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    let v10 =
      ((
        v9
      ).Apply0 <PrimUndefined>);
    let v11 =
      ((
        v10
      ).Functor0 <PrimUndefined>);
    let functorReaderT1@v12 =
      { map =
          (\x@v12 -> 
            let v13 =
              ((
                v11
              ).map x@v12);
            (\v@v14 -> \x@v15 -> 
              (v13 (v@v14 x@v15))
            )
          )
      };
    [[ LetAssoc
      let applyReaderT1@v13 =
        { apply =
            (\v@v13 -> \v1@v14 -> \r@v15 -> 
              (((
                v10
              ).apply (v@v13 r@v15)) (v1@v14 r@v15))
            )
        , Functor0 =
            (\$__unused@v13 -> 
              functorReaderT1@v12
            )
        };
      let v13 =
        {#- Rewrite - Inline -#}
        let v14 =
          { pure =
              (\x@v14 -> 
                let v15 =
                  ((
                    v9
                  ).pure x@v14);
                (\v@v16 -> 
                  v15
                )
              )
          , Apply0 =
              (\$__unused@v14 -> 
                applyReaderT1@v13
              )
          };
        v14;
      (((
        bindReaderT1@v3
      ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v14 -> 
        (((
          bindReaderT1@v3
        ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v15 -> 
          (((
            bindReaderT1@v3
          ).bind let v16 =
            ((
              v6
            ).map (\v@v16 -> 
              (add v@v16 1)
            ));
          let v17 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          (\x@v18 -> 
            (v16 (v17 x@v18))
          )) (\i2@v16 -> 
            (((
              bindReaderT1@v3
            ).bind [[ LetAssoc
              let v17 =
                ((
                  v6
                ).map Data.Semiring.intAdd);
              let v17 =
                let v18 =
                  (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
                (\x@v19 -> 
                  (v17 (v18 x@v19))
                );
              let v18 =
                (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
              (\r@v19 -> 
                (((
                  Apply0@v5
                ).apply (v17 r@v19)) (v18 r@v19))
              )
            ]]) (\i3@v17 -> 
              (((
                bindReaderT1@v3
              ).bind ask1@v7) (\five@v18 -> 
                (((
                  bindReaderT1@v3
                ).bind ((local1@v8 (\v@v19 -> 
                  (multiply v@v19 2)
                )) (((
                  bindReaderT1@v3
                ).bind ask1@v7) (\ten@v19 -> 
                  (liftEffect1@v4 ((Effect.Random.randomInt ten@v19) 20))
                )))) (\i4@v19 -> 
                  ((
                    v13
                  ).pure (add (add (add (add (add 4 i1@v15) i2@v16) i3@v17) five@v18) i4@v19))
                ))
              ))
            ))
          ))
        ))
      ))
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 6)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let ask1@v7 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v8 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v9 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    let v10 =
      ((
        v9
      ).Apply0 <PrimUndefined>);
    let v11 =
      ((
        v10
      ).Functor0 <PrimUndefined>);
    let functorReaderT1@v12 =
      { map =
          (\x@v12 -> 
            let v13 =
              ((
                v11
              ).map x@v12);
            (\v@v14 -> \x@v15 -> 
              (v13 (v@v14 x@v15))
            )
          )
      };
    let applyReaderT1@v13 =
      { apply =
          (\v@v13 -> \v1@v14 -> \r@v15 -> 
            (((
              v10
            ).apply (v@v13 r@v15)) (v1@v14 r@v15))
          )
      , Functor0 =
          (\$__unused@v13 -> 
            functorReaderT1@v12
          )
      };
    [[ UnpackOp
      For identifier v14
        Unpack record
        labels = ["pure","Apply0"]
      inside
        (((
          bindReaderT1@v3
        ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v15 -> 
          (((
            bindReaderT1@v3
          ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v16 -> 
            (((
              bindReaderT1@v3
            ).bind let v17 =
              ((
                v6
              ).map (\v@v17 -> 
                (add v@v17 1)
              ));
            let v18 =
              (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
            (\x@v19 -> 
              (v17 (v18 x@v19))
            )) (\i2@v17 -> 
              (((
                bindReaderT1@v3
              ).bind let v18 =
                ((
                  v6
                ).map Data.Semiring.intAdd);
              [[ LetAssoc
                let v19 =
                  (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
                let v19 =
                  (\x@v20 -> 
                    (v18 (v19 x@v20))
                  );
                let v20 =
                  (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
                (\r@v21 -> 
                  (((
                    Apply0@v5
                  ).apply (v19 r@v21)) (v20 r@v21))
                )
              ]]) (\i3@v18 -> 
                (((
                  bindReaderT1@v3
                ).bind ask1@v7) (\five@v19 -> 
                  (((
                    bindReaderT1@v3
                  ).bind ((local1@v8 (\v@v20 -> 
                    (multiply v@v20 2)
                  )) (((
                    bindReaderT1@v3
                  ).bind ask1@v7) (\ten@v20 -> 
                    (liftEffect1@v4 ((Effect.Random.randomInt ten@v20) 20))
                  )))) (\i4@v20 -> 
                    ((
                      v14
                    ).pure (add (add (add (add (add 4 i1@v16) i2@v17) i3@v18) five@v19) i4@v20))
                  ))
                ))
              ))
            ))
          ))
        ))
    ]]
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 7)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let ask1@v7 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v8 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v9 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let v10 =
      ((
        v9
      ).Apply0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let v11 =
      ((
        v10
      ).Functor0 <PrimUndefined>);
    {#- Rewrite - Inline -#}
    let functorReaderT1@v12 =
      { map =
          (\x@v12 -> 
            let v13 =
              ((
                v11
              ).map x@v12);
            (\v@v14 -> \x@v15 -> 
              (v13 (v@v14 x@v15))
            )
          )
      };
    {#- Rewrite - Inline -#}
    let applyReaderT1@v13 =
      { apply =
          (\v@v13 -> \v1@v14 -> \r@v15 -> 
            (((
              v10
            ).apply (v@v13 r@v15)) (v1@v14 r@v15))
          )
      , Functor0 =
          (\$__unused@v13 -> 
            functorReaderT1@v12
          )
      };
    {#- Rewrite - Inline -#}
    let v14 =
      (\x@v14 -> 
        let v15 =
          ((
            v9
          ).pure x@v14);
        (\v@v16 -> 
          v15
        )
      );
    {#- Rewrite - Inline -#}
    let v15 =
      (\$__unused@v15 -> 
        applyReaderT1@v13
      );
    (((
      bindReaderT1@v3
    ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v16 -> 
      (((
        bindReaderT1@v3
      ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v17 -> 
        (((
          bindReaderT1@v3
        ).bind let v18 =
          ((
            v6
          ).map (\v@v18 -> 
            (add v@v18 1)
          ));
        let v19 =
          (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
        (\x@v20 -> 
          (v18 (v19 x@v20))
        )) (\i2@v18 -> 
          (((
            bindReaderT1@v3
          ).bind let v19 =
            ((
              v6
            ).map Data.Semiring.intAdd);
          let v20 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          {#- Rewrite - Inline -#}
          let v21 =
            (\x@v21 -> 
              (v19 (v20 x@v21))
            );
          let v22 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          (\r@v23 -> 
            (((
              Apply0@v5
            ).apply (v21 r@v23)) (v22 r@v23))
          )) (\i3@v19 -> 
            (((
              bindReaderT1@v3
            ).bind ask1@v7) (\five@v20 -> 
              (((
                bindReaderT1@v3
              ).bind ((local1@v8 (\v@v21 -> 
                (multiply v@v21 2)
              )) (((
                bindReaderT1@v3
              ).bind ask1@v7) (\ten@v21 -> 
                (liftEffect1@v4 ((Effect.Random.randomInt ten@v21) 20))
              )))) (\i4@v21 -> 
                (v14 (add (add (add (add (add 4 i1@v17) i2@v18) i3@v19) five@v20) i4@v21))
              ))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 8)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let ask1@v7 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v8 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v9 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    (((
      bindReaderT1@v3
    ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v10 -> 
      (((
        bindReaderT1@v3
      ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v11 -> 
        (((
          bindReaderT1@v3
        ).bind let v12 =
          ((
            v6
          ).map (\v@v12 -> 
            (add v@v12 1)
          ));
        let v13 =
          (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
        (\x@v14 -> 
          (v12 (v13 x@v14))
        )) (\i2@v12 -> 
          (((
            bindReaderT1@v3
          ).bind let v13 =
            ((
              v6
            ).map Data.Semiring.intAdd);
          let v14 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          let v15 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          (\r@v16 -> 
            (((
              Apply0@v5
            ).apply (v13 (v14 r@v16))) (v15 r@v16))
          )) (\i3@v13 -> 
            (((
              bindReaderT1@v3
            ).bind ask1@v7) (\five@v14 -> 
              (((
                bindReaderT1@v3
              ).bind ((local1@v8 (\v@v15 -> 
                (multiply v@v15 2)
              )) (((
                bindReaderT1@v3
              ).bind ask1@v7) (\ten@v15 -> 
                (liftEffect1@v4 ((Effect.Random.randomInt ten@v15) 20))
              )))) (\i4@v15 -> 
                {#- Rewrite - Inline -#}
                let v16 =
                  (add (add (add (add (add 4 i1@v11) i2@v12) i3@v13) five@v14) i4@v15);
                let v17 =
                  ((
                    v9
                  ).pure v16);
                {#- Rewrite - Inline -#}
                let v18 =
                  (\v@v18 -> 
                    v17
                  );
                v18
              ))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerReaderT02.program2 (Step 9; Final)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindReaderT1@v3 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v2);
    let liftEffect1@v4 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v6 =
      ((
        Apply0@v5
      ).Functor0 <PrimUndefined>);
    let ask1@v7 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let local1@v8 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v1)
      ).local;
    let v9 =
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>);
    (((
      bindReaderT1@v3
    ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v10 -> 
      (((
        bindReaderT1@v3
      ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v11 -> 
        (((
          bindReaderT1@v3
        ).bind let v12 =
          ((
            v6
          ).map (\v@v12 -> 
            (add v@v12 1)
          ));
        let v13 =
          (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
        (\x@v14 -> 
          (v12 (v13 x@v14))
        )) (\i2@v12 -> 
          (((
            bindReaderT1@v3
          ).bind let v13 =
            ((
              v6
            ).map Data.Semiring.intAdd);
          let v14 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          let v15 =
            (liftEffect1@v4 ((Effect.Random.randomInt 1) 10));
          (\r@v16 -> 
            (((
              Apply0@v5
            ).apply (v13 (v14 r@v16))) (v15 r@v16))
          )) (\i3@v13 -> 
            (((
              bindReaderT1@v3
            ).bind ask1@v7) (\five@v14 -> 
              (((
                bindReaderT1@v3
              ).bind ((local1@v8 (\v@v15 -> 
                (multiply v@v15 2)
              )) (((
                bindReaderT1@v3
              ).bind ask1@v7) (\ten@v15 -> 
                (liftEffect1@v4 ((Effect.Random.randomInt ten@v15) 20))
              )))) (\i4@v15 -> 
                let v16 =
                  ((
                    v9
                  ).pure (add (add (add (add (add 4 i1@v11) i2@v12) i3@v13) five@v14) i4@v15));
                (\v@v17 -> 
                  v16
                )
              ))
            ))
          ))
        ))
      ))
    ))
  )
===============
Snapshot.TransformerReaderT02.pure (Step 0; Original)
  (Control.Applicative.pure (Control.Monad.Reader.Trans.applicativeReaderT Effect.applicativeEffect))
---------------
Snapshot.TransformerReaderT02.pure (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      Effect.applyEffect;
    [[ LetAssoc
      let v1 =
        ((
          v0
        ).Functor0 <PrimUndefined>);
      let v1 =
        let functorReaderT1@v2 =
          { map =
              (\x@v2 -> 
                let v3 =
                  ((
                    v1
                  ).map x@v2);
                (\v@v4 -> \x@v5 -> 
                  (v3 (v@v4 x@v5))
                )
              )
          };
        let applyReaderT1@v3 =
          { apply =
              (\v@v3 -> \v1@v4 -> \r@v5 -> 
                (((
                  v0
                ).apply (v@v3 r@v5)) (v1@v4 r@v5))
              )
          , Functor0 =
              (\$__unused@v3 -> 
                functorReaderT1@v2
              )
          };
        { pure =
            (\x@v4 -> 
              {#- Rewrite - Inline -#}
              let v5 =
                (effectPure x@v4);
              (\v@v6 -> 
                v5
              )
            )
        , Apply0 =
            (\$__unused@v4 -> 
              applyReaderT1@v3
            )
        };
      let v1 =
        v1;
      v1
    ]];
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).pure;
  v1
---------------
Snapshot.TransformerReaderT02.pure (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    Effect.functorEffect;
  [[ LetAssoc
    let functorReaderT1@v1 =
      { map =
          (\x@v1 -> 
            let v2 =
              ((
                v0
              ).map x@v1);
            (\v@v3 -> \x@v4 -> 
              (v2 (v@v3 x@v4))
            )
          )
      };
    let v1 =
      let applyReaderT1@v2 =
        { apply =
            (\v@v2 -> \v1@v3 -> \r@v4 -> 
              let v5 =
                (v@v2 r@v4);
              [[ LetAssoc
                let v6 =
                  (v1@v3 r@v4);
                let v6 =
                  letEffect f'@v7 =
                    v5;
                  letEffect a'@v8 =
                    v6;
                  let v9 =
                    (f'@v7 a'@v8);
                  {#- Rewrite - Inline -#}
                  let v10 =
                    (effectPure v9);
                  v10;
                v6
              ]]
            )
        , Functor0 =
            (\$__unused@v2 -> 
              functorReaderT1@v1
            )
        };
      { pure =
          (\x@v3 -> \v@v4 -> 
            (effectPure x@v3)
          )
      , Apply0 =
          (\$__unused@v3 -> 
            applyReaderT1@v2
          )
      };
    let v1 =
      v1;
    (
      v1
    ).pure
  ]]
---------------
Snapshot.TransformerReaderT02.pure (Step 3)
  let functorReaderT1@v0 =
    { map =
        (\x@v0 -> 
          {#- Rewrite - Inline -#}
          let v1 =
            (\a@v1 -> 
              (effectDefer letEffect a'@v2 =
                a@v1;
              (effectPure (x@v0 a'@v2)))
            );
          (\v@v2 -> \x@v3 -> 
            (v1 (v@v2 x@v3))
          )
        )
    };
  [[ LetAssoc
    let applyReaderT1@v1 =
      { apply =
          (\v@v1 -> \v1@v2 -> \r@v3 -> 
            let v4 =
              (v@v1 r@v3);
            let v5 =
              (v1@v2 r@v3);
            {#- Rewrite - Inline -#}
            let v6 =
              letEffect f'@v6 =
                v4;
              letEffect a'@v7 =
                v5;
              {#- Rewrite - Inline -#}
              let v8 =
                (f'@v6 a'@v7);
              (effectPure v8);
            v6
          )
      , Functor0 =
          (\$__unused@v1 -> 
            functorReaderT1@v0
          )
      };
    let v1 =
      { pure =
          (\x@v2 -> \v@v3 -> 
            (effectPure x@v2)
          )
      , Apply0 =
          (\$__unused@v2 -> 
            applyReaderT1@v1
          )
      };
    (
      v1
    ).pure
  ]]
---------------
Snapshot.TransformerReaderT02.pure (Step 4)
  let functorReaderT1@v0 =
    { map =
        (\x@v0 -> \v@v1 -> \x@v2 -> 
          let v3 =
            (v@v1 x@v2);
          (effectDefer letEffect a'@v4 =
            v3;
          (effectPure (x@v0 a'@v4)))
        )
    };
  let applyReaderT1@v1 =
    { apply =
        (\v@v1 -> \v1@v2 -> \r@v3 -> 
          let v4 =
            (v@v1 r@v3);
          let v5 =
            (v1@v2 r@v3);
          letEffect f'@v6 =
            v4;
          letEffect a'@v7 =
            v5;
          (effectPure (f'@v6 a'@v7))
        )
    , Functor0 =
        (\$__unused@v1 -> 
          functorReaderT1@v0
        )
    };
  {#- Rewrite - Inline -#}
  let v2 =
    { pure =
        (\x@v2 -> \v@v3 -> 
          (effectPure x@v2)
        )
    , Apply0 =
        (\$__unused@v2 -> 
          applyReaderT1@v1
        )
    };
  (
    v2
  ).pure
---------------
Snapshot.TransformerReaderT02.pure (Step 5)
  {#- Rewrite - Inline -#}
  let functorReaderT1@v0 =
    { map =
        (\x@v0 -> \v@v1 -> \x@v2 -> 
          let v3 =
            (v@v1 x@v2);
          (effectDefer letEffect a'@v4 =
            v3;
          (effectPure (x@v0 a'@v4)))
        )
    };
  {#- Rewrite - Inline -#}
  let applyReaderT1@v1 =
    { apply =
        (\v@v1 -> \v1@v2 -> \r@v3 -> 
          let v4 =
            (v@v1 r@v3);
          let v5 =
            (v1@v2 r@v3);
          letEffect f'@v6 =
            v4;
          letEffect a'@v7 =
            v5;
          (effectPure (f'@v6 a'@v7))
        )
    , Functor0 =
        (\$__unused@v1 -> 
          functorReaderT1@v0
        )
    };
  (\x@v2 -> \v@v3 -> 
    (effectPure x@v2)
  )
---------------
Snapshot.TransformerReaderT02.pure (Step 6; Final)
  (\x@v0 -> \v@v1 -> 
    (effectPure x@v0)
  )
===============
Snapshot.TransformerReaderT02.test1 (Step 0; Original)
  ((Control.Monad.Reader.Trans.runReaderT (((Snapshot.TransformerReaderT02.discard Snapshot.TransformerReaderT02.bindReaderT) (Snapshot.TransformerReaderT02.liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    ((Snapshot.TransformerReaderT02.bind (Snapshot.TransformerReaderT02.liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      ((Snapshot.TransformerReaderT02.bind ((Snapshot.TransformerReaderT02.map (\v@v2 -> 
        ((Snapshot.TransformerReaderT02.add v@v2) 1)
      )) (Snapshot.TransformerReaderT02.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
        ((Snapshot.TransformerReaderT02.bind ((Snapshot.TransformerReaderT02.apply ((Snapshot.TransformerReaderT02.map Snapshot.TransformerReaderT02.add) (Snapshot.TransformerReaderT02.liftEffect ((Effect.Random.randomInt 1) 10)))) (Snapshot.TransformerReaderT02.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v3 -> 
          ((Snapshot.TransformerReaderT02.bind Snapshot.TransformerReaderT02.ask) (\five@v4 -> 
            ((Snapshot.TransformerReaderT02.bind ((Snapshot.TransformerReaderT02.local (\v@v5 -> 
              ((Snapshot.TransformerReaderT02.mul v@v5) 2)
            )) ((Snapshot.TransformerReaderT02.bind Snapshot.TransformerReaderT02.ask) (\ten@v5 -> 
              (Snapshot.TransformerReaderT02.liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              (Snapshot.TransformerReaderT02.pure ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add ((Snapshot.TransformerReaderT02.add 4) i1@v1)) i2@v2)) i3@v3)) five@v4)) i4@v5))
            ))
          ))
        ))
      ))
    ))
  ))) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind ((
        Snapshot.TransformerReaderT02.monadEffectReader
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind {#- Rewrite - Inline -#}
        let v2 =
          (\v@v2 -> 
            {#- Rewrite - Inline -#}
            let v3 =
              1;
            (add v@v2 v3)
          );
        {#- Rewrite - Inline -#}
        let v3 =
          (\v@v3 -> \x@v4 -> 
            let v5 =
              (v@v3 x@v4);
            (effectDefer letEffect a'@v6 =
              v5;
            (effectPure (v2 a'@v6)))
          );
        (v3 ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind [[ LetAssoc
            let v3 =
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10));
            let v3 =
              (\x@v4 -> 
                let v5 =
                  (v3 x@v4);
                (effectDefer letEffect a'@v6 =
                  v5;
                (effectPure (\v7 -> 
                  (add a'@v6 v7)
                )))
              );
            {#- Rewrite - Inline -#}
            let v4 =
              (\v1@v4 -> \r@v5 -> 
                let v6 =
                  (v3 r@v5);
                let v7 =
                  (v1@v4 r@v5);
                letEffect f'@v8 =
                  v6;
                letEffect a'@v9 =
                  v7;
                (effectPure (f'@v8 a'@v9))
              );
            (v4 ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10)))
          ]]) (\i3@v3 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\five@v4 -> 
              (((
                Snapshot.TransformerReaderT02.bindReaderT
              ).bind (((
                Snapshot.TransformerReaderT02.monadReaderReaderT
              ).local (\v@v5 -> 
                {#- Rewrite - Inline -#}
                let v6 =
                  2;
                (multiply v@v5 v6)
              )) (((
                Snapshot.TransformerReaderT02.bindReaderT
              ).bind Effect.pureE) (\ten@v5 -> 
                ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
              )))) (\i4@v5 -> 
                [[ LetAssoc
                  let v6 =
                    {#- Rewrite - Inline -#}
                    let v6 =
                      4;
                    {#- Rewrite - Inline -#}
                    let v7 =
                      (\v7 -> 
                        (add v6 v7)
                      );
                    (v7 i1@v1);
                  let v6 =
                    {#- Rewrite - Inline -#}
                    let v7 =
                      (\v7 -> 
                        (add v6 v7)
                      );
                    (v7 i2@v2);
                  let v6 =
                    {#- Rewrite - Inline -#}
                    let v7 =
                      (\v7 -> 
                        (add v6 v7)
                      );
                    (v7 i3@v3);
                  let v6 =
                    {#- Rewrite - Inline -#}
                    let v7 =
                      (\v7 -> 
                        (add v6 v7)
                      );
                    (v7 five@v4);
                  let v6 =
                    {#- Rewrite - Inline -#}
                    let v7 =
                      (\v7 -> 
                        (add v6 v7)
                      );
                    (v7 i4@v5);
                  {#- Rewrite - Inline -#}
                  let v7 =
                    (\v@v7 -> 
                      (effectPure v6)
                    );
                  v7
                ]]
              ))
            ))
          ))
        ))
      ))
    ));
  (v0 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 2)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        {#- Rewrite - Inline -#}
        let v4 =
          (\x@v4 -> 
            let v5 =
              (v3 x@v4);
            (effectDefer letEffect a'@v6 =
              v5;
            (effectPure (\v7 -> 
              (add a'@v6 v7)
            )))
          );
        let v5 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v6 -> 
          let v7 =
            (v4 r@v6);
          let v8 =
            (v5 r@v6);
          letEffect f'@v9 =
            v7;
          letEffect a'@v10 =
            v8;
          (effectPure (f'@v9 a'@v10))
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              {#- Rewrite - Inline -#}
              let v6 =
                (add 4 i1@v1);
              {#- Rewrite - Inline -#}
              let v7 =
                (add v6 i2@v2);
              {#- Rewrite - Inline -#}
              let v8 =
                (add v7 i3@v3);
              {#- Rewrite - Inline -#}
              let v9 =
                (add v8 five@v4);
              let v10 =
                (add v9 i4@v5);
              (\v@v11 -> 
                (effectPure v10)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 3)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        let v4 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v5 -> 
          [[ LetAssoc
            let v6 =
              (v3 r@v5);
            let v6 =
              {#- Rewrite - Inline -#}
              let v7 =
                (effectDefer letEffect a'@v7 =
                  v6;
                (effectPure (\v8 -> 
                  (add a'@v7 v8)
                )));
              v7;
            let v7 =
              (v4 r@v5);
            letEffect f'@v8 =
              v6;
            letEffect a'@v9 =
              v7;
            (effectPure (f'@v8 a'@v9))
          ]]
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              let v6 =
                (add (add (add (add (add 4 i1@v1) i2@v2) i3@v3) five@v4) i4@v5);
              (\v@v7 -> 
                (effectPure v6)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 4)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        let v4 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v5 -> 
          let v6 =
            (v3 r@v5);
          {#- Rewrite - Inline -#}
          let v7 =
            (effectDefer letEffect a'@v7 =
              v6;
            (effectPure (\v8 -> 
              (add a'@v7 v8)
            )));
          let v8 =
            (v4 r@v5);
          letEffect f'@v9 =
            v7;
          letEffect a'@v10 =
            v8;
          (effectPure (f'@v9 a'@v10))
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              let v6 =
                (add (add (add (add (add 4 i1@v1) i2@v2) i3@v3) five@v4) i4@v5);
              (\v@v7 -> 
                (effectPure v6)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 5)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        let v4 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v5 -> 
          let v6 =
            (v3 r@v5);
          let v7 =
            (v4 r@v5);
          [[ EffectBindAssoc
            letEffect a'@v8 =
              v6;
            letEffect f'@v8 =
              (effectPure (\v9 -> 
                (add a'@v8 v9)
              ));
            letEffect a'@v9 =
              v7;
            (effectPure (f'@v8 a'@v9))
          ]]
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              let v6 =
                (add (add (add (add (add 4 i1@v1) i2@v2) i3@v3) five@v4) i4@v5);
              (\v@v7 -> 
                (effectPure v6)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 6)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        let v4 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v5 -> 
          let v6 =
            (v3 r@v5);
          let v7 =
            (v4 r@v5);
          letEffect a'@v8 =
            v6;
          {#- Rewrite - Inline -#}
          let f'@v9 =
            (\v9 -> 
              (add a'@v8 v9)
            );
          letEffect a'@v10 =
            v7;
          (effectPure (f'@v9 a'@v10))
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              let v6 =
                (add (add (add (add (add 4 i1@v1) i2@v2) i3@v3) five@v4) i4@v5);
              (\v@v7 -> 
                (effectPure v6)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test1 (Step 7; Final)
  ((((
    Snapshot.TransformerReaderT02.bindReaderT
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerReaderT02.bindReaderT
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerReaderT02.bindReaderT
      ).bind let v2 =
        ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10));
      (\x@v3 -> 
        let v4 =
          (v2 x@v3);
        (effectDefer letEffect a'@v5 =
          v4;
        (effectPure (add a'@v5 1)))
      )) (\i2@v2 -> 
        (((
          Snapshot.TransformerReaderT02.bindReaderT
        ).bind let v3 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        let v4 =
          ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10));
        (\r@v5 -> 
          let v6 =
            (v3 r@v5);
          let v7 =
            (v4 r@v5);
          letEffect a'@v8 =
            v6;
          letEffect a'@v9 =
            v7;
          (effectPure (add a'@v8 a'@v9))
        )) (\i3@v3 -> 
          (((
            Snapshot.TransformerReaderT02.bindReaderT
          ).bind Effect.pureE) (\five@v4 -> 
            (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v5 -> 
              (multiply v@v5 2)
            )) (((
              Snapshot.TransformerReaderT02.bindReaderT
            ).bind Effect.pureE) (\ten@v5 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v5) 20))
            )))) (\i4@v5 -> 
              let v6 =
                (add (add (add (add (add 4 i1@v1) i2@v2) i3@v3) five@v4) i4@v5);
              (\v@v7 -> 
                (effectPure v6)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
===============
Snapshot.TransformerReaderT02.test2 (Step 0; Original)
  ((Control.Monad.Reader.Trans.runReaderT ((Snapshot.TransformerReaderT02.program1 Snapshot.TransformerReaderT02.monadReaderReaderT) Snapshot.TransformerReaderT02.monadEffectReader)) 5)
---------------
Snapshot.TransformerReaderT02.test2 (Step 1)
  [[ LetAssoc
    let ask1@v0 =
      (
        ((
          Snapshot.TransformerReaderT02.monadReaderReaderT
        ).MonadAsk0 <PrimUndefined>)
      ).ask;
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          (\dictMonadEffect@v1 -> 
            let Monad0@v2 =
              ((
                dictMonadEffect@v1
              ).Monad0 <PrimUndefined>);
            let Bind1@v3 =
              ((
                Monad0@v2
              ).Bind1 <PrimUndefined>);
            let Apply0@v4 =
              ((
                Bind1@v3
              ).Apply0 <PrimUndefined>);
            let map1@v5 =
              (
                ((
                  Apply0@v4
                ).Functor0 <PrimUndefined>)
              ).map;
            let pure1@v6 =
              (
                ((
                  Monad0@v2
                ).Applicative0 <PrimUndefined>)
              ).pure;
            (((
              Bind1@v3
            ).bind ((
              dictMonadEffect@v1
            ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v7 -> 
              (((
                Bind1@v3
              ).bind ((
                dictMonadEffect@v1
              ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
                (((
                  Bind1@v3
                ).bind ((map1@v5 (\v@v9 -> 
                  (add v@v9 1)
                )) ((
                  dictMonadEffect@v1
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                  (((
                    Bind1@v3
                  ).bind (((
                    Apply0@v4
                  ).apply ((map1@v5 Data.Semiring.intAdd) ((
                    dictMonadEffect@v1
                  ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                    dictMonadEffect@v1
                  ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v10 -> 
                    (((
                      Bind1@v3
                    ).bind ask1@v0) (\five@v11 -> 
                      (((
                        Bind1@v3
                      ).bind (((
                        Snapshot.TransformerReaderT02.monadReaderReaderT
                      ).local (\v@v12 -> 
                        (multiply v@v12 2)
                      )) (((
                        Bind1@v3
                      ).bind ask1@v0) (\ten@v12 -> 
                        ((
                          dictMonadEffect@v1
                        ).liftEffect ((Effect.Random.randomInt ten@v12) 20))
                      )))) (\i4@v12 -> 
                        (pure1@v6 (add (add (add (add (add 4 i1@v8) i2@v9) i3@v10) five@v11) i4@v12))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          );
        v1;
      (v1 Snapshot.TransformerReaderT02.monadEffectReader);
    (v0 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 2)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  [[ LetAssoc
    let Monad0@v1 =
      ((
        Snapshot.TransformerReaderT02.monadEffectReader
      ).Monad0 <PrimUndefined>);
    let v1 =
      [[ LetAssoc
        let Bind1@v2 =
          ((
            Monad0@v1
          ).Bind1 <PrimUndefined>);
        let v2 =
          let Apply0@v3 =
            ((
              Bind1@v2
            ).Apply0 <PrimUndefined>);
          let map1@v4 =
            (
              ((
                Apply0@v3
              ).Functor0 <PrimUndefined>)
            ).map;
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind ((map1@v4 (\v@v8 -> 
                (add v@v8 1)
              )) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
                (((
                  Bind1@v2
                ).bind (((
                  Apply0@v3
                ).apply ((map1@v4 Data.Semiring.intAdd) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ask1@v0) (\five@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Snapshot.TransformerReaderT02.monadReaderReaderT
                    ).local (\v@v11 -> 
                      (multiply v@v11 2)
                    )) (((
                      Bind1@v2
                    ).bind ask1@v0) (\ten@v11 -> 
                      ((
                        Snapshot.TransformerReaderT02.monadEffectReader
                      ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
                    )))) (\i4@v11 -> 
                      (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v2
      ]];
    (v1 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 3)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  [[ LetAssoc
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let v2 =
      [[ LetAssoc
        let Apply0@v3 =
          ((
            Bind1@v2
          ).Apply0 <PrimUndefined>);
        let v3 =
          let map1@v4 =
            (
              ((
                Apply0@v3
              ).Functor0 <PrimUndefined>)
            ).map;
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind ((map1@v4 (\v@v8 -> 
                (add v@v8 1)
              )) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
                (((
                  Bind1@v2
                ).bind (((
                  Apply0@v3
                ).apply ((map1@v4 Data.Semiring.intAdd) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ask1@v0) (\five@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Snapshot.TransformerReaderT02.monadReaderReaderT
                    ).local (\v@v11 -> 
                      (multiply v@v11 2)
                    )) (((
                      Bind1@v2
                    ).bind ask1@v0) (\ten@v11 -> 
                      ((
                        Snapshot.TransformerReaderT02.monadEffectReader
                      ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
                    )))) (\i4@v11 -> 
                      (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v3
      ]];
    (v2 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 4)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  [[ LetAssoc
    let Apply0@v3 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v3 =
      [[ LetAssoc
        let map1@v4 =
          (
            ((
              Apply0@v3
            ).Functor0 <PrimUndefined>)
          ).map;
        let v4 =
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind ((map1@v4 (\v@v8 -> 
                (add v@v8 1)
              )) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
                (((
                  Bind1@v2
                ).bind (((
                  Apply0@v3
                ).apply ((map1@v4 Data.Semiring.intAdd) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ask1@v0) (\five@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Snapshot.TransformerReaderT02.monadReaderReaderT
                    ).local (\v@v11 -> 
                      (multiply v@v11 2)
                    )) (((
                      Bind1@v2
                    ).bind ask1@v0) (\ten@v11 -> 
                      ((
                        Snapshot.TransformerReaderT02.monadEffectReader
                      ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
                    )))) (\i4@v11 -> 
                      (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v4
      ]];
    (v3 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 5)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  [[ LetAssoc
    let map1@v4 =
      (
        ((
          Apply0@v3
        ).Functor0 <PrimUndefined>)
      ).map;
    let v4 =
      [[ LetAssoc
        let pure1@v5 =
          (
            ((
              Monad0@v1
            ).Applicative0 <PrimUndefined>)
          ).pure;
        let v5 =
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind ((map1@v4 (\v@v8 -> 
                (add v@v8 1)
              )) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
                (((
                  Bind1@v2
                ).bind (((
                  Apply0@v3
                ).apply ((map1@v4 Data.Semiring.intAdd) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ask1@v0) (\five@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Snapshot.TransformerReaderT02.monadReaderReaderT
                    ).local (\v@v11 -> 
                      (multiply v@v11 2)
                    )) (((
                      Bind1@v2
                    ).bind ask1@v0) (\ten@v11 -> 
                      ((
                        Snapshot.TransformerReaderT02.monadEffectReader
                      ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
                    )))) (\i4@v11 -> 
                      (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v5
      ]];
    (v4 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 6)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  [[ LetAssoc
    let pure1@v5 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let v5 =
      {#- Rewrite - Inline -#}
      let v6 =
        (((
          Bind1@v2
        ).bind ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
            (((
              Bind1@v2
            ).bind ((map1@v4 (\v@v8 -> 
              (add v@v8 1)
            )) ((
              Snapshot.TransformerReaderT02.monadEffectReader
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
              (((
                Bind1@v2
              ).bind (((
                Apply0@v3
              ).apply ((map1@v4 Data.Semiring.intAdd) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
                (((
                  Bind1@v2
                ).bind ask1@v0) (\five@v10 -> 
                  (((
                    Bind1@v2
                  ).bind (((
                    Snapshot.TransformerReaderT02.monadReaderReaderT
                  ).local (\v@v11 -> 
                    (multiply v@v11 2)
                  )) (((
                    Bind1@v2
                  ).bind ask1@v0) (\ten@v11 -> 
                    ((
                      Snapshot.TransformerReaderT02.monadEffectReader
                    ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
                  )))) (\i4@v11 -> 
                    (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
                  ))
                ))
              ))
            ))
          ))
        ));
      v6;
    (v5 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test2 (Step 7)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  let pure1@v5 =
    (
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)
    ).pure;
  {#- Rewrite - Inline -#}
  let v6 =
    (((
      Bind1@v2
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
      (((
        Bind1@v2
      ).bind ((
        Snapshot.TransformerReaderT02.monadEffectReader
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
        (((
          Bind1@v2
        ).bind ((map1@v4 (\v@v8 -> 
          (add v@v8 1)
        )) ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
          (((
            Bind1@v2
          ).bind (((
            Apply0@v3
          ).apply ((map1@v4 Data.Semiring.intAdd) ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
            Snapshot.TransformerReaderT02.monadEffectReader
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
            (((
              Bind1@v2
            ).bind ask1@v0) (\five@v10 -> 
              (((
                Bind1@v2
              ).bind (((
                Snapshot.TransformerReaderT02.monadReaderReaderT
              ).local (\v@v11 -> 
                (multiply v@v11 2)
              )) (((
                Bind1@v2
              ).bind ask1@v0) (\ten@v11 -> 
                ((
                  Snapshot.TransformerReaderT02.monadEffectReader
                ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
              )))) (\i4@v11 -> 
                (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
              ))
            ))
          ))
        ))
      ))
    ));
  (v6 5)
---------------
Snapshot.TransformerReaderT02.test2 (Step 8; Final)
  let ask1@v0 =
    (
      ((
        Snapshot.TransformerReaderT02.monadReaderReaderT
      ).MonadAsk0 <PrimUndefined>)
    ).ask;
  let Monad0@v1 =
    ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  let pure1@v5 =
    (
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)
    ).pure;
  ((((
    Bind1@v2
  ).bind ((
    Snapshot.TransformerReaderT02.monadEffectReader
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
    (((
      Bind1@v2
    ).bind ((
      Snapshot.TransformerReaderT02.monadEffectReader
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
      (((
        Bind1@v2
      ).bind ((map1@v4 (\v@v8 -> 
        (add v@v8 1)
      )) ((
        Snapshot.TransformerReaderT02.monadEffectReader
      ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v8 -> 
        (((
          Bind1@v2
        ).bind (((
          Apply0@v3
        ).apply ((map1@v4 Data.Semiring.intAdd) ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
          Snapshot.TransformerReaderT02.monadEffectReader
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v9 -> 
          (((
            Bind1@v2
          ).bind ask1@v0) (\five@v10 -> 
            (((
              Bind1@v2
            ).bind (((
              Snapshot.TransformerReaderT02.monadReaderReaderT
            ).local (\v@v11 -> 
              (multiply v@v11 2)
            )) (((
              Bind1@v2
            ).bind ask1@v0) (\ten@v11 -> 
              ((
                Snapshot.TransformerReaderT02.monadEffectReader
              ).liftEffect ((Effect.Random.randomInt ten@v11) 20))
            )))) (\i4@v11 -> 
              (pure1@v5 (add (add (add (add (add 4 i1@v7) i2@v8) i3@v9) five@v10) i4@v11))
            ))
          ))
        ))
      ))
    ))
  )) 5)
===============
Snapshot.TransformerReaderT02.test3 (Step 0; Original)
  ((Snapshot.TransformerReaderT02.program2 Effect.Class.monadEffectEffect) 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 1)
  {#- Rewrite - Inline -#}
  let Monad0@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    Effect.monadEffect;
  [[ LetAssoc
    let Bind1@v1 =
      ((
        Monad0@v0
      ).Bind1 <PrimUndefined>);
    let v1 =
      let bindReaderT1@v2 =
        (Control.Monad.Reader.Trans.bindReaderT Bind1@v1);
      let liftEffect1@v3 =
        (
          (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
        ).liftEffect;
      let Apply0@v4 =
        ((
          Bind1@v1
        ).Apply0 <PrimUndefined>);
      let v5 =
        ((
          Apply0@v4
        ).Functor0 <PrimUndefined>);
      let ask1@v6 =
        (
          ((
            Monad0@v0
          ).Applicative0 <PrimUndefined>)
        ).pure;
      let local1@v7 =
        (
          (Control.Monad.Reader.Trans.monadReaderReaderT Monad0@v0)
        ).local;
      let v8 =
        ((
          Monad0@v0
        ).Applicative0 <PrimUndefined>);
      (((
        bindReaderT1@v2
      ).bind (liftEffect1@v3 (Effect.Console.log "foo"))) (\$__unused@v9 -> 
        (((
          bindReaderT1@v2
        ).bind (liftEffect1@v3 ((Effect.Random.randomInt 1) 10))) (\i1@v10 -> 
          (((
            bindReaderT1@v2
          ).bind let v11 =
            ((
              v5
            ).map (\v@v11 -> 
              (add v@v11 1)
            ));
          let v12 =
            (liftEffect1@v3 ((Effect.Random.randomInt 1) 10));
          (\x@v13 -> 
            (v11 (v12 x@v13))
          )) (\i2@v11 -> 
            (((
              bindReaderT1@v2
            ).bind let v12 =
              ((
                v5
              ).map Data.Semiring.intAdd);
            let v13 =
              (liftEffect1@v3 ((Effect.Random.randomInt 1) 10));
            let v14 =
              (liftEffect1@v3 ((Effect.Random.randomInt 1) 10));
            (\r@v15 -> 
              (((
                Apply0@v4
              ).apply (v12 (v13 r@v15))) (v14 r@v15))
            )) (\i3@v12 -> 
              (((
                bindReaderT1@v2
              ).bind ask1@v6) (\five@v13 -> 
                (((
                  bindReaderT1@v2
                ).bind ((local1@v7 (\v@v14 -> 
                  (multiply v@v14 2)
                )) (((
                  bindReaderT1@v2
                ).bind ask1@v6) (\ten@v14 -> 
                  (liftEffect1@v3 ((Effect.Random.randomInt ten@v14) 20))
                )))) (\i4@v14 -> 
                  let v15 =
                    ((
                      v8
                    ).pure (add (add (add (add (add 4 i1@v10) i2@v11) i3@v12) five@v13) i4@v14));
                  (\v@v16 -> 
                    v15
                  )
                ))
              ))
            ))
          ))
        ))
      ));
    let v1 =
      v1;
    (v1 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test3 (Step 2)
  {#- Rewrite - Inline -#}
  let Bind1@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    Effect.bindEffect;
  [[ LetAssoc
    let bindReaderT1@v1 =
      (Control.Monad.Reader.Trans.bindReaderT Bind1@v0);
    let v1 =
      let liftEffect1@v2 =
        (
          (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
        ).liftEffect;
      let Apply0@v3 =
        ((
          Bind1@v0
        ).Apply0 <PrimUndefined>);
      let v4 =
        ((
          Apply0@v3
        ).Functor0 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let ask1@v5 =
        {#- Rewrite - Inline -#}
        let v5 =
          <PrimUndefined>;
        Effect.pureE;
      let local1@v6 =
        (
          (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
        ).local;
      {#- Rewrite - Inline -#}
      let v7 =
        {#- Rewrite - Inline -#}
        let v7 =
          <PrimUndefined>;
        Effect.applicativeEffect;
      (((
        bindReaderT1@v1
      ).bind (liftEffect1@v2 (Effect.Console.log "foo"))) (\$__unused@v8 -> 
        (((
          bindReaderT1@v1
        ).bind (liftEffect1@v2 ((Effect.Random.randomInt 1) 10))) (\i1@v9 -> 
          (((
            bindReaderT1@v1
          ).bind let v10 =
            ((
              v4
            ).map (\v@v10 -> 
              (add v@v10 1)
            ));
          let v11 =
            (liftEffect1@v2 ((Effect.Random.randomInt 1) 10));
          (\x@v12 -> 
            (v10 (v11 x@v12))
          )) (\i2@v10 -> 
            (((
              bindReaderT1@v1
            ).bind let v11 =
              ((
                v4
              ).map Data.Semiring.intAdd);
            let v12 =
              (liftEffect1@v2 ((Effect.Random.randomInt 1) 10));
            let v13 =
              (liftEffect1@v2 ((Effect.Random.randomInt 1) 10));
            (\r@v14 -> 
              (((
                Apply0@v3
              ).apply (v11 (v12 r@v14))) (v13 r@v14))
            )) (\i3@v11 -> 
              (((
                bindReaderT1@v1
              ).bind ask1@v5) (\five@v12 -> 
                (((
                  bindReaderT1@v1
                ).bind ((local1@v6 (\v@v13 -> 
                  (multiply v@v13 2)
                )) (((
                  bindReaderT1@v1
                ).bind ask1@v5) (\ten@v13 -> 
                  (liftEffect1@v2 ((Effect.Random.randomInt ten@v13) 20))
                )))) (\i4@v13 -> 
                  let v14 =
                    ((
                      v7
                    ).pure (add (add (add (add (add 4 i1@v9) i2@v10) i3@v11) five@v12) i4@v13));
                  (\v@v15 -> 
                    v14
                  )
                ))
              ))
            ))
          ))
        ))
      ));
    (v1 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test3 (Step 3)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  [[ LetAssoc
    let liftEffect1@v1 =
      (
        (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
      ).liftEffect;
    let v1 =
      {#- Rewrite - Inline -#}
      let Apply0@v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          <PrimUndefined>;
        Effect.applyEffect;
      let v3 =
        ((
          Apply0@v2
        ).Functor0 <PrimUndefined>);
      let local1@v4 =
        (
          (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
        ).local;
      (((
        bindReaderT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v5 -> 
        (((
          bindReaderT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v6 -> 
          (((
            bindReaderT1@v0
          ).bind let v7 =
            ((
              v3
            ).map (\v@v7 -> 
              (add v@v7 1)
            ));
          let v8 =
            (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
          (\x@v9 -> 
            (v7 (v8 x@v9))
          )) (\i2@v7 -> 
            (((
              bindReaderT1@v0
            ).bind let v8 =
              ((
                v3
              ).map Data.Semiring.intAdd);
            let v9 =
              (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
            let v10 =
              (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
            (\r@v11 -> 
              (((
                Apply0@v2
              ).apply (v8 (v9 r@v11))) (v10 r@v11))
            )) (\i3@v8 -> 
              (((
                bindReaderT1@v0
              ).bind Effect.pureE) (\five@v9 -> 
                (((
                  bindReaderT1@v0
                ).bind ((local1@v4 (\v@v10 -> 
                  (multiply v@v10 2)
                )) (((
                  bindReaderT1@v0
                ).bind Effect.pureE) (\ten@v10 -> 
                  (liftEffect1@v1 ((Effect.Random.randomInt ten@v10) 20))
                )))) (\i4@v10 -> 
                  [[ LetAssoc
                    let v11 =
                      (add (add (add (add (add 4 i1@v6) i2@v7) i3@v8) five@v9) i4@v10);
                    let v11 =
                      {#- Rewrite - Inline -#}
                      let v12 =
                        (effectPure v11);
                      v12;
                    (\v@v12 -> 
                      v11
                    )
                  ]]
                ))
              ))
            ))
          ))
        ))
      ));
    (v1 5)
  ]]
---------------
Snapshot.TransformerReaderT02.test3 (Step 4)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  {#- Rewrite - Inline -#}
  let v2 =
    {#- Rewrite - Inline -#}
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      Effect.functorEffect;
    let local1@v3 =
      (
        (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
      ).local;
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v4 -> 
      (((
        bindReaderT1@v0
      ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          ((
            v2
          ).map (\v@v6 -> 
            (add v@v6 1)
          ));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\x@v8 -> 
          (v6 (v7 x@v8))
        )) (\i2@v6 -> 
          (((
            bindReaderT1@v0
          ).bind let v7 =
            ((
              v2
            ).map Data.Semiring.intAdd);
          let v8 =
            (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
          let v9 =
            (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
          (\r@v10 -> 
            let v11 =
              (v7 (v8 r@v10));
            [[ LetAssoc
              let v12 =
                (v9 r@v10);
              let v12 =
                letEffect f'@v13 =
                  v11;
                letEffect a'@v14 =
                  v12;
                let v15 =
                  (f'@v13 a'@v14);
                {#- Rewrite - Inline -#}
                let v16 =
                  (effectPure v15);
                v16;
              v12
            ]]
          )) (\i3@v7 -> 
            (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\five@v8 -> 
              (((
                bindReaderT1@v0
              ).bind ((local1@v3 (\v@v9 -> 
                (multiply v@v9 2)
              )) (((
                bindReaderT1@v0
              ).bind Effect.pureE) (\ten@v9 -> 
                (liftEffect1@v1 ((Effect.Random.randomInt ten@v9) 20))
              )))) (\i4@v9 -> 
                let v10 =
                  (add (add (add (add (add 4 i1@v5) i2@v6) i3@v7) five@v8) i4@v9);
                {#- Rewrite - Inline -#}
                let v11 =
                  (effectPure v10);
                (\v@v12 -> 
                  v11
                )
              ))
            ))
          ))
        ))
      ))
    ));
  (v2 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 5)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  {#- Rewrite - Inline -#}
  let v3 =
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
      (((
        bindReaderT1@v0
      ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
        (((
          bindReaderT1@v0
        ).bind let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            (\v@v5 -> 
              (add v@v5 1)
            );
          {#- Rewrite - Inline -#}
          let v6 =
            (\a@v6 -> 
              (effectDefer letEffect a'@v7 =
                a@v6;
              (effectPure (v5 a'@v7)))
            );
          v6;
        let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\x@v7 -> 
          (v5 (v6 x@v7))
        )) (\i2@v5 -> 
          (((
            bindReaderT1@v0
          ).bind {#- Rewrite - Inline -#}
          let v6 =
            (\a@v6 -> 
              (effectDefer letEffect a'@v7 =
                a@v6;
              (effectPure (\v8 -> 
                (add a'@v7 v8)
              )))
            );
          let v7 =
            (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
          let v8 =
            (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
          (\r@v9 -> 
            let v10 =
              (v6 (v7 r@v9));
            let v11 =
              (v8 r@v9);
            {#- Rewrite - Inline -#}
            let v12 =
              letEffect f'@v12 =
                v10;
              letEffect a'@v13 =
                v11;
              {#- Rewrite - Inline -#}
              let v14 =
                (f'@v12 a'@v13);
              (effectPure v14);
            v12
          )) (\i3@v6 -> 
            (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\five@v7 -> 
              (((
                bindReaderT1@v0
              ).bind ((local1@v2 (\v@v8 -> 
                (multiply v@v8 2)
              )) (((
                bindReaderT1@v0
              ).bind Effect.pureE) (\ten@v8 -> 
                (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
              )))) (\i4@v8 -> 
                let v9 =
                  (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
                (\v@v10 -> 
                  (effectPure v9)
                )
              ))
            ))
          ))
        ))
      ))
    ));
  (v3 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 6)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  ((((
    bindReaderT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
      (((
        bindReaderT1@v0
      ).bind {#- Rewrite - Inline -#}
      let v5 =
        (\a@v5 -> 
          (effectDefer letEffect a'@v6 =
            a@v5;
          (effectPure (add a'@v6 1)))
        );
      let v6 =
        (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
      (\x@v7 -> 
        (v5 (v6 x@v7))
      )) (\i2@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\r@v8 -> 
          [[ LetAssoc
            let v9 =
              (v6 r@v8);
            let v9 =
              (effectDefer letEffect a'@v10 =
                v9;
              (effectPure (\v11 -> 
                (add a'@v10 v11)
              )));
            let v10 =
              (v7 r@v8);
            letEffect f'@v11 =
              v9;
            letEffect a'@v12 =
              v10;
            (effectPure (f'@v11 a'@v12))
          ]]
        )) (\i3@v6 -> 
          (((
            bindReaderT1@v0
          ).bind Effect.pureE) (\five@v7 -> 
            (((
              bindReaderT1@v0
            ).bind ((local1@v2 (\v@v8 -> 
              (multiply v@v8 2)
            )) (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\ten@v8 -> 
              (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
            )))) (\i4@v8 -> 
              let v9 =
                (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
              (\v@v10 -> 
                (effectPure v9)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 7)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  ((((
    bindReaderT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
      (((
        bindReaderT1@v0
      ).bind let v5 =
        (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
      (\x@v6 -> 
        let v7 =
          (v5 x@v6);
        (effectDefer letEffect a'@v8 =
          v7;
        (effectPure (add a'@v8 1)))
      )) (\i2@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\r@v8 -> 
          let v9 =
            (v6 r@v8);
          {#- Rewrite - Inline -#}
          let v10 =
            (effectDefer letEffect a'@v10 =
              v9;
            (effectPure (\v11 -> 
              (add a'@v10 v11)
            )));
          let v11 =
            (v7 r@v8);
          letEffect f'@v12 =
            v10;
          letEffect a'@v13 =
            v11;
          (effectPure (f'@v12 a'@v13))
        )) (\i3@v6 -> 
          (((
            bindReaderT1@v0
          ).bind Effect.pureE) (\five@v7 -> 
            (((
              bindReaderT1@v0
            ).bind ((local1@v2 (\v@v8 -> 
              (multiply v@v8 2)
            )) (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\ten@v8 -> 
              (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
            )))) (\i4@v8 -> 
              let v9 =
                (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
              (\v@v10 -> 
                (effectPure v9)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 8)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  ((((
    bindReaderT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
      (((
        bindReaderT1@v0
      ).bind let v5 =
        (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
      (\x@v6 -> 
        let v7 =
          (v5 x@v6);
        (effectDefer letEffect a'@v8 =
          v7;
        (effectPure (add a'@v8 1)))
      )) (\i2@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\r@v8 -> 
          let v9 =
            (v6 r@v8);
          let v10 =
            (v7 r@v8);
          [[ EffectBindAssoc
            letEffect a'@v11 =
              v9;
            letEffect f'@v11 =
              (effectPure (\v12 -> 
                (add a'@v11 v12)
              ));
            letEffect a'@v12 =
              v10;
            (effectPure (f'@v11 a'@v12))
          ]]
        )) (\i3@v6 -> 
          (((
            bindReaderT1@v0
          ).bind Effect.pureE) (\five@v7 -> 
            (((
              bindReaderT1@v0
            ).bind ((local1@v2 (\v@v8 -> 
              (multiply v@v8 2)
            )) (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\ten@v8 -> 
              (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
            )))) (\i4@v8 -> 
              let v9 =
                (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
              (\v@v10 -> 
                (effectPure v9)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 9)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  ((((
    bindReaderT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
      (((
        bindReaderT1@v0
      ).bind let v5 =
        (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
      (\x@v6 -> 
        let v7 =
          (v5 x@v6);
        (effectDefer letEffect a'@v8 =
          v7;
        (effectPure (add a'@v8 1)))
      )) (\i2@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\r@v8 -> 
          let v9 =
            (v6 r@v8);
          let v10 =
            (v7 r@v8);
          letEffect a'@v11 =
            v9;
          {#- Rewrite - Inline -#}
          let f'@v12 =
            (\v12 -> 
              (add a'@v11 v12)
            );
          letEffect a'@v13 =
            v10;
          (effectPure (f'@v12 a'@v13))
        )) (\i3@v6 -> 
          (((
            bindReaderT1@v0
          ).bind Effect.pureE) (\five@v7 -> 
            (((
              bindReaderT1@v0
            ).bind ((local1@v2 (\v@v8 -> 
              (multiply v@v8 2)
            )) (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\ten@v8 -> 
              (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
            )))) (\i4@v8 -> 
              let v9 =
                (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
              (\v@v10 -> 
                (effectPure v9)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)
---------------
Snapshot.TransformerReaderT02.test3 (Step 10; Final)
  let bindReaderT1@v0 =
    (Control.Monad.Reader.Trans.bindReaderT Effect.bindEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.Reader.Trans.monadEffectReader Effect.Class.monadEffectEffect)
    ).liftEffect;
  let local1@v2 =
    (
      (Control.Monad.Reader.Trans.monadReaderReaderT Effect.monadEffect)
    ).local;
  ((((
    bindReaderT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v3 -> 
    (((
      bindReaderT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v4 -> 
      (((
        bindReaderT1@v0
      ).bind let v5 =
        (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
      (\x@v6 -> 
        let v7 =
          (v5 x@v6);
        (effectDefer letEffect a'@v8 =
          v7;
        (effectPure (add a'@v8 1)))
      )) (\i2@v5 -> 
        (((
          bindReaderT1@v0
        ).bind let v6 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        let v7 =
          (liftEffect1@v1 ((Effect.Random.randomInt 1) 10));
        (\r@v8 -> 
          let v9 =
            (v6 r@v8);
          let v10 =
            (v7 r@v8);
          letEffect a'@v11 =
            v9;
          letEffect a'@v12 =
            v10;
          (effectPure (add a'@v11 a'@v12))
        )) (\i3@v6 -> 
          (((
            bindReaderT1@v0
          ).bind Effect.pureE) (\five@v7 -> 
            (((
              bindReaderT1@v0
            ).bind ((local1@v2 (\v@v8 -> 
              (multiply v@v8 2)
            )) (((
              bindReaderT1@v0
            ).bind Effect.pureE) (\ten@v8 -> 
              (liftEffect1@v1 ((Effect.Random.randomInt ten@v8) 20))
            )))) (\i4@v8 -> 
              let v9 =
                (add (add (add (add (add 4 i1@v4) i2@v5) i3@v6) five@v7) i4@v8);
              (\v@v10 -> 
                (effectPure v9)
              )
            ))
          ))
        ))
      ))
    ))
  )) 5)