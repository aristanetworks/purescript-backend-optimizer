Snapshot.TransformerWriterT01.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.TransformerWriterT01.add (Step 1; Final)
  Data.Semiring.intAdd
===============
Snapshot.TransformerWriterT01.applicativeWriterT (Step 0; Original)
  (Control.Monad.Writer.Trans.applicativeWriterT Data.Monoid.monoidString)
---------------
Snapshot.TransformerWriterT01.applicativeWriterT (Step 1; Final)
  (Control.Monad.Writer.Trans.applicativeWriterT Data.Monoid.monoidString)
===============
Snapshot.TransformerWriterT01.apply (Step 0; Original)
  (Control.Apply.apply (Snapshot.TransformerWriterT01.applyWriterT Effect.applyEffect))
---------------
Snapshot.TransformerWriterT01.apply (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    ((Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString) Effect.applyEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).apply;
  v1
---------------
Snapshot.TransformerWriterT01.apply (Step 2; Final)
  (
    ((Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString) Effect.applyEffect)
  ).apply
===============
Snapshot.TransformerWriterT01.applyWriterT (Step 0; Original)
  (Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString)
---------------
Snapshot.TransformerWriterT01.applyWriterT (Step 1; Final)
  (Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString)
===============
Snapshot.TransformerWriterT01.bind (Step 0; Original)
  (Control.Bind.bind Snapshot.TransformerWriterT01.bindWriterT1)
---------------
Snapshot.TransformerWriterT01.bind (Step 1; Final)
  (
    Snapshot.TransformerWriterT01.bindWriterT1
  ).bind
===============
Snapshot.TransformerWriterT01.bindWriterT (Step 0; Original)
  (Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString)
---------------
Snapshot.TransformerWriterT01.bindWriterT (Step 1; Final)
  (Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString)
===============
Snapshot.TransformerWriterT01.bindWriterT1 (Step 0; Original)
  (Snapshot.TransformerWriterT01.bindWriterT Effect.bindEffect)
---------------
Snapshot.TransformerWriterT01.bindWriterT1 (Step 1; Final)
  ((Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString) Effect.bindEffect)
===============
Snapshot.TransformerWriterT01.discard (Step 0; Original)
  (Control.Bind.discard Control.Bind.discardUnit)
---------------
Snapshot.TransformerWriterT01.discard (Step 1; Final)
  (
    Control.Bind.discardUnit
  ).discard
===============
Snapshot.TransformerWriterT01.discard1 (Step 0; Original)
  (Snapshot.TransformerWriterT01.discard Snapshot.TransformerWriterT01.bindWriterT1)
---------------
Snapshot.TransformerWriterT01.discard1 (Step 1; Final)
  (
    Snapshot.TransformerWriterT01.bindWriterT1
  ).bind
===============
Snapshot.TransformerWriterT01.liftEffect (Step 0; Original)
  (Effect.Class.liftEffect Snapshot.TransformerWriterT01.monadEffectWriter1)
---------------
Snapshot.TransformerWriterT01.liftEffect (Step 1; Final)
  (
    Snapshot.TransformerWriterT01.monadEffectWriter1
  ).liftEffect
===============
Snapshot.TransformerWriterT01.map (Step 0; Original)
  (Data.Functor.map Effect.functorEffect)
---------------
Snapshot.TransformerWriterT01.map (Step 1; Final)
  (
    Effect.functorEffect
  ).map
===============
Snapshot.TransformerWriterT01.map1 (Step 0; Original)
  (Data.Functor.map (Control.Monad.Writer.Trans.functorWriterT Effect.functorEffect))
---------------
Snapshot.TransformerWriterT01.map1 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (Control.Monad.Writer.Trans.functorWriterT Effect.functorEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).map;
  v1
---------------
Snapshot.TransformerWriterT01.map1 (Step 2; Final)
  (
    (Control.Monad.Writer.Trans.functorWriterT Effect.functorEffect)
  ).map
===============
Snapshot.TransformerWriterT01.monadEffectWriter (Step 0; Original)
  (Control.Monad.Writer.Trans.monadEffectWriter Data.Monoid.monoidString)
---------------
Snapshot.TransformerWriterT01.monadEffectWriter (Step 1; Final)
  (Control.Monad.Writer.Trans.monadEffectWriter Data.Monoid.monoidString)
===============
Snapshot.TransformerWriterT01.monadEffectWriter1 (Step 0; Original)
  (Snapshot.TransformerWriterT01.monadEffectWriter Effect.Class.monadEffectEffect)
---------------
Snapshot.TransformerWriterT01.monadEffectWriter1 (Step 1; Final)
  (Snapshot.TransformerWriterT01.monadEffectWriter Effect.Class.monadEffectEffect)
===============
Snapshot.TransformerWriterT01.monadTellWriterT (Step 0; Original)
  (Control.Monad.Writer.Trans.monadTellWriterT Data.Monoid.monoidString)
---------------
Snapshot.TransformerWriterT01.monadTellWriterT (Step 1; Final)
  (Control.Monad.Writer.Trans.monadTellWriterT Data.Monoid.monoidString)
===============
Snapshot.TransformerWriterT01.monadTellWriterT1 (Step 0; Original)
  (Snapshot.TransformerWriterT01.monadTellWriterT Effect.monadEffect)
---------------
Snapshot.TransformerWriterT01.monadTellWriterT1 (Step 1; Final)
  (Snapshot.TransformerWriterT01.monadTellWriterT Effect.monadEffect)
===============
Snapshot.TransformerWriterT01.pure (Step 0; Original)
  (Control.Applicative.pure (Snapshot.TransformerWriterT01.applicativeWriterT Effect.applicativeEffect))
---------------
Snapshot.TransformerWriterT01.pure (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (Snapshot.TransformerWriterT01.applicativeWriterT Effect.applicativeEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).pure;
  v1
---------------
Snapshot.TransformerWriterT01.pure (Step 2; Final)
  (
    (Snapshot.TransformerWriterT01.applicativeWriterT Effect.applicativeEffect)
  ).pure
===============
Snapshot.TransformerWriterT01.tell (Step 0; Original)
  (Control.Monad.Writer.Class.tell Snapshot.TransformerWriterT01.monadTellWriterT1)
---------------
Snapshot.TransformerWriterT01.tell (Step 1; Final)
  (
    Snapshot.TransformerWriterT01.monadTellWriterT1
  ).tell
===============
Snapshot.TransformerWriterT01.test1 (Step 0; Original)
  ((Snapshot.TransformerWriterT01.map Data.Tuple.fst) (Control.Monad.Writer.Trans.runWriterT ((Snapshot.TransformerWriterT01.discard1 (Snapshot.TransformerWriterT01.liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    ((Snapshot.TransformerWriterT01.bind (Snapshot.TransformerWriterT01.liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      ((Snapshot.TransformerWriterT01.bind ((Snapshot.TransformerWriterT01.map1 (\v@v2 -> 
        ((Snapshot.TransformerWriterT01.add v@v2) 1)
      )) (Snapshot.TransformerWriterT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
        ((Snapshot.TransformerWriterT01.bind ((Snapshot.TransformerWriterT01.apply ((Snapshot.TransformerWriterT01.map1 Snapshot.TransformerWriterT01.add) (Snapshot.TransformerWriterT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (Snapshot.TransformerWriterT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v3 -> 
          ((Snapshot.TransformerWriterT01.discard1 (Snapshot.TransformerWriterT01.tell "nothing")) (\$__unused@v4 -> 
            (Snapshot.TransformerWriterT01.pure ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add 4) i1@v1)) i2@v2)) i3@v3))
          ))
        ))
      ))
    ))
  ))))
---------------
Snapshot.TransformerWriterT01.test1 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      (((
        Snapshot.TransformerWriterT01.bindWriterT1
      ).bind ((
        Snapshot.TransformerWriterT01.monadEffectWriter1
      ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
        (((
          Snapshot.TransformerWriterT01.bindWriterT1
        ).bind ((
          Snapshot.TransformerWriterT01.monadEffectWriter1
        ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
          (((
            Snapshot.TransformerWriterT01.bindWriterT1
          ).bind ((Snapshot.TransformerWriterT01.map1 (\v@v2 -> 
            {#- Rewrite - Inline -#}
            let v3 =
              1;
            (add v@v2 v3)
          )) ((
            Snapshot.TransformerWriterT01.monadEffectWriter1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
            (((
              Snapshot.TransformerWriterT01.bindWriterT1
            ).bind ((Snapshot.TransformerWriterT01.apply ((Snapshot.TransformerWriterT01.map1 Data.Semiring.intAdd) ((
              Snapshot.TransformerWriterT01.monadEffectWriter1
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
              Snapshot.TransformerWriterT01.monadEffectWriter1
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v3 -> 
              (((
                Snapshot.TransformerWriterT01.bindWriterT1
              ).bind ((
                Snapshot.TransformerWriterT01.monadTellWriterT1
              ).tell "nothing")) (\$__unused@v4 -> 
                (Snapshot.TransformerWriterT01.pure [[ LetAssoc
                  let v5 =
                    {#- Rewrite - Inline -#}
                    let v5 =
                      4;
                    {#- Rewrite - Inline -#}
                    let v6 =
                      (\v6 -> 
                        (add v5 v6)
                      );
                    (v6 i1@v1);
                  let v5 =
                    {#- Rewrite - Inline -#}
                    let v6 =
                      (\v6 -> 
                        (add v5 v6)
                      );
                    (v6 i2@v2);
                  {#- Rewrite - Inline -#}
                  let v6 =
                    (\v6 -> 
                      (add v5 v6)
                    );
                  (v6 i3@v3)
                ]])
              ))
            ))
          ))
        ))
      ));
    v0;
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))
---------------
Snapshot.TransformerWriterT01.test1 (Step 2)
  let v0 =
    (((
      Snapshot.TransformerWriterT01.bindWriterT1
    ).bind ((
      Snapshot.TransformerWriterT01.monadEffectWriter1
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
      (((
        Snapshot.TransformerWriterT01.bindWriterT1
      ).bind ((
        Snapshot.TransformerWriterT01.monadEffectWriter1
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
        (((
          Snapshot.TransformerWriterT01.bindWriterT1
        ).bind ((Snapshot.TransformerWriterT01.map1 (\v@v2 -> 
          (add v@v2 1)
        )) ((
          Snapshot.TransformerWriterT01.monadEffectWriter1
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
          (((
            Snapshot.TransformerWriterT01.bindWriterT1
          ).bind ((Snapshot.TransformerWriterT01.apply ((Snapshot.TransformerWriterT01.map1 Data.Semiring.intAdd) ((
            Snapshot.TransformerWriterT01.monadEffectWriter1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
            Snapshot.TransformerWriterT01.monadEffectWriter1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v3 -> 
            (((
              Snapshot.TransformerWriterT01.bindWriterT1
            ).bind ((
              Snapshot.TransformerWriterT01.monadTellWriterT1
            ).tell "nothing")) (\$__unused@v4 -> 
              (Snapshot.TransformerWriterT01.pure {#- Rewrite - Inline -#}
              let v5 =
                (add 4 i1@v1);
              {#- Rewrite - Inline -#}
              let v6 =
                (add v5 i2@v2);
              (add v6 i3@v3))
            ))
          ))
        ))
      ))
    ));
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))
---------------
Snapshot.TransformerWriterT01.test1 (Step 3; Final)
  let v0 =
    (((
      Snapshot.TransformerWriterT01.bindWriterT1
    ).bind ((
      Snapshot.TransformerWriterT01.monadEffectWriter1
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
      (((
        Snapshot.TransformerWriterT01.bindWriterT1
      ).bind ((
        Snapshot.TransformerWriterT01.monadEffectWriter1
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
        (((
          Snapshot.TransformerWriterT01.bindWriterT1
        ).bind ((Snapshot.TransformerWriterT01.map1 (\v@v2 -> 
          (add v@v2 1)
        )) ((
          Snapshot.TransformerWriterT01.monadEffectWriter1
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v2 -> 
          (((
            Snapshot.TransformerWriterT01.bindWriterT1
          ).bind ((Snapshot.TransformerWriterT01.apply ((Snapshot.TransformerWriterT01.map1 Data.Semiring.intAdd) ((
            Snapshot.TransformerWriterT01.monadEffectWriter1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
            Snapshot.TransformerWriterT01.monadEffectWriter1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v3 -> 
            (((
              Snapshot.TransformerWriterT01.bindWriterT1
            ).bind ((
              Snapshot.TransformerWriterT01.monadTellWriterT1
            ).tell "nothing")) (\$__unused@v4 -> 
              (Snapshot.TransformerWriterT01.pure (add (add (add 4 i1@v1) i2@v2) i3@v3))
            ))
          ))
        ))
      ))
    ));
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))
===============
Snapshot.TransformerWriterT01.test2 (Step 0; Original)
  (\dictMonadTell@v0 -> 
    let tell1@v1 =
      (Control.Monad.Writer.Class.tell dictMonadTell@v0);
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      let discard2@v5 =
        (Snapshot.TransformerWriterT01.discard Bind1@v4);
      let liftEffect1@v6 =
        (Effect.Class.liftEffect dictMonadEffect@v2);
      let bind1@v7 =
        (Control.Bind.bind Bind1@v4);
      let Apply0@v8 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map2@v9 =
        (Data.Functor.map ((
          Apply0@v8
        ).Functor0 <PrimUndefined>));
      let apply1@v10 =
        (Control.Apply.apply Apply0@v8);
      let pure1@v11 =
        (Control.Applicative.pure ((
          Monad0@v3
        ).Applicative0 <PrimUndefined>));
      ((discard2@v5 (liftEffect1@v6 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v7 (liftEffect1@v6 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v7 ((map2@v9 (\v@v14 -> 
            ((Snapshot.TransformerWriterT01.add v@v14) 1)
          )) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((bind1@v7 ((apply1@v10 ((map2@v9 Snapshot.TransformerWriterT01.add) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
              ((discard2@v5 (tell1@v1 "nothing")) (\$__unused@v16 -> 
                (pure1@v11 ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add 4) i1@v13)) i2@v14)) i3@v15))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerWriterT01.test2 (Step 1)
  (\dictMonadTell@v0 -> 
    {#- Rewrite - Inline -#}
    let tell1@v1 =
      (
        dictMonadTell@v0
      ).tell;
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let discard2@v5 =
        (
          Bind1@v4
        ).bind;
      {#- Rewrite - Inline -#}
      let liftEffect1@v6 =
        (
          dictMonadEffect@v2
        ).liftEffect;
      {#- Rewrite - Inline -#}
      let bind1@v7 =
        (
          Bind1@v4
        ).bind;
      let Apply0@v8 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map2@v9 =
        {#- Rewrite - Inline -#}
        let v9 =
          ((
            Apply0@v8
          ).Functor0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v10 =
          (
            v9
          ).map;
        v10;
      {#- Rewrite - Inline -#}
      let apply1@v10 =
        (
          Apply0@v8
        ).apply;
      let pure1@v11 =
        {#- Rewrite - Inline -#}
        let v11 =
          ((
            Monad0@v3
          ).Applicative0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v12 =
          (
            v11
          ).pure;
        v12;
      ((discard2@v5 (liftEffect1@v6 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v7 (liftEffect1@v6 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v7 ((map2@v9 (\v@v14 -> 
            {#- Rewrite - Inline -#}
            let v15 =
              1;
            (add v@v14 v15)
          )) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((bind1@v7 ((apply1@v10 ((map2@v9 Data.Semiring.intAdd) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
              ((discard2@v5 (tell1@v1 "nothing")) (\$__unused@v16 -> 
                (pure1@v11 [[ LetAssoc
                  let v17 =
                    {#- Rewrite - Inline -#}
                    let v17 =
                      4;
                    {#- Rewrite - Inline -#}
                    let v18 =
                      (\v18 -> 
                        (add v17 v18)
                      );
                    (v18 i1@v13);
                  let v17 =
                    {#- Rewrite - Inline -#}
                    let v18 =
                      (\v18 -> 
                        (add v17 v18)
                      );
                    (v18 i2@v14);
                  {#- Rewrite - Inline -#}
                  let v18 =
                    (\v18 -> 
                      (add v17 v18)
                    );
                  (v18 i3@v15)
                ]])
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerWriterT01.test2 (Step 2)
  (\dictMonadTell@v0 -> \dictMonadEffect@v1 -> 
    let Monad0@v2 =
      ((
        dictMonadEffect@v1
      ).Monad0 <PrimUndefined>);
    let Bind1@v3 =
      ((
        Monad0@v2
      ).Bind1 <PrimUndefined>);
    let Apply0@v4 =
      ((
        Bind1@v3
      ).Apply0 <PrimUndefined>);
    let map2@v5 =
      (
        ((
          Apply0@v4
        ).Functor0 <PrimUndefined>)
      ).map;
    let pure1@v6 =
      (
        ((
          Monad0@v2
        ).Applicative0 <PrimUndefined>)
      ).pure;
    (((
      Bind1@v3
    ).bind ((
      dictMonadEffect@v1
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v7 -> 
      (((
        Bind1@v3
      ).bind ((
        dictMonadEffect@v1
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
        (((
          Bind1@v3
        ).bind ((map2@v5 (\v@v9 -> 
          (add v@v9 1)
        )) ((
          dictMonadEffect@v1
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
          (((
            Bind1@v3
          ).bind (((
            Apply0@v4
          ).apply ((map2@v5 Data.Semiring.intAdd) ((
            dictMonadEffect@v1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
            dictMonadEffect@v1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v10 -> 
            (((
              Bind1@v3
            ).bind ((
              dictMonadTell@v0
            ).tell "nothing")) (\$__unused@v11 -> 
              (pure1@v6 {#- Rewrite - Inline -#}
              let v12 =
                (add 4 i1@v8);
              {#- Rewrite - Inline -#}
              let v13 =
                (add v12 i2@v9);
              (add v13 i3@v10))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerWriterT01.test2 (Step 3; Final)
  (\dictMonadTell@v0 -> \dictMonadEffect@v1 -> 
    let Monad0@v2 =
      ((
        dictMonadEffect@v1
      ).Monad0 <PrimUndefined>);
    let Bind1@v3 =
      ((
        Monad0@v2
      ).Bind1 <PrimUndefined>);
    let Apply0@v4 =
      ((
        Bind1@v3
      ).Apply0 <PrimUndefined>);
    let map2@v5 =
      (
        ((
          Apply0@v4
        ).Functor0 <PrimUndefined>)
      ).map;
    let pure1@v6 =
      (
        ((
          Monad0@v2
        ).Applicative0 <PrimUndefined>)
      ).pure;
    (((
      Bind1@v3
    ).bind ((
      dictMonadEffect@v1
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v7 -> 
      (((
        Bind1@v3
      ).bind ((
        dictMonadEffect@v1
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
        (((
          Bind1@v3
        ).bind ((map2@v5 (\v@v9 -> 
          (add v@v9 1)
        )) ((
          dictMonadEffect@v1
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
          (((
            Bind1@v3
          ).bind (((
            Apply0@v4
          ).apply ((map2@v5 Data.Semiring.intAdd) ((
            dictMonadEffect@v1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
            dictMonadEffect@v1
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v10 -> 
            (((
              Bind1@v3
            ).bind ((
              dictMonadTell@v0
            ).tell "nothing")) (\$__unused@v11 -> 
              (pure1@v6 (add (add (add 4 i1@v8) i2@v9) i3@v10))
            ))
          ))
        ))
      ))
    ))
  )
===============
Snapshot.TransformerWriterT01.test3 (Step 0; Original)
  ((Snapshot.TransformerWriterT01.map Data.Tuple.fst) (Control.Monad.Writer.Trans.runWriterT ((Snapshot.TransformerWriterT01.test2 Snapshot.TransformerWriterT01.monadTellWriterT1) Snapshot.TransformerWriterT01.monadEffectWriter1)))
---------------
Snapshot.TransformerWriterT01.test3 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      ((Snapshot.TransformerWriterT01.test2 Snapshot.TransformerWriterT01.monadTellWriterT1) Snapshot.TransformerWriterT01.monadEffectWriter1);
    v0;
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))
---------------
Snapshot.TransformerWriterT01.test3 (Step 2; Final)
  let v0 =
    ((Snapshot.TransformerWriterT01.test2 Snapshot.TransformerWriterT01.monadTellWriterT1) Snapshot.TransformerWriterT01.monadEffectWriter1);
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))
===============
Snapshot.TransformerWriterT01.test4 (Step 0; Original)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindWriterT2@v3 =
      (Snapshot.TransformerWriterT01.bindWriterT Bind1@v2);
    let discard2@v4 =
      (Snapshot.TransformerWriterT01.discard bindWriterT2@v3);
    let liftEffect1@v5 =
      (Effect.Class.liftEffect (Snapshot.TransformerWriterT01.monadEffectWriter dictMonadEffect@v0));
    let bind1@v6 =
      (Control.Bind.bind bindWriterT2@v3);
    let Apply0@v7 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let map2@v8 =
      (Data.Functor.map (Control.Monad.Writer.Trans.functorWriterT ((
        Apply0@v7
      ).Functor0 <PrimUndefined>)));
    let apply1@v9 =
      (Control.Apply.apply (Snapshot.TransformerWriterT01.applyWriterT Apply0@v7));
    let tell1@v10 =
      (Control.Monad.Writer.Class.tell (Snapshot.TransformerWriterT01.monadTellWriterT Monad0@v1));
    let pure1@v11 =
      (Control.Applicative.pure (Snapshot.TransformerWriterT01.applicativeWriterT ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)));
    (Control.Monad.Writer.Trans.runWriterT ((discard2@v4 (liftEffect1@v5 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
      ((bind1@v6 (liftEffect1@v5 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
        ((bind1@v6 ((map2@v8 (\v@v14 -> 
          ((Snapshot.TransformerWriterT01.add v@v14) 1)
        )) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
          ((bind1@v6 ((apply1@v9 ((map2@v8 Snapshot.TransformerWriterT01.add) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
            ((discard2@v4 (tell1@v10 "nothing")) (\$__unused@v16 -> 
              (pure1@v11 ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add ((Snapshot.TransformerWriterT01.add 4) i1@v13)) i2@v14)) i3@v15))
            ))
          ))
        ))
      ))
    )))
  )
---------------
Snapshot.TransformerWriterT01.test4 (Step 1)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindWriterT2@v3 =
      ((Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString) Bind1@v2);
    {#- Rewrite - Inline -#}
    let discard2@v4 =
      (
        bindWriterT2@v3
      ).bind;
    let liftEffect1@v5 =
      {#- Rewrite - Inline -#}
      let v5 =
        (Snapshot.TransformerWriterT01.monadEffectWriter dictMonadEffect@v0);
      {#- Rewrite - Inline -#}
      let v6 =
        (
          v5
        ).liftEffect;
      v6;
    {#- Rewrite - Inline -#}
    let bind1@v6 =
      (
        bindWriterT2@v3
      ).bind;
    let Apply0@v7 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let map2@v8 =
      {#- Rewrite - Inline -#}
      let v8 =
        (Control.Monad.Writer.Trans.functorWriterT ((
          Apply0@v7
        ).Functor0 <PrimUndefined>));
      {#- Rewrite - Inline -#}
      let v9 =
        (
          v8
        ).map;
      v9;
    let apply1@v9 =
      {#- Rewrite - Inline -#}
      let v9 =
        ((Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString) Apply0@v7);
      {#- Rewrite - Inline -#}
      let v10 =
        (
          v9
        ).apply;
      v10;
    let tell1@v10 =
      {#- Rewrite - Inline -#}
      let v10 =
        (Snapshot.TransformerWriterT01.monadTellWriterT Monad0@v1);
      {#- Rewrite - Inline -#}
      let v11 =
        (
          v10
        ).tell;
      v11;
    let pure1@v11 =
      {#- Rewrite - Inline -#}
      let v11 =
        (Snapshot.TransformerWriterT01.applicativeWriterT ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>));
      {#- Rewrite - Inline -#}
      let v12 =
        (
          v11
        ).pure;
      v12;
    {#- Rewrite - Inline -#}
    let v12 =
      ((discard2@v4 (liftEffect1@v5 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v6 (liftEffect1@v5 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v6 ((map2@v8 (\v@v14 -> 
            {#- Rewrite - Inline -#}
            let v15 =
              1;
            (add v@v14 v15)
          )) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((bind1@v6 ((apply1@v9 ((map2@v8 Data.Semiring.intAdd) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v5 ((Effect.Random.randomInt 1) 10)))) (\i3@v15 -> 
              ((discard2@v4 (tell1@v10 "nothing")) (\$__unused@v16 -> 
                (pure1@v11 [[ LetAssoc
                  let v17 =
                    {#- Rewrite - Inline -#}
                    let v17 =
                      4;
                    {#- Rewrite - Inline -#}
                    let v18 =
                      (\v18 -> 
                        (add v17 v18)
                      );
                    (v18 i1@v13);
                  let v17 =
                    {#- Rewrite - Inline -#}
                    let v18 =
                      (\v18 -> 
                        (add v17 v18)
                      );
                    (v18 i2@v14);
                  {#- Rewrite - Inline -#}
                  let v18 =
                    (\v18 -> 
                      (add v17 v18)
                    );
                  (v18 i3@v15)
                ]])
              ))
            ))
          ))
        ))
      ));
    v12
  )
---------------
Snapshot.TransformerWriterT01.test4 (Step 2)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindWriterT2@v3 =
      ((Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString) Bind1@v2);
    let liftEffect1@v4 =
      (
        (Snapshot.TransformerWriterT01.monadEffectWriter dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let map2@v6 =
      (
        (Control.Monad.Writer.Trans.functorWriterT ((
          Apply0@v5
        ).Functor0 <PrimUndefined>))
      ).map;
    let apply1@v7 =
      (
        ((Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString) Apply0@v5)
      ).apply;
    let tell1@v8 =
      (
        (Snapshot.TransformerWriterT01.monadTellWriterT Monad0@v1)
      ).tell;
    let pure1@v9 =
      (
        (Snapshot.TransformerWriterT01.applicativeWriterT ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>))
      ).pure;
    (((
      bindWriterT2@v3
    ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v10 -> 
      (((
        bindWriterT2@v3
      ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v11 -> 
        (((
          bindWriterT2@v3
        ).bind ((map2@v6 (\v@v12 -> 
          (add v@v12 1)
        )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v12 -> 
          (((
            bindWriterT2@v3
          ).bind ((apply1@v7 ((map2@v6 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v13 -> 
            (((
              bindWriterT2@v3
            ).bind (tell1@v8 "nothing")) (\$__unused@v14 -> 
              (pure1@v9 {#- Rewrite - Inline -#}
              let v15 =
                (add 4 i1@v11);
              {#- Rewrite - Inline -#}
              let v16 =
                (add v15 i2@v12);
              (add v16 i3@v13))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerWriterT01.test4 (Step 3; Final)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let bindWriterT2@v3 =
      ((Control.Monad.Writer.Trans.bindWriterT Data.Semigroup.semigroupString) Bind1@v2);
    let liftEffect1@v4 =
      (
        (Snapshot.TransformerWriterT01.monadEffectWriter dictMonadEffect@v0)
      ).liftEffect;
    let Apply0@v5 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let map2@v6 =
      (
        (Control.Monad.Writer.Trans.functorWriterT ((
          Apply0@v5
        ).Functor0 <PrimUndefined>))
      ).map;
    let apply1@v7 =
      (
        ((Control.Monad.Writer.Trans.applyWriterT Data.Semigroup.semigroupString) Apply0@v5)
      ).apply;
    let tell1@v8 =
      (
        (Snapshot.TransformerWriterT01.monadTellWriterT Monad0@v1)
      ).tell;
    let pure1@v9 =
      (
        (Snapshot.TransformerWriterT01.applicativeWriterT ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>))
      ).pure;
    (((
      bindWriterT2@v3
    ).bind (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v10 -> 
      (((
        bindWriterT2@v3
      ).bind (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v11 -> 
        (((
          bindWriterT2@v3
        ).bind ((map2@v6 (\v@v12 -> 
          (add v@v12 1)
        )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v12 -> 
          (((
            bindWriterT2@v3
          ).bind ((apply1@v7 ((map2@v6 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v13 -> 
            (((
              bindWriterT2@v3
            ).bind (tell1@v8 "nothing")) (\$__unused@v14 -> 
              (pure1@v9 (add (add (add 4 i1@v11) i2@v12) i3@v13))
            ))
          ))
        ))
      ))
    ))
  )
===============
Snapshot.TransformerWriterT01.test5 (Step 0; Original)
  ((Snapshot.TransformerWriterT01.map Data.Tuple.fst) (Snapshot.TransformerWriterT01.test4 Effect.Class.monadEffectEffect))
---------------
Snapshot.TransformerWriterT01.test5 (Step 1; Final)
  let v0 =
    (Snapshot.TransformerWriterT01.test4 Effect.Class.monadEffectEffect);
  (effectDefer letEffect a'@v1 =
    v0;
  (effectPure (
    a'@v1
  )#value0))