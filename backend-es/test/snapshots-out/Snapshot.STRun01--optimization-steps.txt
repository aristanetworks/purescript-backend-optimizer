Snapshot.STRun01.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.STRun01.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.STRun01.bind (Step 0; Original)
  (Control.Bind.bind Control.Monad.ST.Internal.bindST)
---------------
Snapshot.STRun01.bind (Step 1; Final)
  Control.Monad.ST.Internal.bind_

===============

Snapshot.STRun01.pure (Step 0; Original)
  (Control.Applicative.pure Control.Monad.ST.Internal.applicativeST)
---------------
Snapshot.STRun01.pure (Step 1; Final)
  Control.Monad.ST.Internal.pure_

===============

Snapshot.STRun01.test1 (Step 0; Original)
  (Control.Monad.ST.Internal.run (Snapshot.STRun01.pure 1))
---------------
Snapshot.STRun01.test1 (Step 1)
  (Control.Monad.ST.Internal.run {#- Rewrite - Inline -#}
  let v0 =
    1;
  {#- Rewrite - Inline -#}
  let v1 =
    (effectPure v0);
  v1)
---------------
Snapshot.STRun01.test1 (Step 2; Final)
  1

===============

Snapshot.STRun01.test2 (Step 0; Original)
  (Control.Monad.ST.Internal.run ((Snapshot.STRun01.bind (Snapshot.STRun01.pure 1)) (\n@v0 -> 
    ((Snapshot.STRun01.bind (Snapshot.STRun01.pure 2)) (\m@v1 -> 
      (Snapshot.STRun01.pure ((Snapshot.STRun01.add n@v0) m@v1))
    ))
  )))
---------------
Snapshot.STRun01.test2 (Step 1)
  (Control.Monad.ST.Internal.run {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      1;
    {#- Rewrite - Inline -#}
    let v1 =
      (effectPure v0);
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect n@v1 =
      v0;
    {#- Rewrite - Inline -#}
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        2;
      {#- Rewrite - Inline -#}
      let v3 =
        (effectPure v2);
      v3;
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect m@v3 =
        v2;
      let v4 =
        (add n@v1 m@v3);
      {#- Rewrite - Inline -#}
      let v5 =
        (effectPure v4);
      v5;
    v3;
  v1)
---------------
Snapshot.STRun01.test2 (Step 2)
  (Control.Monad.ST.Internal.run (effectDefer {#- Rewrite - Inline -#}
  let n@v0 =
    1;
  (effectDefer {#- Rewrite - Inline -#}
  let m@v1 =
    2;
  {#- Rewrite - Inline -#}
  let v2 =
    (add n@v0 m@v1);
  (effectPure v2))))
---------------
Snapshot.STRun01.test2 (Step 3; Final)
  (Control.Monad.ST.Internal.run (effectDefer (effectPure 3)))

===============

Snapshot.STRun01.test3 (Step 0; Original)
  (Control.Monad.ST.Internal.run ((Snapshot.STRun01.bind (Control.Monad.ST.Internal.new 1)) (\nRef@v0 -> 
    ((Snapshot.STRun01.bind (Control.Monad.ST.Internal.new 2)) (\mRef@v1 -> 
      ((Snapshot.STRun01.bind (Control.Monad.ST.Internal.read nRef@v0)) (\n@v2 -> 
        ((Snapshot.STRun01.bind (Control.Monad.ST.Internal.read mRef@v1)) (\m@v3 -> 
          (Snapshot.STRun01.pure ((Snapshot.STRun01.add n@v2) m@v3))
        ))
      ))
    ))
  )))
---------------
Snapshot.STRun01.test3 (Step 1)
  (Control.Monad.ST.Internal.run let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      1;
    {#- Rewrite - Inline -#}
    let v1 =
      (refNew v0);
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect nRef@v1 =
      v0;
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        2;
      {#- Rewrite - Inline -#}
      let v3 =
        (refNew v2);
      v3;
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect mRef@v3 =
        v2;
      {#- Rewrite - Inline -#}
      let v4 =
        (refRead nRef@v1);
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect n@v5 =
          v4;
        {#- Rewrite - Inline -#}
        let v6 =
          (refRead mRef@v3);
        {#- Rewrite - Inline -#}
        let v7 =
          letEffect m@v7 =
            v6;
          let v8 =
            (add n@v5 m@v7);
          {#- Rewrite - Inline -#}
          let v9 =
            (effectPure v8);
          v9;
        v7;
      v5;
    v3;
  v1)
---------------
Snapshot.STRun01.test3 (Step 2)
  (Control.Monad.ST.Internal.run {#- Rewrite - Inline -#}
  let v0 =
    (refNew 1);
  letEffect nRef@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (refNew 2);
  letEffect mRef@v3 =
    v2;
  letEffect n@v4 =
    (refRead nRef@v1);
  letEffect m@v5 =
    (refRead mRef@v3);
  {#- Rewrite - Inline -#}
  let v6 =
    (add n@v4 m@v5);
  (effectPure v6))
---------------
Snapshot.STRun01.test3 (Step 3; Final)
  (Control.Monad.ST.Internal.run letEffect nRef@v0 =
    (refNew 1);
  letEffect mRef@v1 =
    (refNew 2);
  letEffect n@v2 =
    (refRead nRef@v0);
  letEffect m@v3 =
    (refRead mRef@v1);
  (effectPure (add n@v2 m@v3)))