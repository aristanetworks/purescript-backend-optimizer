Snapshot.RecursiveBindingGroup02.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordInt)
---------------
Snapshot.RecursiveBindingGroup02.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> ((lt a1@v0) a2@v1))

===============

Snapshot.RecursiveBindingGroup02.test (Step 0; Original)
  letRec-0 test3@v0 =
    (\n@v1 ->
      -- Inline v2
      let v2 = n@v1;
      -- Inline v3
      let v3 = (\n1@v3 -> n1@v3);
      -- Inline v4
      let v4 = (\n1@v4 -> test1@v0.bar);
      -- Inline n1@v5
      let n1@v5 = v2;
      if ((Snapshot.RecursiveBindingGroup02.lessThan n1@v5) 100) then
        (v3 n1@v5)
      else if Data.Boolean.otherwise then
        (v4 n1@v5)
      else
        <PatternMatchFailure>
    );
  letRec-0 test2@v0 = { baz: ((\v@v1 -> test1@v0.bar) Data.Unit.unit) };
  letRec-0 test1@v0 =
    { foo:
        ((\v@v1 -> test2@v0.baz) Data.Unit.unit)
    , bar:
        ((\v@v1 -> (test3@v0 42)) Data.Unit.unit)
    };
  test1@v0.bar
---------------
Snapshot.RecursiveBindingGroup02.test (Step 1)
  letRec-0 test3@v0 =
    (\n@v1 ->
      if -- Inline v2
      let v2 = 100;
      ((lt n@v1) v2) then
        n@v1
      else
        test1@v0.bar
    );
  letRec-0 test2@v0 =
    { baz:
        -- Inline v1
        let v1 = <PrimUndefined>;
        test1@v0.bar
    };
  letRec-0 test1@v0 =
    { foo:
        -- Inline v1
        let v1 = <PrimUndefined>;
        test2@v0.baz
    , bar:
        -- Inline v1
        let v1 = <PrimUndefined>;
        (test3@v0 42)
    };
  test1@v0.bar
---------------
Snapshot.RecursiveBindingGroup02.test (Step 2; Final)
  letRec-0 test3@v0 = (\n@v1 -> if ((lt n@v1) 100) then n@v1 else test1@v0.bar);
  letRec-0 test2@v0 = { baz: test1@v0.bar };
  letRec-0 test1@v0 = { foo: test2@v0.baz, bar: (test3@v0 42) };
  test1@v0.bar