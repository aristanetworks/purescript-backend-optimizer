Snapshot.CaseRecord.greaterThan (Step 0; Original)
  (Data.Ord.greaterThan Data.Ord.ordInt)
---------------
Snapshot.CaseRecord.greaterThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> ((gt a1@v0) a2@v1))

===============

Snapshot.CaseRecord.test1 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\-> "0");
    -- Inline v3
    let v3 = (\-> "1");
    -- Inline v4
    let v4 = (\-> "2");
    -- Inline v5
    let v5 = (\-> "3");
    -- Inline v6
    let v6 = (\-> "catch");
    -- Inline v7
    let v7 = v1.a;
    -- Inline v8
    let v8 = v1.b;
    -- Inline v9
    let v9 = v1.c;
    if ((eq v7) 1) then
      (v2!)
    else if ((eq v8) 1) then
      (v3!)
    else if ((eq v9) 1) then
      (v4!)
    else if ((eq v7) 2) then
      if ((eq v8) 2) then (v5!) else (v6!)
    else
      (v6!)
  )
---------------
Snapshot.CaseRecord.test1 (Step 1; Final)
  (\v@v0 ->
    if ((eq v@v0.a) 1) then
      "0"
    else if ((eq v@v0.b) 1) then
      "1"
    else if ((eq v@v0.c) 1) then
      "2"
    else if ((eq v@v0.a) 2) then
      if ((eq v@v0.b) 2) then "3" else "catch"
    else
      "catch"
  )

===============

Snapshot.CaseRecord.test2 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\-> 1);
    -- Inline v3
    let v3 = (\-> 2);
    -- Inline v4
    let v4 = (\-> 3);
    -- Inline v5
    let v5 = (\-> 4);
    -- Inline v6
    let v6 = v1.a;
    -- Inline v7
    let v7 = v1.d;
    -- Inline v8
    let v8 = v6.b;
    -- Inline v9
    let v9 = v6.c;
    -- Inline v10
    let v10 = v7.e;
    -- Inline v11
    let v11 = v7.f;
    if ((eq v9) 2) then
      if ((eq v10) 1) then
        if ((eq v11) 2) then
          if ((eq v8) 1) then (v2!) else (v3!)
        else if ((eq v8) 1) then
          (v4!)
        else
          (v5!)
      else if ((eq v8) 1) then
        (v4!)
      else
        (v5!)
    else
      (v5!)
  )
---------------
Snapshot.CaseRecord.test2 (Step 1; Final)
  (\v@v0 ->
    if ((eq v@v0.a.c) 2) then
      if ((eq v@v0.d.e) 1) then
        if ((eq v@v0.d.f) 2) then
          if ((eq v@v0.a.b) 1) then 1 else 2
        else if ((eq v@v0.a.b) 1) then
          3
        else
          4
      else if ((eq v@v0.a.b) 1) then
        3
      else
        4
    else
      4
  )

===============

Snapshot.CaseRecord.test3 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\a@v2 -> a@v2);
    -- Inline v3
    let v3 = (\b@v3 -> b@v3);
    -- Inline v4
    let v4 = (\-> 3);
    -- Inline v5
    let v5 = v1.a;
    -- Inline v6
    let v6 = v1.b;
    -- Inline a@v7
    let a@v7 = v5;
    if ((Snapshot.CaseRecord.greaterThan a@v7) 0) then
      (v2 a@v7)
    else
      -- Inline b@v8
      let b@v8 = v6;
      if ((Snapshot.CaseRecord.greaterThan b@v8) 1) then (v3 b@v8) else (v4!)
  )
---------------
Snapshot.CaseRecord.test3 (Step 1)
  (\v@v0 ->
    if let v1 = v@v0.a;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.a;
      v1
    else if let v1 = v@v0.b;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 1) then
      -- Inline v1
      let v1 = v@v0.b;
      v1
    else
      3
  )
---------------
Snapshot.CaseRecord.test3 (Step 2)
  (\v@v0 ->
    if -- Inline v1
    let v1 = v@v0.a;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.a
    else if -- Inline v1
    let v1 = v@v0.b;
    -- Inline v2
    let v2 = 1;
    ((gt v1) v2) then
      v@v0.b
    else
      3
  )
---------------
Snapshot.CaseRecord.test3 (Step 3; Final)
  (\v@v0 ->
    if ((gt v@v0.a) 0) then
      v@v0.a
    else if ((gt v@v0.b) 1) then
      v@v0.b
    else
      3
  )

===============

Snapshot.CaseRecord.test4 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\a@v2 -> a@v2);
    -- Inline v3
    let v3 = (\b@v3 -> b@v3);
    -- Inline v4
    let v4 = (\-> 3);
    -- Inline v5
    let v5 = v1.a;
    -- Inline v6
    let v6 = v1.b;
    -- Inline a@v7
    let a@v7 = v5;
    if ((Snapshot.CaseRecord.greaterThan a@v7) 0) then
      (v2 a@v7)
    else
      -- Inline b@v8
      let b@v8 = v6;
      if ((Snapshot.CaseRecord.greaterThan b@v8) 1) then (v3 b@v8) else (v4!)
  )
---------------
Snapshot.CaseRecord.test4 (Step 1)
  (\v@v0 ->
    if let v1 = v@v0.a;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.a;
      v1
    else if let v1 = v@v0.b;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 1) then
      -- Inline v1
      let v1 = v@v0.b;
      v1
    else
      3
  )
---------------
Snapshot.CaseRecord.test4 (Step 2)
  (\v@v0 ->
    if -- Inline v1
    let v1 = v@v0.a;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.a
    else if -- Inline v1
    let v1 = v@v0.b;
    -- Inline v2
    let v2 = 1;
    ((gt v1) v2) then
      v@v0.b
    else
      3
  )
---------------
Snapshot.CaseRecord.test4 (Step 3; Final)
  (\v@v0 ->
    if ((gt v@v0.a) 0) then
      v@v0.a
    else if ((gt v@v0.b) 1) then
      v@v0.b
    else
      3
  )

===============

Snapshot.CaseRecord.test5 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\a@v2 -> a@v2);
    -- Inline v3
    let v3 = (\b@v3 -> b@v3);
    -- Inline v4
    let v4 = (\-> 0);
    -- Inline v5
    let v5 = v1.a;
    -- Inline v6
    let v6 = v1.b;
    -- Inline a@v7
    let a@v7 = v5;
    if ((Snapshot.CaseRecord.greaterThan a@v7) 0) then
      (v2 a@v7)
    else
      -- Inline b@v8
      let b@v8 = v6;
      if ((Snapshot.CaseRecord.greaterThan b@v8) 0) then (v3 b@v8) else (v4!)
  )
---------------
Snapshot.CaseRecord.test5 (Step 1)
  (\v@v0 ->
    if let v1 = v@v0.a;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.a;
      v1
    else if let v1 = v@v0.b;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.b;
      v1
    else
      0
  )
---------------
Snapshot.CaseRecord.test5 (Step 2)
  (\v@v0 ->
    if -- Inline v1
    let v1 = v@v0.a;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.a
    else if -- Inline v1
    let v1 = v@v0.b;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.b
    else
      0
  )
---------------
Snapshot.CaseRecord.test5 (Step 3; Final)
  (\v@v0 ->
    if ((gt v@v0.a) 0) then
      v@v0.a
    else if ((gt v@v0.b) 0) then
      v@v0.b
    else
      0
  )

===============

Snapshot.CaseRecord.test6 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\a@v2 b@v3 -> a@v2);
    -- Inline v3
    let v3 = (\a@v3 b@v4 -> b@v4);
    -- Inline v4
    let v4 = (\-> 0);
    -- Inline v5
    let v5 = v1.a;
    -- Inline v6
    let v6 = v1.b;
    -- Inline a@v7
    let a@v7 = v5;
    -- Inline b@v8
    let b@v8 = v6;
    if ((Snapshot.CaseRecord.greaterThan a@v7) 0) then
      (v2 a@v7 b@v8)
    else if ((Snapshot.CaseRecord.greaterThan b@v8) 0) then
      (v3 a@v7 b@v8)
    else
      (v4!)
  )
---------------
Snapshot.CaseRecord.test6 (Step 1)
  (\v@v0 ->
    if let v1 = v@v0.a;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.a;
      -- Inline v2
      let v2 = v@v0.b;
      v1
    else if let v1 = v@v0.b;
    -- Inline v2
    let v2 = (\a2@v2 -> ((gt v1) a2@v2));
    (v2 0) then
      -- Inline v1
      let v1 = v@v0.a;
      -- Inline v2
      let v2 = v@v0.b;
      v2
    else
      0
  )
---------------
Snapshot.CaseRecord.test6 (Step 2)
  (\v@v0 ->
    if -- Inline v1
    let v1 = v@v0.a;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.a
    else if -- Inline v1
    let v1 = v@v0.b;
    -- Inline v2
    let v2 = 0;
    ((gt v1) v2) then
      v@v0.b
    else
      0
  )
---------------
Snapshot.CaseRecord.test6 (Step 3; Final)
  (\v@v0 ->
    if ((gt v@v0.a) 0) then
      v@v0.a
    else if ((gt v@v0.b) 0) then
      v@v0.b
    else
      0
  )