Snapshot.ProfunctorLenses02._Left (Step 0; Original)
  (Data.Lens.Prism.Either._Left Snapshot.ProfunctorLenses02.choiceForget)
---------------
Snapshot.ProfunctorLenses02._Left (Step 1; Final)
  (
    Snapshot.ProfunctorLenses02.choiceForget
  ).left

===============

Snapshot.ProfunctorLenses02._Right (Step 0; Original)
  (Data.Lens.Prism.Either._Right Snapshot.ProfunctorLenses02.choiceForget)
---------------
Snapshot.ProfunctorLenses02._Right (Step 1; Final)
  (
    Snapshot.ProfunctorLenses02.choiceForget
  ).right

===============

Snapshot.ProfunctorLenses02.choiceForget (Step 0; Original)
  (Data.Lens.Internal.Forget.choiceForget Data.Maybe.First.monoidFirst)
---------------
Snapshot.ProfunctorLenses02.choiceForget (Step 1; Final)
  (Data.Lens.Internal.Forget.choiceForget Data.Maybe.First.monoidFirst)

===============

Snapshot.ProfunctorLenses02.compose (Step 0; Original)
  (Control.Semigroupoid.compose Control.Semigroupoid.semigroupoidFn)
---------------
Snapshot.ProfunctorLenses02.compose (Step 1; Final)
  (
    Control.Semigroupoid.semigroupoidFn
  ).compose

===============

Snapshot.ProfunctorLenses02.test1 (Step 0; Original)
  (Data.Lens.Fold.preview Snapshot.ProfunctorLenses02._Left)
---------------
Snapshot.ProfunctorLenses02.test1 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (
      Snapshot.ProfunctorLenses02.choiceForget
    ).left;
  {#- Rewrite - Inline -#}
  let v1 =
    (v0 (\x@v1 -> 
      (Data.Maybe.Just.Maybe x@v1)
    ));
  v1
---------------
Snapshot.ProfunctorLenses02.test1 (Step 2)
  {#- Rewrite - Inline -#}
  let mempty1@v0 =
    Data.Maybe.Nothing;
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          {#- Rewrite - Inline -#}
          let v1 =
            { left =
                (\v@v1 -> \v2@v2 -> 
                  if (isTag Data.Either.Left v2@v2) then
                    (v@v1 (
                      v2@v2
                    )#value0)
                  else if (isTag Data.Either.Right v2@v2) then
                    mempty1@v0
                  else
                    <PatternMatchFailure>
                )
            , right =
                (\v@v1 -> \v2@v2 -> 
                  if (isTag Data.Either.Left v2@v2) then
                    mempty1@v0
                  else if (isTag Data.Either.Right v2@v2) then
                    (v@v1 (
                      v2@v2
                    )#value0)
                  else
                    <PatternMatchFailure>
                )
            , Profunctor0 =
                (\$__unused@v1 -> 
                  Data.Lens.Internal.Forget.profunctorForget
                )
            };
          v1;
        (
          v1
        ).left;
      (v1 (\x@v2 -> 
        (Data.Maybe.Just.Maybe x@v2)
      ));
    v1;
  v1
---------------
Snapshot.ProfunctorLenses02.test1 (Step 3)
  {#- Rewrite - Inline -#}
  let v0 =
    (\x@v0 -> 
      (Data.Maybe.Just.Maybe x@v0)
    );
  (\v2@v1 -> 
    if (isTag Data.Either.Left v2@v1) then
      (v0 (
        v2@v1
      )#value0)
    else if (isTag Data.Either.Right v2@v1) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test1 (Step 4)
  (\v2@v0 -> 
    if (isTag Data.Either.Left v2@v0) then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          v2@v0
        )#value0;
      (Data.Maybe.Just.Maybe v1)
    else if (isTag Data.Either.Right v2@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test1 (Step 5; Final)
  (\v2@v0 -> 
    if (isTag Data.Either.Left v2@v0) then
      (Data.Maybe.Just.Maybe (
        v2@v0
      )#value0)
    else if (isTag Data.Either.Right v2@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )

===============

Snapshot.ProfunctorLenses02.test2 (Step 0; Original)
  (\a@v0 -> 
    ((Data.Lens.Fold.preview Snapshot.ProfunctorLenses02._Left) a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test2 (Step 1)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      (
        Snapshot.ProfunctorLenses02.choiceForget
      ).left;
    {#- Rewrite - Inline -#}
    let v2 =
      (v1 (\x@v2 -> 
        (Data.Maybe.Just.Maybe x@v2)
      ));
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test2 (Step 2)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let mempty1@v1 =
      Data.Maybe.Nothing;
    {#- Rewrite - Inline -#}
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              {#- Rewrite - Inline -#}
              let v2 =
                { left =
                    (\v@v2 -> \v2@v3 -> 
                      if (isTag Data.Either.Left v2@v3) then
                        (v@v2 (
                          v2@v3
                        )#value0)
                      else if (isTag Data.Either.Right v2@v3) then
                        mempty1@v1
                      else
                        <PatternMatchFailure>
                    )
                , right =
                    (\v@v2 -> \v2@v3 -> 
                      if (isTag Data.Either.Left v2@v3) then
                        mempty1@v1
                      else if (isTag Data.Either.Right v2@v3) then
                        (v@v2 (
                          v2@v3
                        )#value0)
                      else
                        <PatternMatchFailure>
                    )
                , Profunctor0 =
                    (\$__unused@v2 -> 
                      Data.Lens.Internal.Forget.profunctorForget
                    )
                };
              v2;
            (
              v2
            ).left;
          (v2 (\x@v3 -> 
            (Data.Maybe.Just.Maybe x@v3)
          ));
        v2;
      v2;
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test2 (Step 3)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      (\x@v1 -> 
        (Data.Maybe.Just.Maybe x@v1)
      );
    {#- Rewrite - Inline -#}
    let v2 =
      (\v2@v2 -> 
        if (isTag Data.Either.Left v2@v2) then
          (v1 (
            v2@v2
          )#value0)
        else if (isTag Data.Either.Right v2@v2) then
          Data.Maybe.Nothing
        else
          <PatternMatchFailure>
      );
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test2 (Step 4)
  (\a@v0 -> 
    if (isTag Data.Either.Left a@v0) then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          a@v0
        )#value0;
      (Data.Maybe.Just.Maybe v1)
    else if (isTag Data.Either.Right a@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test2 (Step 5; Final)
  (\a@v0 -> 
    if (isTag Data.Either.Left a@v0) then
      (Data.Maybe.Just.Maybe (
        a@v0
      )#value0)
    else if (isTag Data.Either.Right a@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )

===============

Snapshot.ProfunctorLenses02.test3 (Step 0; Original)
  (Data.Lens.Fold.preview ((Snapshot.ProfunctorLenses02.compose Snapshot.ProfunctorLenses02._Left) Snapshot.ProfunctorLenses02._Right))
---------------
Snapshot.ProfunctorLenses02.test3 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      (
        Snapshot.ProfunctorLenses02.choiceForget
      ).left;
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (
          Snapshot.ProfunctorLenses02.choiceForget
        ).right;
      (\x@v2 -> 
        (v0 (v1 x@v2))
      );
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    (v0 (\x@v1 -> 
      (Data.Maybe.Just.Maybe x@v1)
    ));
  v1
---------------
Snapshot.ProfunctorLenses02.test3 (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    (\x@v0 -> 
      (Data.Maybe.Just.Maybe x@v0)
    );
  {#- Rewrite - Inline -#}
  let mempty1@v1 =
    Data.Maybe.Nothing;
  {#- Rewrite - Inline -#}
  let v2 =
    {#- Rewrite - Inline -#}
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          {#- Rewrite - Inline -#}
          let v2 =
            {#- Rewrite - Inline -#}
            let v2 =
              { left =
                  (\v@v2 -> \v2@v3 -> 
                    if (isTag Data.Either.Left v2@v3) then
                      (v@v2 (
                        v2@v3
                      )#value0)
                    else if (isTag Data.Either.Right v2@v3) then
                      mempty1@v1
                    else
                      <PatternMatchFailure>
                  )
              , right =
                  (\v@v2 -> \v2@v3 -> 
                    if (isTag Data.Either.Left v2@v3) then
                      mempty1@v1
                    else if (isTag Data.Either.Right v2@v3) then
                      (v@v2 (
                        v2@v3
                      )#value0)
                    else
                      <PatternMatchFailure>
                  )
              , Profunctor0 =
                  (\$__unused@v2 -> 
                    Data.Lens.Internal.Forget.profunctorForget
                  )
              };
            v2;
          (
            v2
          ).left;
        (v2 {#- Rewrite - Inline -#}
        let mempty1@v3 =
          Data.Maybe.Nothing;
        {#- Rewrite - Inline -#}
        let v4 =
          {#- Rewrite - Inline -#}
          let v4 =
            {#- Rewrite - Inline -#}
            let v4 =
              {#- Rewrite - Inline -#}
              let v4 =
                {#- Rewrite - Inline -#}
                let v4 =
                  { left =
                      (\v@v4 -> \v2@v5 -> 
                        if (isTag Data.Either.Left v2@v5) then
                          (v@v4 (
                            v2@v5
                          )#value0)
                        else if (isTag Data.Either.Right v2@v5) then
                          mempty1@v3
                        else
                          <PatternMatchFailure>
                      )
                  , right =
                      (\v@v4 -> \v2@v5 -> 
                        if (isTag Data.Either.Left v2@v5) then
                          mempty1@v3
                        else if (isTag Data.Either.Right v2@v5) then
                          (v@v4 (
                            v2@v5
                          )#value0)
                        else
                          <PatternMatchFailure>
                      )
                  , Profunctor0 =
                      (\$__unused@v4 -> 
                        Data.Lens.Internal.Forget.profunctorForget
                      )
                  };
                v4;
              (
                v4
              ).right;
            (v4 v0);
          v4;
        v4);
      v2;
    v2;
  v2
---------------
Snapshot.ProfunctorLenses02.test3 (Step 3)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      (\x@v0 -> 
        (Data.Maybe.Just.Maybe x@v0)
      );
    (\v2@v1 -> 
      if (isTag Data.Either.Left v2@v1) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right v2@v1) then
        (v0 (
          v2@v1
        )#value0)
      else
        <PatternMatchFailure>
    );
  (\v2@v1 -> 
    if (isTag Data.Either.Left v2@v1) then
      (v0 (
        v2@v1
      )#value0)
    else if (isTag Data.Either.Right v2@v1) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test3 (Step 4)
  {#- Rewrite - Inline -#}
  let v0 =
    (\v2@v0 -> 
      if (isTag Data.Either.Left v2@v0) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right v2@v0) then
        {#- Rewrite - Inline -#}
        let v1 =
          (
            v2@v0
          )#value0;
        (Data.Maybe.Just.Maybe v1)
      else
        <PatternMatchFailure>
    );
  (\v2@v1 -> 
    if (isTag Data.Either.Left v2@v1) then
      (v0 (
        v2@v1
      )#value0)
    else if (isTag Data.Either.Right v2@v1) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test3 (Step 5)
  (\v2@v0 -> 
    if (isTag Data.Either.Left v2@v0) then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          v2@v0
        )#value0;
      if (isTag Data.Either.Left v1) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right v1) then
        (Data.Maybe.Just.Maybe (
          v1
        )#value0)
      else
        <PatternMatchFailure>
    else if (isTag Data.Either.Right v2@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test3 (Step 6; Final)
  (\v2@v0 -> 
    if (isTag Data.Either.Left v2@v0) then
      if (isTag Data.Either.Left (
          v2@v0
        )#value0) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right (
          v2@v0
        )#value0) then
        (Data.Maybe.Just.Maybe (
          (
            v2@v0
          )#value0
        )#value0)
      else
        <PatternMatchFailure>
    else if (isTag Data.Either.Right v2@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )

===============

Snapshot.ProfunctorLenses02.test4 (Step 0; Original)
  (\a@v0 -> 
    ((Data.Lens.Fold.preview ((Snapshot.ProfunctorLenses02.compose Snapshot.ProfunctorLenses02._Left) Snapshot.ProfunctorLenses02._Right)) a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 1)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (
          Snapshot.ProfunctorLenses02.choiceForget
        ).left;
      {#- Rewrite - Inline -#}
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          (
            Snapshot.ProfunctorLenses02.choiceForget
          ).right;
        (\x@v3 -> 
          (v1 (v2 x@v3))
        );
      v2;
    {#- Rewrite - Inline -#}
    let v2 =
      (v1 (\x@v2 -> 
        (Data.Maybe.Just.Maybe x@v2)
      ));
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 2)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      (\x@v1 -> 
        (Data.Maybe.Just.Maybe x@v1)
      );
    {#- Rewrite - Inline -#}
    let v2 =
      {#- Rewrite - Inline -#}
      let mempty1@v2 =
        Data.Maybe.Nothing;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          {#- Rewrite - Inline -#}
          let v3 =
            {#- Rewrite - Inline -#}
            let v3 =
              {#- Rewrite - Inline -#}
              let v3 =
                {#- Rewrite - Inline -#}
                let v3 =
                  { left =
                      (\v@v3 -> \v2@v4 -> 
                        if (isTag Data.Either.Left v2@v4) then
                          (v@v3 (
                            v2@v4
                          )#value0)
                        else if (isTag Data.Either.Right v2@v4) then
                          mempty1@v2
                        else
                          <PatternMatchFailure>
                      )
                  , right =
                      (\v@v3 -> \v2@v4 -> 
                        if (isTag Data.Either.Left v2@v4) then
                          mempty1@v2
                        else if (isTag Data.Either.Right v2@v4) then
                          (v@v3 (
                            v2@v4
                          )#value0)
                        else
                          <PatternMatchFailure>
                      )
                  , Profunctor0 =
                      (\$__unused@v3 -> 
                        Data.Lens.Internal.Forget.profunctorForget
                      )
                  };
                v3;
              (
                v3
              ).left;
            (v3 {#- Rewrite - Inline -#}
            let mempty1@v4 =
              Data.Maybe.Nothing;
            {#- Rewrite - Inline -#}
            let v5 =
              {#- Rewrite - Inline -#}
              let v5 =
                {#- Rewrite - Inline -#}
                let v5 =
                  {#- Rewrite - Inline -#}
                  let v5 =
                    {#- Rewrite - Inline -#}
                    let v5 =
                      { left =
                          (\v@v5 -> \v2@v6 -> 
                            if (isTag Data.Either.Left v2@v6) then
                              (v@v5 (
                                v2@v6
                              )#value0)
                            else if (isTag Data.Either.Right v2@v6) then
                              mempty1@v4
                            else
                              <PatternMatchFailure>
                          )
                      , right =
                          (\v@v5 -> \v2@v6 -> 
                            if (isTag Data.Either.Left v2@v6) then
                              mempty1@v4
                            else if (isTag Data.Either.Right v2@v6) then
                              (v@v5 (
                                v2@v6
                              )#value0)
                            else
                              <PatternMatchFailure>
                          )
                      , Profunctor0 =
                          (\$__unused@v5 -> 
                            Data.Lens.Internal.Forget.profunctorForget
                          )
                      };
                    v5;
                  (
                    v5
                  ).right;
                (v5 v1);
              v5;
            v5);
          v3;
        v3;
      v3;
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 3)
  (\a@v0 -> 
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\x@v1 -> 
          (Data.Maybe.Just.Maybe x@v1)
        );
      (\v2@v2 -> 
        if (isTag Data.Either.Left v2@v2) then
          Data.Maybe.Nothing
        else if (isTag Data.Either.Right v2@v2) then
          (v1 (
            v2@v2
          )#value0)
        else
          <PatternMatchFailure>
      );
    {#- Rewrite - Inline -#}
    let v2 =
      (\v2@v2 -> 
        if (isTag Data.Either.Left v2@v2) then
          (v1 (
            v2@v2
          )#value0)
        else if (isTag Data.Either.Right v2@v2) then
          Data.Maybe.Nothing
        else
          <PatternMatchFailure>
      );
    (v2 a@v0)
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 4)
  (\a@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      (\v2@v1 -> 
        if (isTag Data.Either.Left v2@v1) then
          Data.Maybe.Nothing
        else if (isTag Data.Either.Right v2@v1) then
          {#- Rewrite - Inline -#}
          let v2 =
            (
              v2@v1
            )#value0;
          (Data.Maybe.Just.Maybe v2)
        else
          <PatternMatchFailure>
      );
    if (isTag Data.Either.Left a@v0) then
      (v1 (
        a@v0
      )#value0)
    else if (isTag Data.Either.Right a@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 5)
  (\a@v0 -> 
    if (isTag Data.Either.Left a@v0) then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          a@v0
        )#value0;
      if (isTag Data.Either.Left v1) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right v1) then
        (Data.Maybe.Just.Maybe (
          v1
        )#value0)
      else
        <PatternMatchFailure>
    else if (isTag Data.Either.Right a@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.ProfunctorLenses02.test4 (Step 6; Final)
  (\a@v0 -> 
    if (isTag Data.Either.Left a@v0) then
      if (isTag Data.Either.Left (
          a@v0
        )#value0) then
        Data.Maybe.Nothing
      else if (isTag Data.Either.Right (
          a@v0
        )#value0) then
        (Data.Maybe.Just.Maybe (
          (
            a@v0
          )#value0
        )#value0)
      else
        <PatternMatchFailure>
    else if (isTag Data.Either.Right a@v0) then
      Data.Maybe.Nothing
    else
      <PatternMatchFailure>
  )