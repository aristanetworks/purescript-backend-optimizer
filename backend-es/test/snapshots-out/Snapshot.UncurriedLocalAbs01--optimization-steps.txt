Snapshot.UncurriedLocalAbs01.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.UncurriedLocalAbs01.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.UncurriedLocalAbs01.sum (Step 0; Original)
  ((Data.Foldable.sum Data.Foldable.foldableArray) Data.Semiring.semiringInt)
---------------
Snapshot.UncurriedLocalAbs01.sum (Step 1; Final)
  ((Data.Foldable.foldlArray Data.Semiring.intAdd) 0)

===============

Snapshot.UncurriedLocalAbs01.test (Step 0; Original)
  (\x@v0 -> \y@v1 -> 
    {#- Rewrite - Uncurry -#}
    let fn@v2 =
      \a@v2 b@v3->
        (Snapshot.UncurriedLocalAbs01.sum [
          x@v0,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
        ]);
    ((Snapshot.UncurriedLocalAbs01.add ((fn@v2 x@v0) y@v1)) ((fn@v2 y@v1) x@v0))
  )
---------------
Snapshot.UncurriedLocalAbs01.test (Step 1)
  (\x@v0 -> \y@v1 -> 
    let fn@v2 =
      (\a@v2 b@v3 ->
        (Snapshot.UncurriedLocalAbs01.sum [
          x@v0,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
        ])
      );
    let v3 =
      (fn@v2 x@v0 y@v1);
    {#- Rewrite - Inline -#}
    let v4 =
      (\v4 -> 
        (add v3 v4)
      );
    (v4 (fn@v2 y@v1 x@v0))
  )
---------------
Snapshot.UncurriedLocalAbs01.test (Step 2)
  (\x@v0 -> \y@v1 -> 
    let fn@v2 =
      (\a@v2 b@v3 ->
        (Snapshot.UncurriedLocalAbs01.sum [
          x@v0,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
        ])
      );
    {#- Rewrite - Inline -#}
    let v3 =
      (fn@v2 x@v0 y@v1);
    {#- Rewrite - Inline -#}
    let v4 =
      (fn@v2 y@v1 x@v0);
    (add v3 v4)
  )
---------------
Snapshot.UncurriedLocalAbs01.test (Step 3; Final)
  (\x@v0 -> \y@v1 -> 
    let fn@v2 =
      (\a@v2 b@v3 ->
        (Snapshot.UncurriedLocalAbs01.sum [
          x@v0,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
          a@v2,
          b@v3,
        ])
      );
    (add (fn@v2 x@v0 y@v1) (fn@v2 y@v1 x@v0))
  )