Snapshot.EffectMonadEffect01.bind (Step 0; Original)
  (Control.Bind.bind Effect.bindEffect)
---------------
Snapshot.EffectMonadEffect01.bind (Step 1; Final)
  Effect.bindE
===============
Snapshot.EffectMonadEffect01.bindCalls (Step 0; Original)
  (\dictMonadEffect@v0 -> 
    let bind1@v1 =
      (Control.Bind.bind ((
        ((
          dictMonadEffect@v0
        ).Monad0 <PrimUndefined>)
      ).Bind1 <PrimUndefined>));
    {#- Rewrite - Inline -#}
    let logShow1@v2 =
      ((Effect.Class.Console.logShow dictMonadEffect@v0) Data.Show.showInt);
    {#- Rewrite - Inline -#}
    let warn1@v3 =
      (Effect.Class.Console.warn dictMonadEffect@v0);
    {#- Rewrite - Inline -#}
    let warnShow1@v4 =
      ((Effect.Class.Console.warnShow dictMonadEffect@v0) Data.Show.showInt);
    let clear1@v5 =
      (Effect.Class.Console.clear dictMonadEffect@v0);
    ((bind1@v1 ((Effect.Class.Console.log dictMonadEffect@v0) "hello")) (\$__unused@v6 -> 
      ((bind1@v1 (logShow1@v2 1)) (\$__unused@v7 -> 
        ((bind1@v1 (warn1@v3 "hello")) (\$__unused@v8 -> 
          ((bind1@v1 (warnShow1@v4 1)) (\$__unused@v9 -> 
            clear1@v5
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.EffectMonadEffect01.bindCalls (Step 1)
  (\dictMonadEffect@v0 -> 
    let bind1@v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        ((
          ((
            dictMonadEffect@v0
          ).Monad0 <PrimUndefined>)
        ).Bind1 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let v2 =
        (
          v1
        ).bind;
      v2;
    let clear1@v2 =
      ((
        dictMonadEffect@v0
      ).liftEffect Effect.Console.clear);
    ((bind1@v1 {#- Rewrite - Inline -#}
    let v3 =
      "hello";
    {#- Rewrite - Inline -#}
    let v4 =
      ((
        dictMonadEffect@v0
      ).liftEffect (Effect.Console.log v3));
    v4) (\$__unused@v3 -> 
      ((bind1@v1 {#- Rewrite - Inline -#}
      let v4 =
        1;
      {#- Rewrite - Inline -#}
      let v5 =
        ((
          dictMonadEffect@v0
        ).liftEffect (Effect.Console.log (Data.Show.showIntImpl v4)));
      v5) (\$__unused@v4 -> 
        ((bind1@v1 {#- Rewrite - Inline -#}
        let v5 =
          "hello";
        {#- Rewrite - Inline -#}
        let v6 =
          ((
            dictMonadEffect@v0
          ).liftEffect (Effect.Console.warn v5));
        v6) (\$__unused@v5 -> 
          ((bind1@v1 {#- Rewrite - Inline -#}
          let v6 =
            1;
          {#- Rewrite - Inline -#}
          let v7 =
            ((
              dictMonadEffect@v0
            ).liftEffect (Effect.Console.warn (Data.Show.showIntImpl v6)));
          v7) (\$__unused@v6 -> 
            clear1@v2
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.EffectMonadEffect01.bindCalls (Step 2; Final)
  (\dictMonadEffect@v0 -> 
    let bind1@v1 =
      (
        ((
          ((
            dictMonadEffect@v0
          ).Monad0 <PrimUndefined>)
        ).Bind1 <PrimUndefined>)
      ).bind;
    let clear1@v2 =
      ((
        dictMonadEffect@v0
      ).liftEffect Effect.Console.clear);
    ((bind1@v1 ((
      dictMonadEffect@v0
    ).liftEffect (Effect.Console.log "hello"))) (\$__unused@v3 -> 
      ((bind1@v1 ((
        dictMonadEffect@v0
      ).liftEffect (Effect.Console.log "1"))) (\$__unused@v4 -> 
        ((bind1@v1 ((
          dictMonadEffect@v0
        ).liftEffect (Effect.Console.warn "hello"))) (\$__unused@v5 -> 
          ((bind1@v1 ((
            dictMonadEffect@v0
          ).liftEffect (Effect.Console.warn "1"))) (\$__unused@v6 -> 
            clear1@v2
          ))
        ))
      ))
    ))
  )
===============
Snapshot.EffectMonadEffect01.clear (Step 0; Original)
  (Effect.Class.Console.clear Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectMonadEffect01.clear (Step 1; Final)
  Effect.Console.clear
===============
Snapshot.EffectMonadEffect01.discard (Step 0; Original)
  (Control.Bind.discard Control.Bind.discardUnit)
---------------
Snapshot.EffectMonadEffect01.discard (Step 1; Final)
  (
    Control.Bind.discardUnit
  ).discard
===============
Snapshot.EffectMonadEffect01.discard1 (Step 0; Original)
  (Snapshot.EffectMonadEffect01.discard Effect.bindEffect)
---------------
Snapshot.EffectMonadEffect01.discard1 (Step 1; Final)
  Effect.bindE
===============
Snapshot.EffectMonadEffect01.discardCalls (Step 0; Original)
  (\dictMonadEffect@v0 -> 
    let discard2@v1 =
      (Snapshot.EffectMonadEffect01.discard ((
        ((
          dictMonadEffect@v0
        ).Monad0 <PrimUndefined>)
      ).Bind1 <PrimUndefined>));
    {#- Rewrite - Inline -#}
    let logShow1@v2 =
      ((Effect.Class.Console.logShow dictMonadEffect@v0) Data.Show.showInt);
    {#- Rewrite - Inline -#}
    let warn1@v3 =
      (Effect.Class.Console.warn dictMonadEffect@v0);
    {#- Rewrite - Inline -#}
    let warnShow1@v4 =
      ((Effect.Class.Console.warnShow dictMonadEffect@v0) Data.Show.showInt);
    let clear1@v5 =
      (Effect.Class.Console.clear dictMonadEffect@v0);
    ((discard2@v1 ((Effect.Class.Console.log dictMonadEffect@v0) "hello")) (\$__unused@v6 -> 
      ((discard2@v1 (logShow1@v2 1)) (\$__unused@v7 -> 
        ((discard2@v1 (warn1@v3 "hello")) (\$__unused@v8 -> 
          ((discard2@v1 (warnShow1@v4 1)) (\$__unused@v9 -> 
            clear1@v5
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.EffectMonadEffect01.discardCalls (Step 1)
  (\dictMonadEffect@v0 -> 
    let discard2@v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        ((
          ((
            dictMonadEffect@v0
          ).Monad0 <PrimUndefined>)
        ).Bind1 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let v2 =
        (
          v1
        ).bind;
      v2;
    let clear1@v2 =
      ((
        dictMonadEffect@v0
      ).liftEffect Effect.Console.clear);
    ((discard2@v1 {#- Rewrite - Inline -#}
    let v3 =
      "hello";
    {#- Rewrite - Inline -#}
    let v4 =
      ((
        dictMonadEffect@v0
      ).liftEffect (Effect.Console.log v3));
    v4) (\$__unused@v3 -> 
      ((discard2@v1 {#- Rewrite - Inline -#}
      let v4 =
        1;
      {#- Rewrite - Inline -#}
      let v5 =
        ((
          dictMonadEffect@v0
        ).liftEffect (Effect.Console.log (Data.Show.showIntImpl v4)));
      v5) (\$__unused@v4 -> 
        ((discard2@v1 {#- Rewrite - Inline -#}
        let v5 =
          "hello";
        {#- Rewrite - Inline -#}
        let v6 =
          ((
            dictMonadEffect@v0
          ).liftEffect (Effect.Console.warn v5));
        v6) (\$__unused@v5 -> 
          ((discard2@v1 {#- Rewrite - Inline -#}
          let v6 =
            1;
          {#- Rewrite - Inline -#}
          let v7 =
            ((
              dictMonadEffect@v0
            ).liftEffect (Effect.Console.warn (Data.Show.showIntImpl v6)));
          v7) (\$__unused@v6 -> 
            clear1@v2
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.EffectMonadEffect01.discardCalls (Step 2; Final)
  (\dictMonadEffect@v0 -> 
    let discard2@v1 =
      (
        ((
          ((
            dictMonadEffect@v0
          ).Monad0 <PrimUndefined>)
        ).Bind1 <PrimUndefined>)
      ).bind;
    let clear1@v2 =
      ((
        dictMonadEffect@v0
      ).liftEffect Effect.Console.clear);
    ((discard2@v1 ((
      dictMonadEffect@v0
    ).liftEffect (Effect.Console.log "hello"))) (\$__unused@v3 -> 
      ((discard2@v1 ((
        dictMonadEffect@v0
      ).liftEffect (Effect.Console.log "1"))) (\$__unused@v4 -> 
        ((discard2@v1 ((
          dictMonadEffect@v0
        ).liftEffect (Effect.Console.warn "hello"))) (\$__unused@v5 -> 
          ((discard2@v1 ((
            dictMonadEffect@v0
          ).liftEffect (Effect.Console.warn "1"))) (\$__unused@v6 -> 
            clear1@v2
          ))
        ))
      ))
    ))
  )
===============
Snapshot.EffectMonadEffect01.log (Step 0; Original)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectMonadEffect01.log (Step 1; Final)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)
===============
Snapshot.EffectMonadEffect01.logShow (Step 0; Original)
  ((Effect.Class.Console.logShow Effect.Class.monadEffectEffect) Data.Show.showInt)
---------------
Snapshot.EffectMonadEffect01.logShow (Step 1; Final)
  ((Effect.Class.Console.logShow Effect.Class.monadEffectEffect) Data.Show.showInt)
===============
Snapshot.EffectMonadEffect01.test1 (Step 0; Original)
  (Snapshot.EffectMonadEffect01.bindCalls Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectMonadEffect01.test1 (Step 1)
  let bind1@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (
          Effect.monadEffect
        ).Bind1;
      (v1 <PrimUndefined>);
    (
      v1
    ).bind;
  {#- Rewrite - Inline -#}
  let v1 =
    ((bind1@v0 {#- Rewrite - Inline -#}
    let v1 =
      (Effect.Console.log "hello");
    v1) (\$__unused@v1 -> 
      ((bind1@v0 {#- Rewrite - Inline -#}
      let v2 =
        (Effect.Console.log "1");
      v2) (\$__unused@v2 -> 
        ((bind1@v0 {#- Rewrite - Inline -#}
        let v3 =
          (Effect.Console.warn "hello");
        v3) (\$__unused@v3 -> 
          ((bind1@v0 {#- Rewrite - Inline -#}
          let v4 =
            (Effect.Console.warn "1");
          v4) (\$__unused@v4 -> 
            Effect.Console.clear
          ))
        ))
      ))
    ));
  v1
---------------
Snapshot.EffectMonadEffect01.test1 (Step 2)
  {#- Rewrite - Inline -#}
  let bind1@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    Effect.bindE;
  ((bind1@v0 (Effect.Console.log "hello")) (\$__unused@v1 -> 
    ((bind1@v0 (Effect.Console.log "1")) (\$__unused@v2 -> 
      ((bind1@v0 (Effect.Console.warn "hello")) (\$__unused@v3 -> 
        ((bind1@v0 (Effect.Console.warn "1")) (\$__unused@v4 -> 
          Effect.Console.clear
        ))
      ))
    ))
  ))
---------------
Snapshot.EffectMonadEffect01.test1 (Step 3)
  let v0 =
    (Effect.Console.log "hello");
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect $__unused@v1 =
      v0;
    let v2 =
      (Effect.Console.log "1");
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect $__unused@v3 =
        v2;
      let v4 =
        (Effect.Console.warn "hello");
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect $__unused@v5 =
          v4;
        let v6 =
          (Effect.Console.warn "1");
        {#- Rewrite - Inline -#}
        let v7 =
          letEffect $__unused@v7 =
            v6;
          Effect.Console.clear;
        v7;
      v5;
    v3;
  v1
---------------
Snapshot.EffectMonadEffect01.test1 (Step 4)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    v2;
  {#- Rewrite - Inline -#}
  let v4 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v5 =
    v4;
  {#- Rewrite - Inline -#}
  let v6 =
    (Effect.Console.warn "1");
  letEffect $__unused@v7 =
    v6;
  Effect.Console.clear
---------------
Snapshot.EffectMonadEffect01.test1 (Step 5; Final)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  letEffect $__unused@v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v4 =
    (Effect.Console.warn "1");
  Effect.Console.clear
===============
Snapshot.EffectMonadEffect01.test2 (Step 0; Original)
  (Snapshot.EffectMonadEffect01.discardCalls Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectMonadEffect01.test2 (Step 1)
  let discard2@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (
          Effect.monadEffect
        ).Bind1;
      (v1 <PrimUndefined>);
    (
      v1
    ).bind;
  {#- Rewrite - Inline -#}
  let v1 =
    ((discard2@v0 {#- Rewrite - Inline -#}
    let v1 =
      (Effect.Console.log "hello");
    v1) (\$__unused@v1 -> 
      ((discard2@v0 {#- Rewrite - Inline -#}
      let v2 =
        (Effect.Console.log "1");
      v2) (\$__unused@v2 -> 
        ((discard2@v0 {#- Rewrite - Inline -#}
        let v3 =
          (Effect.Console.warn "hello");
        v3) (\$__unused@v3 -> 
          ((discard2@v0 {#- Rewrite - Inline -#}
          let v4 =
            (Effect.Console.warn "1");
          v4) (\$__unused@v4 -> 
            Effect.Console.clear
          ))
        ))
      ))
    ));
  v1
---------------
Snapshot.EffectMonadEffect01.test2 (Step 2)
  {#- Rewrite - Inline -#}
  let discard2@v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    Effect.bindE;
  ((discard2@v0 (Effect.Console.log "hello")) (\$__unused@v1 -> 
    ((discard2@v0 (Effect.Console.log "1")) (\$__unused@v2 -> 
      ((discard2@v0 (Effect.Console.warn "hello")) (\$__unused@v3 -> 
        ((discard2@v0 (Effect.Console.warn "1")) (\$__unused@v4 -> 
          Effect.Console.clear
        ))
      ))
    ))
  ))
---------------
Snapshot.EffectMonadEffect01.test2 (Step 3)
  let v0 =
    (Effect.Console.log "hello");
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect $__unused@v1 =
      v0;
    let v2 =
      (Effect.Console.log "1");
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect $__unused@v3 =
        v2;
      let v4 =
        (Effect.Console.warn "hello");
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect $__unused@v5 =
          v4;
        let v6 =
          (Effect.Console.warn "1");
        {#- Rewrite - Inline -#}
        let v7 =
          letEffect $__unused@v7 =
            v6;
          Effect.Console.clear;
        v7;
      v5;
    v3;
  v1
---------------
Snapshot.EffectMonadEffect01.test2 (Step 4)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    v2;
  {#- Rewrite - Inline -#}
  let v4 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v5 =
    v4;
  {#- Rewrite - Inline -#}
  let v6 =
    (Effect.Console.warn "1");
  letEffect $__unused@v7 =
    v6;
  Effect.Console.clear
---------------
Snapshot.EffectMonadEffect01.test2 (Step 5; Final)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  letEffect $__unused@v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v4 =
    (Effect.Console.warn "1");
  Effect.Console.clear
===============
Snapshot.EffectMonadEffect01.test3 (Step 0; Original)
  ((Snapshot.EffectMonadEffect01.bind (Snapshot.EffectMonadEffect01.log "hello")) (\$__unused@v0 -> 
    ((Snapshot.EffectMonadEffect01.bind (Snapshot.EffectMonadEffect01.logShow 1)) (\$__unused@v1 -> 
      ((Snapshot.EffectMonadEffect01.bind (Snapshot.EffectMonadEffect01.warn "hello")) (\$__unused@v2 -> 
        ((Snapshot.EffectMonadEffect01.bind (Snapshot.EffectMonadEffect01.warnShow 1)) (\$__unused@v3 -> 
          Snapshot.EffectMonadEffect01.clear
        ))
      ))
    ))
  ))
---------------
Snapshot.EffectMonadEffect01.test3 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      "hello";
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (Effect.Console.log v0);
      v1;
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect $__unused@v1 =
      v0;
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        1;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          (Effect.Console.log (Data.Show.showIntImpl v2));
        v3;
      v3;
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect $__unused@v3 =
        v2;
      let v4 =
        {#- Rewrite - Inline -#}
        let v4 =
          "hello";
        {#- Rewrite - Inline -#}
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            (Effect.Console.warn v4);
          v5;
        v5;
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect $__unused@v5 =
          v4;
        let v6 =
          {#- Rewrite - Inline -#}
          let v6 =
            1;
          {#- Rewrite - Inline -#}
          let v7 =
            {#- Rewrite - Inline -#}
            let v7 =
              (Effect.Console.warn (Data.Show.showIntImpl v6));
            v7;
          v7;
        {#- Rewrite - Inline -#}
        let v7 =
          letEffect $__unused@v7 =
            v6;
          Effect.Console.clear;
        v7;
      v5;
    v3;
  v1
---------------
Snapshot.EffectMonadEffect01.test3 (Step 2)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    v2;
  {#- Rewrite - Inline -#}
  let v4 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v5 =
    v4;
  {#- Rewrite - Inline -#}
  let v6 =
    (Effect.Console.warn "1");
  letEffect $__unused@v7 =
    v6;
  Effect.Console.clear
---------------
Snapshot.EffectMonadEffect01.test3 (Step 3; Final)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  letEffect $__unused@v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v4 =
    (Effect.Console.warn "1");
  Effect.Console.clear
===============
Snapshot.EffectMonadEffect01.test4 (Step 0; Original)
  ((Snapshot.EffectMonadEffect01.discard1 (Snapshot.EffectMonadEffect01.log "hello")) (\$__unused@v0 -> 
    ((Snapshot.EffectMonadEffect01.discard1 (Snapshot.EffectMonadEffect01.logShow 1)) (\$__unused@v1 -> 
      ((Snapshot.EffectMonadEffect01.discard1 (Snapshot.EffectMonadEffect01.warn "hello")) (\$__unused@v2 -> 
        ((Snapshot.EffectMonadEffect01.discard1 (Snapshot.EffectMonadEffect01.warnShow 1)) (\$__unused@v3 -> 
          Snapshot.EffectMonadEffect01.clear
        ))
      ))
    ))
  ))
---------------
Snapshot.EffectMonadEffect01.test4 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      "hello";
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (Effect.Console.log v0);
      v1;
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect $__unused@v1 =
      v0;
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        1;
      {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          (Effect.Console.log (Data.Show.showIntImpl v2));
        v3;
      v3;
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect $__unused@v3 =
        v2;
      let v4 =
        {#- Rewrite - Inline -#}
        let v4 =
          "hello";
        {#- Rewrite - Inline -#}
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            (Effect.Console.warn v4);
          v5;
        v5;
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect $__unused@v5 =
          v4;
        let v6 =
          {#- Rewrite - Inline -#}
          let v6 =
            1;
          {#- Rewrite - Inline -#}
          let v7 =
            {#- Rewrite - Inline -#}
            let v7 =
              (Effect.Console.warn (Data.Show.showIntImpl v6));
            v7;
          v7;
        {#- Rewrite - Inline -#}
        let v7 =
          letEffect $__unused@v7 =
            v6;
          Effect.Console.clear;
        v7;
      v5;
    v3;
  v1
---------------
Snapshot.EffectMonadEffect01.test4 (Step 2)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    v2;
  {#- Rewrite - Inline -#}
  let v4 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v5 =
    v4;
  {#- Rewrite - Inline -#}
  let v6 =
    (Effect.Console.warn "1");
  letEffect $__unused@v7 =
    v6;
  Effect.Console.clear
---------------
Snapshot.EffectMonadEffect01.test4 (Step 3; Final)
  let v0 =
    (Effect.Console.log "hello");
  letEffect $__unused@v1 =
    v0;
  letEffect $__unused@v2 =
    (Effect.Console.log "1");
  letEffect $__unused@v3 =
    (Effect.Console.warn "hello");
  letEffect $__unused@v4 =
    (Effect.Console.warn "1");
  Effect.Console.clear
===============
Snapshot.EffectMonadEffect01.warn (Step 0; Original)
  (Effect.Class.Console.warn Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectMonadEffect01.warn (Step 1; Final)
  (Effect.Class.Console.warn Effect.Class.monadEffectEffect)
===============
Snapshot.EffectMonadEffect01.warnShow (Step 0; Original)
  ((Effect.Class.Console.warnShow Effect.Class.monadEffectEffect) Data.Show.showInt)
---------------
Snapshot.EffectMonadEffect01.warnShow (Step 1; Final)
  ((Effect.Class.Console.warnShow Effect.Class.monadEffectEffect) Data.Show.showInt)