Snapshot.Variant02.VariantBuildMatch$Dict (Step 0; Original)
  (\x@v0 -> 
    x@v0
  )
---------------
Snapshot.Variant02.VariantBuildMatch$Dict (Step 1; Final)
  (\x@v0 -> 
    x@v0
  )

===============

Snapshot.Variant02.match (Step 0; Original)
  (\$__unused@v0 -> \dictVariantBuildMatch@v1 -> 
    (((Snapshot.Variant02.variantBuildMatch dictVariantBuildMatch@v1) Type.Proxy.Proxy) Data.Variant.case_)
  )
---------------
Snapshot.Variant02.match (Step 1; Final)
  (\$__unused@v0 -> \dictVariantBuildMatch@v1 -> 
    (((
      dictVariantBuildMatch@v1
    ).variantBuildMatch Type.Proxy.Proxy) Data.Variant.case_)
  )

===============

Snapshot.Variant02.on (Step 0; Original)
  (Data.Variant.on <PrimUndefined>)
---------------
Snapshot.Variant02.on (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v1 =
    (\dictIsSymbol@v1 -> \p@v2 -> \f@v3 -> \g@v4 -> \r@v5 -> 
      if (== (
          r@v5
        ).type ((
          dictIsSymbol@v1
        ).reflectSymbol p@v2)) then
        (f@v3 (
          r@v5
        ).value)
      else
        (g@v4 r@v5)
    );
  v1
---------------
Snapshot.Variant02.on (Step 2; Final)
  (\dictIsSymbol@v0 -> \p@v1 -> \f@v2 -> \g@v3 -> \r@v4 -> 
    if (== (
        r@v4
      ).type ((
        dictIsSymbol@v0
      ).reflectSymbol p@v1)) then
      (f@v2 (
        r@v4
      ).value)
    else
      (g@v3 r@v4)
  )

===============

Snapshot.Variant02.show (Step 0; Original)
  (Data.Show.show Data.Show.showInt)
---------------
Snapshot.Variant02.show (Step 1; Final)
  Data.Show.showIntImpl

===============

Snapshot.Variant02.show1 (Step 0; Original)
  (Data.Show.show Data.Show.showBoolean)
---------------
Snapshot.Variant02.show1 (Step 1; Final)
  (
    Data.Show.showBoolean
  ).show

===============

Snapshot.Variant02.test1 (Step 0; Original)
  (((Snapshot.Variant02.match <PrimUndefined>) ((Snapshot.Variant02.variantBuildMatchCons1 { reflectSymbol =
      (\$__unused@v0 -> 
        "bar"
      )
  }) ((Snapshot.Variant02.variantBuildMatchCons1 { reflectSymbol =
      (\$__unused@v0 -> 
        "baz"
      )
  }) ((Snapshot.Variant02.variantBuildMatchCons1 { reflectSymbol =
      (\$__unused@v0 -> 
        "foo"
      )
  }) Snapshot.Variant02.variantBuildMatchNil)))) { foo =
      (\a@v0 -> 
        (Snapshot.Variant02.show a@v0)
      )
  , bar =
      (\a@v0 -> 
        (Snapshot.Variant02.show1 a@v0)
      )
  , baz =
      (\a@v0 -> 
        a@v0
      )
  })
---------------
Snapshot.Variant02.test1 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          {#- Rewrite - Inline -#}
          let v2 =
            <PrimUndefined>;
          [[ UnpackOp
            For identifier v3
              Unpack record
              labels = ["reflectSymbol"]
            inside
              let v4 =
                {#- Rewrite - Inline -#}
                let v4 =
                  <PrimUndefined>;
                {#- Rewrite - Inline -#}
                let v5 =
                  {#- Rewrite - Inline -#}
                  let v5 =
                    {#- Rewrite - Inline -#}
                    let v5 =
                      <PrimUndefined>;
                    [[ UnpackOp
                      For identifier v6
                        Unpack record
                        labels = ["reflectSymbol"]
                      inside
                        let v7 =
                          {#- Rewrite - Inline -#}
                          let v7 =
                            <PrimUndefined>;
                          {#- Rewrite - Inline -#}
                          let v8 =
                            {#- Rewrite - Inline -#}
                            let v8 =
                              {#- Rewrite - Inline -#}
                              let v8 =
                                <PrimUndefined>;
                              [[ UnpackOp
                                For identifier v9
                                  Unpack record
                                  labels = ["reflectSymbol"]
                                inside
                                  { variantBuildMatch =
                                      (\v@v10 -> \k@v11 -> \r@v12 -> 
                                        let v13 =
                                          ((Record.Unsafe.unsafeGet ((
                                            v9
                                          ).reflectSymbol Type.Proxy.Proxy)) r@v12);
                                        let v14 =
                                          {#- Rewrite - Inline -#}
                                          let v14 =
                                            Type.Proxy.Proxy;
                                          {#- Rewrite - Inline -#}
                                          let v15 =
                                            (\k@v15 -> \v1@v16 -> 
                                              k@v15
                                            );
                                          ((v15 k@v11) r@v12);
                                        (\r@v15 -> 
                                          if (== (
                                              r@v15
                                            ).type ((
                                              v9
                                            ).reflectSymbol Type.Proxy.Proxy)) then
                                            (v13 (
                                              r@v15
                                            ).value)
                                          else
                                            (v14 r@v15)
                                        )
                                      )
                                  }
                              ]];
                            v8;
                          v8;
                        { variantBuildMatch =
                            (\v@v8 -> \k@v9 -> \r@v10 -> 
                              let v11 =
                                ((Record.Unsafe.unsafeGet ((
                                  v6
                                ).reflectSymbol Type.Proxy.Proxy)) r@v10);
                              let v12 =
                                ((((
                                  v7
                                ).variantBuildMatch Type.Proxy.Proxy) k@v9) r@v10);
                              (\r@v13 -> 
                                if (== (
                                    r@v13
                                  ).type ((
                                    v6
                                  ).reflectSymbol Type.Proxy.Proxy)) then
                                  (v11 (
                                    r@v13
                                  ).value)
                                else
                                  (v12 r@v13)
                              )
                            )
                        }
                    ]];
                  v5;
                v5;
              { variantBuildMatch =
                  (\v@v5 -> \k@v6 -> \r@v7 -> 
                    let v8 =
                      ((Record.Unsafe.unsafeGet ((
                        v3
                      ).reflectSymbol Type.Proxy.Proxy)) r@v7);
                    let v9 =
                      ((((
                        v4
                      ).variantBuildMatch Type.Proxy.Proxy) k@v6) r@v7);
                    (\r@v10 -> 
                      if (== (
                          r@v10
                        ).type ((
                          v3
                        ).reflectSymbol Type.Proxy.Proxy)) then
                        (v8 (
                          r@v10
                        ).value)
                      else
                        (v9 r@v10)
                    )
                  )
              }
          ]];
        v2;
      v2;
    (((
      v1
    ).variantBuildMatch Type.Proxy.Proxy) Data.Variant.case_);
  (v1 { foo =
      (\a@v2 -> 
        (Data.Show.showIntImpl a@v2)
      )
  , bar =
      (\a@v2 -> 
        if a@v2 then
          "true"
        else
          "false"
      )
  , baz =
      (\a@v2 -> 
        a@v2
      )
  })
---------------
Snapshot.Variant02.test1 (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    (\$__unused@v0 -> 
      "bar"
    );
  [[ LetAssoc
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\$__unused@v1 -> 
          "baz"
        );
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          (\$__unused@v2 -> 
            "foo"
          );
        { variantBuildMatch =
            (\v@v3 -> \k@v4 -> \r@v5 -> 
              let v6 =
                ((Record.Unsafe.unsafeGet (v2 Type.Proxy.Proxy)) r@v5);
              (\r@v7 -> 
                if (== (
                    r@v7
                  ).type (v2 Type.Proxy.Proxy)) then
                  (v6 (
                    r@v7
                  ).value)
                else
                  (k@v4 r@v7)
              )
            )
        };
      { variantBuildMatch =
          (\v@v3 -> \k@v4 -> \r@v5 -> 
            let v6 =
              ((Record.Unsafe.unsafeGet (v1 Type.Proxy.Proxy)) r@v5);
            let v7 =
              ((((
                v2
              ).variantBuildMatch Type.Proxy.Proxy) k@v4) r@v5);
            (\r@v8 -> 
              if (== (
                  r@v8
                ).type (v1 Type.Proxy.Proxy)) then
                (v6 (
                  r@v8
                ).value)
              else
                (v7 r@v8)
            )
          )
      };
    let v1 =
      { variantBuildMatch =
          (\v@v2 -> \k@v3 -> \r@v4 -> 
            let v5 =
              ((Record.Unsafe.unsafeGet (v0 Type.Proxy.Proxy)) r@v4);
            let v6 =
              ((((
                v1
              ).variantBuildMatch Type.Proxy.Proxy) k@v3) r@v4);
            (\r@v7 -> 
              if (== (
                  r@v7
                ).type (v0 Type.Proxy.Proxy)) then
                (v5 (
                  r@v7
                ).value)
              else
                (v6 r@v7)
            )
          )
      };
    let v1 =
      (
        v1
      ).variantBuildMatch;
    let v1 =
      ((v1 Type.Proxy.Proxy) Data.Variant.case_);
    (v1 { foo =
        (\a@v2 -> 
          (Data.Show.showIntImpl a@v2)
        )
    , bar =
        (\a@v2 -> 
          if a@v2 then
            "true"
          else
            "false"
        )
    , baz =
        (\a@v2 -> 
          a@v2
        )
    })
  ]]
---------------
Snapshot.Variant02.test1 (Step 3)
  let v0 =
    [[ UnpackOp
      For identifier v0
        Unpack record
        labels = ["variantBuildMatch"]
      inside
        { variantBuildMatch =
            (\v@v1 -> \k@v2 -> \r@v3 -> 
              let v4 =
                ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
                let v4 =
                  Type.Proxy.Proxy;
                "baz") r@v3);
              let v5 =
                ((((
                  v0
                ).variantBuildMatch Type.Proxy.Proxy) k@v2) r@v3);
              (\r@v6 -> 
                if {#- Rewrite - Inline -#}
                  let v7 =
                    Type.Proxy.Proxy;
                  {#- Rewrite - Inline -#}
                  let v8 =
                    "baz";
                  (== (
                    r@v6
                  ).type v8) then
                  (v4 (
                    r@v6
                  ).value)
                else
                  (v5 r@v6)
              )
            )
        }
    ]];
  {#- Rewrite - Inline -#}
  let v1 =
    { variantBuildMatch =
        (\v@v1 -> \k@v2 -> \r@v3 -> 
          let v4 =
            ((Record.Unsafe.unsafeGet {#- Rewrite - Inline -#}
            let v4 =
              Type.Proxy.Proxy;
            "bar") r@v3);
          let v5 =
            ((((
              v0
            ).variantBuildMatch Type.Proxy.Proxy) k@v2) r@v3);
          (\r@v6 -> 
            if {#- Rewrite - Inline -#}
              let v7 =
                Type.Proxy.Proxy;
              {#- Rewrite - Inline -#}
              let v8 =
                "bar";
              (== (
                r@v6
              ).type v8) then
              (v4 (
                r@v6
              ).value)
            else
              (v5 r@v6)
          )
        )
    };
  {#- Rewrite - Inline -#}
  let v2 =
    (
      v1
    ).variantBuildMatch;
  {#- Rewrite - Inline -#}
  let v3 =
    ((v2 Type.Proxy.Proxy) Data.Variant.case_);
  (v3 { foo =
      (\a@v4 -> 
        (Data.Show.showIntImpl a@v4)
      )
  , bar =
      (\a@v4 -> 
        if a@v4 then
          "true"
        else
          "false"
      )
  , baz =
      (\a@v4 -> 
        a@v4
      )
  })
---------------
Snapshot.Variant02.test1 (Step 4)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      (\v@v0 -> \k@v1 -> \r@v2 -> 
        {#- Rewrite - Inline -#}
        let v3 =
          (
            r@v2
          ).foo;
        (\r@v4 -> 
          if (== (
              r@v4
            ).type "foo") then
            (v3 (
              r@v4
            ).value)
          else
            (k@v1 r@v4)
        )
      );
    { variantBuildMatch =
        (\v@v1 -> \k@v2 -> \r@v3 -> 
          {#- Rewrite - Inline -#}
          let v4 =
            (
              r@v3
            ).baz;
          let v5 =
            (((v0 Type.Proxy.Proxy) k@v2) r@v3);
          (\r@v6 -> 
            if (== (
                r@v6
              ).type "baz") then
              (v4 (
                r@v6
              ).value)
            else
              (v5 r@v6)
          )
        )
    };
  {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  {#- Rewrite - Inline -#}
  let v2 =
    (\r@v2 -> 
      {#- Rewrite - Inline -#}
      let v3 =
        (
          r@v2
        ).bar;
      let v4 =
        ((((
          v0
        ).variantBuildMatch Type.Proxy.Proxy) Data.Variant.case_) r@v2);
      (\r@v5 -> 
        if (== (
            r@v5
          ).type "bar") then
          (v3 (
            r@v5
          ).value)
        else
          (v4 r@v5)
      )
    );
  (v2 { foo =
      (\a@v3 -> 
        (Data.Show.showIntImpl a@v3)
      )
  , bar =
      (\a@v3 -> 
        if a@v3 then
          "true"
        else
          "false"
      )
  , baz =
      (\a@v3 -> 
        a@v3
      )
  })
---------------
Snapshot.Variant02.test1 (Step 5)
  {#- Rewrite - Inline -#}
  let v0 =
    { variantBuildMatch =
        (\v@v0 -> \k@v1 -> \r@v2 -> 
          let v3 =
            {#- Rewrite - Inline -#}
            let v3 =
              Type.Proxy.Proxy;
            (\r@v4 -> 
              if (== (
                  r@v4
                ).type "foo") then
                ((
                  r@v2
                ).foo (
                  r@v4
                ).value)
              else
                (k@v1 r@v4)
            );
          (\r@v4 -> 
            if (== (
                r@v4
              ).type "baz") then
              ((
                r@v2
              ).baz (
                r@v4
              ).value)
            else
              (v3 r@v4)
          )
        )
    };
  let v1 =
    { foo =
        (\a@v1 -> 
          (Data.Show.showIntImpl a@v1)
        )
    , bar =
        (\a@v1 -> 
          if a@v1 then
            "true"
          else
            "false"
        )
    , baz =
        (\a@v1 -> 
          a@v1
        )
    };
  let v2 =
    ((((
      v0
    ).variantBuildMatch Type.Proxy.Proxy) Data.Variant.case_) v1);
  {#- Rewrite - Inline -#}
  let v3 =
    (\r@v3 -> 
      if (== (
          r@v3
        ).type "bar") then
        ((
          v1
        ).bar (
          r@v3
        ).value)
      else
        (v2 r@v3)
    );
  v3
---------------
Snapshot.Variant02.test1 (Step 6)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["foo","bar","baz"]
    inside
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          Type.Proxy.Proxy;
        {#- Rewrite - Inline -#}
        let v2 =
          (\r@v2 -> 
            if (== (
                r@v2
              ).type "foo") then
              ((
                v0
              ).foo (
                r@v2
              ).value)
            else
              (Partial._crashWith (stringAppend "Data.Variant: pattern match failure [" (stringAppend (
                r@v2
              ).type "]")))
          );
        {#- Rewrite - Inline -#}
        let v3 =
          (\r@v3 -> 
            if (== (
                r@v3
              ).type "baz") then
              ((
                v0
              ).baz (
                r@v3
              ).value)
            else
              (v2 r@v3)
          );
        v3;
      (\r@v2 -> 
        if (== (
            r@v2
          ).type "bar") then
          ((
            v0
          ).bar (
            r@v2
          ).value)
        else
          (v1 r@v2)
      )
  ]]
---------------
Snapshot.Variant02.test1 (Step 7)
  {#- Rewrite - Inline -#}
  let v0 =
    (\a@v0 -> 
      (Data.Show.showIntImpl a@v0)
    );
  {#- Rewrite - Inline -#}
  let v1 =
    (\a@v1 -> 
      if a@v1 then
        "true"
      else
        "false"
    );
  {#- Rewrite - Inline -#}
  let v2 =
    (\a@v2 -> 
      a@v2
    );
  {#- Rewrite - Inline -#}
  let v3 =
    (\r@v3 -> 
      if (== (
          r@v3
        ).type "baz") then
        (v2 (
          r@v3
        ).value)
      else if (== (
          r@v3
        ).type "foo") then
        (v0 (
          r@v3
        ).value)
      else
        (Partial._crashWith (stringAppend "Data.Variant: pattern match failure [" (stringAppend (
          r@v3
        ).type "]")))
    );
  (\r@v4 -> 
    if (== (
        r@v4
      ).type "bar") then
      (v1 (
        r@v4
      ).value)
    else
      (v3 r@v4)
  )
---------------
Snapshot.Variant02.test1 (Step 8)
  (\r@v0 -> 
    if (== (
        r@v0
      ).type "bar") then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          r@v0
        ).value;
      if v1 then
        "true"
      else
        "false"
    else if (== (
        r@v0
      ).type "baz") then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          r@v0
        ).value;
      v1
    else if (== (
        r@v0
      ).type "foo") then
      {#- Rewrite - Inline -#}
      let v1 =
        (
          r@v0
        ).value;
      (Data.Show.showIntImpl v1)
    else
      (Partial._crashWith (stringAppend "Data.Variant: pattern match failure [" (stringAppend (
        r@v0
      ).type "]")))
  )
---------------
Snapshot.Variant02.test1 (Step 9; Final)
  (\r@v0 -> 
    if (== (
        r@v0
      ).type "bar") then
      if (
          r@v0
        ).value then
        "true"
      else
        "false"
    else if (== (
        r@v0
      ).type "baz") then
      (
        r@v0
      ).value
    else if (== (
        r@v0
      ).type "foo") then
      (Data.Show.showIntImpl (
        r@v0
      ).value)
    else
      (Partial._crashWith (stringAppend "Data.Variant: pattern match failure [" (stringAppend (
        r@v0
      ).type "]")))
  )

===============

Snapshot.Variant02.variantBuildMatch (Step 0; Original)
  (\dict@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      dict@v0;
    {#- Rewrite - Inline -#}
    let v2 =
      (\v@v2 ->
        (
          v@v2
        ).variantBuildMatch
      );
    (v2 v@v1)
  )
---------------
Snapshot.Variant02.variantBuildMatch (Step 1; Final)
  (\dict@v0 -> 
    (
      dict@v0
    ).variantBuildMatch
  )

===============

Snapshot.Variant02.variantBuildMatchCons (Step 0; Original)
  (\dictTypeEquals@v0 -> \$__unused@v1 -> \$__unused@v2 -> \dictIsSymbol@v3 -> 
    {#- Rewrite - Inline -#}
    let on1@v4 =
      (Snapshot.Variant02.on dictIsSymbol@v3);
    {#- Rewrite - Inline -#}
    let get@v5 =
      ((Record.get dictIsSymbol@v3) <PrimUndefined>);
    (\dictVariantBuildMatch@v6 -> 
      let variantBuildMatch1@v7 =
        (Snapshot.Variant02.variantBuildMatch dictVariantBuildMatch@v6);
      { variantBuildMatch =
          (\v@v8 -> \k@v9 -> \r@v10 -> 
            (((on1@v4 Type.Proxy.Proxy) ((get@v5 Type.Proxy.Proxy) r@v10)) (((variantBuildMatch1@v7 Type.Proxy.Proxy) k@v9) r@v10))
          )
      }
    )
  )
---------------
Snapshot.Variant02.variantBuildMatchCons (Step 1)
  (\dictTypeEquals@v0 -> \$__unused@v1 -> \$__unused@v2 -> \dictIsSymbol@v3 -> \dictVariantBuildMatch@v4 -> 
    {#- Rewrite - Inline -#}
    let variantBuildMatch1@v5 =
      (
        dictVariantBuildMatch@v4
      ).variantBuildMatch;
    { variantBuildMatch =
        (\v@v6 -> \k@v7 -> \r@v8 -> 
          {#- Rewrite - Inline -#}
          let v9 =
            Type.Proxy.Proxy;
          let v10 =
            {#- Rewrite - Inline -#}
            let v10 =
              <PrimUndefined>;
            {#- Rewrite - Inline -#}
            let v11 =
              {#- Rewrite - Inline -#}
              let v11 =
                Type.Proxy.Proxy;
              ((Record.Unsafe.unsafeGet ((
                dictIsSymbol@v3
              ).reflectSymbol v11)) r@v8);
            v11;
          let v11 =
            (((variantBuildMatch1@v5 Type.Proxy.Proxy) k@v7) r@v8);
          (\r@v12 -> 
            if (== (
                r@v12
              ).type ((
                dictIsSymbol@v3
              ).reflectSymbol v9)) then
              (v10 (
                r@v12
              ).value)
            else
              (v11 r@v12)
          )
        )
    }
  )
---------------
Snapshot.Variant02.variantBuildMatchCons (Step 2; Final)
  (\dictTypeEquals@v0 -> \$__unused@v1 -> \$__unused@v2 -> \dictIsSymbol@v3 -> \dictVariantBuildMatch@v4 -> 
    { variantBuildMatch =
        (\v@v5 -> \k@v6 -> \r@v7 -> 
          let v8 =
            ((Record.Unsafe.unsafeGet ((
              dictIsSymbol@v3
            ).reflectSymbol Type.Proxy.Proxy)) r@v7);
          let v9 =
            ((((
              dictVariantBuildMatch@v4
            ).variantBuildMatch Type.Proxy.Proxy) k@v6) r@v7);
          (\r@v10 -> 
            if (== (
                r@v10
              ).type ((
                dictIsSymbol@v3
              ).reflectSymbol Type.Proxy.Proxy)) then
              (v8 (
                r@v10
              ).value)
            else
              (v9 r@v10)
          )
        )
    }
  )

===============

Snapshot.Variant02.variantBuildMatchCons1 (Step 0; Original)
  (((Snapshot.Variant02.variantBuildMatchCons Type.Equality.refl) <PrimUndefined>) <PrimUndefined>)
---------------
Snapshot.Variant02.variantBuildMatchCons1 (Step 1; Final)
  (((Snapshot.Variant02.variantBuildMatchCons Type.Equality.refl) <PrimUndefined>) <PrimUndefined>)

===============

Snapshot.Variant02.variantBuildMatchNil (Step 0; Original)
  { variantBuildMatch =
      (\v@v0 -> \k@v1 -> \v1@v2 -> 
        k@v1
      )
  }
---------------
Snapshot.Variant02.variantBuildMatchNil (Step 1; Final)
  { variantBuildMatch =
      (\v@v0 -> \k@v1 -> \v1@v2 -> 
        k@v1
      )
  }