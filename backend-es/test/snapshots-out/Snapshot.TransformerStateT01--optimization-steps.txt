Snapshot.TransformerStateT01.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.TransformerStateT01.add (Step 1; Final)
  Data.Semiring.intAdd
===============
Snapshot.TransformerStateT01.apply (Step 0; Original)
  (Control.Apply.apply (Control.Monad.State.Trans.applyStateT Effect.monadEffect))
---------------
Snapshot.TransformerStateT01.apply (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (Control.Monad.State.Trans.applyStateT Effect.monadEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).apply;
  v1
---------------
Snapshot.TransformerStateT01.apply (Step 2; Final)
  (
    (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
  ).apply
===============
Snapshot.TransformerStateT01.bind (Step 0; Original)
  (Control.Bind.bind Snapshot.TransformerStateT01.bindStateT)
---------------
Snapshot.TransformerStateT01.bind (Step 1; Final)
  (
    Snapshot.TransformerStateT01.bindStateT
  ).bind
===============
Snapshot.TransformerStateT01.bindStateT (Step 0; Original)
  (Control.Monad.State.Trans.bindStateT Effect.monadEffect)
---------------
Snapshot.TransformerStateT01.bindStateT (Step 1; Final)
  (Control.Monad.State.Trans.bindStateT Effect.monadEffect)
===============
Snapshot.TransformerStateT01.discard (Step 0; Original)
  (Control.Bind.discard Control.Bind.discardUnit)
---------------
Snapshot.TransformerStateT01.discard (Step 1; Final)
  (
    Control.Bind.discardUnit
  ).discard
===============
Snapshot.TransformerStateT01.discard1 (Step 0; Original)
  (Snapshot.TransformerStateT01.discard Snapshot.TransformerStateT01.bindStateT)
---------------
Snapshot.TransformerStateT01.discard1 (Step 1; Final)
  (
    Snapshot.TransformerStateT01.bindStateT
  ).bind
===============
Snapshot.TransformerStateT01.get (Step 0; Original)
  (Control.Monad.State.Class.get Snapshot.TransformerStateT01.monadStateStateT)
---------------
Snapshot.TransformerStateT01.get (Step 1; Final)
  ((
    Snapshot.TransformerStateT01.monadStateStateT
  ).state (\s@v0 -> 
    (Data.Tuple.Tuple.Tuple s@v0 s@v0)
  ))
===============
Snapshot.TransformerStateT01.liftEffect (Step 0; Original)
  (Effect.Class.liftEffect Snapshot.TransformerStateT01.monadEffectState)
---------------
Snapshot.TransformerStateT01.liftEffect (Step 1; Final)
  (
    Snapshot.TransformerStateT01.monadEffectState
  ).liftEffect
===============
Snapshot.TransformerStateT01.map (Step 0; Original)
  (Data.Functor.map (Control.Monad.State.Trans.functorStateT Effect.functorEffect))
---------------
Snapshot.TransformerStateT01.map (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (Control.Monad.State.Trans.functorStateT Effect.functorEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).map;
  v1
---------------
Snapshot.TransformerStateT01.map (Step 2; Final)
  (
    (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
  ).map
===============
Snapshot.TransformerStateT01.modify (Step 0; Original)
  (Control.Monad.State.Class.modify Snapshot.TransformerStateT01.monadStateStateT)
---------------
Snapshot.TransformerStateT01.modify (Step 1; Final)
  (Control.Monad.State.Class.modify Snapshot.TransformerStateT01.monadStateStateT)
===============
Snapshot.TransformerStateT01.monadEffectState (Step 0; Original)
  (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
---------------
Snapshot.TransformerStateT01.monadEffectState (Step 1; Final)
  (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
===============
Snapshot.TransformerStateT01.monadStateStateT (Step 0; Original)
  (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect)
---------------
Snapshot.TransformerStateT01.monadStateStateT (Step 1; Final)
  (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect)
===============
Snapshot.TransformerStateT01.program1 (Step 0; Original)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let bindStateT1@v2 =
      (Control.Monad.State.Trans.bindStateT Monad0@v1);
    let discard2@v3 =
      (Snapshot.TransformerStateT01.discard bindStateT1@v2);
    let liftEffect1@v4 =
      (Effect.Class.liftEffect (Control.Monad.State.Trans.monadEffectState dictMonadEffect@v0));
    let bind1@v5 =
      (Control.Bind.bind bindStateT1@v2);
    let monadStateStateT1@v6 =
      (Control.Monad.State.Trans.monadStateStateT Monad0@v1);
    let get1@v7 =
      (Control.Monad.State.Class.get monadStateStateT1@v6);
    let map1@v8 =
      (Data.Functor.map (Control.Monad.State.Trans.functorStateT ((
        ((
          ((
            Monad0@v1
          ).Bind1 <PrimUndefined>)
        ).Apply0 <PrimUndefined>)
      ).Functor0 <PrimUndefined>)));
    {#- Rewrite - Inline -#}
    let put1@v9 =
      (Control.Monad.State.Class.put monadStateStateT1@v6);
    let apply1@v10 =
      (Control.Apply.apply (Control.Monad.State.Trans.applyStateT Monad0@v1));
    {#- Rewrite - Inline -#}
    let modify1@v11 =
      (Control.Monad.State.Class.modify monadStateStateT1@v6);
    let pure1@v12 =
      (Control.Applicative.pure (Control.Monad.State.Trans.applicativeStateT Monad0@v1));
    ((discard2@v3 (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v13 -> 
      ((bind1@v5 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v14 -> 
        ((bind1@v5 get1@v7) (\one@v15 -> 
          ((bind1@v5 ((map1@v8 (\v@v16 -> 
            ((Snapshot.TransformerStateT01.add v@v16) one@v15)
          )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v16 -> 
            ((discard2@v3 (put1@v9 i2@v16)) (\$__unused@v17 -> 
              ((bind1@v5 ((apply1@v10 ((map1@v8 Snapshot.TransformerStateT01.add) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v18 -> 
                ((bind1@v5 (modify1@v11 (\v@v19 -> 
                  ((Snapshot.TransformerStateT01.add v@v19) i3@v18)
                ))) (\result@v19 -> 
                  (pure1@v12 (Snapshot.TransformerStateT01.show ((Snapshot.TransformerStateT01.add i1@v14) result@v19)))
                ))
              ))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerStateT01.program1 (Step 1)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let bindStateT1@v2 =
      (Control.Monad.State.Trans.bindStateT Monad0@v1);
    {#- Rewrite - Inline -#}
    let discard2@v3 =
      (
        bindStateT1@v2
      ).bind;
    let liftEffect1@v4 =
      {#- Rewrite - Inline -#}
      let v4 =
        (Control.Monad.State.Trans.monadEffectState dictMonadEffect@v0);
      {#- Rewrite - Inline -#}
      let v5 =
        (
          v4
        ).liftEffect;
      v5;
    {#- Rewrite - Inline -#}
    let bind1@v5 =
      (
        bindStateT1@v2
      ).bind;
    let monadStateStateT1@v6 =
      (Control.Monad.State.Trans.monadStateStateT Monad0@v1);
    let get1@v7 =
      ((
        monadStateStateT1@v6
      ).state (\s@v7 -> 
        (Data.Tuple.Tuple.Tuple s@v7 s@v7)
      ));
    let map1@v8 =
      {#- Rewrite - Inline -#}
      let v8 =
        (Control.Monad.State.Trans.functorStateT ((
          ((
            ((
              Monad0@v1
            ).Bind1 <PrimUndefined>)
          ).Apply0 <PrimUndefined>)
        ).Functor0 <PrimUndefined>));
      {#- Rewrite - Inline -#}
      let v9 =
        (
          v8
        ).map;
      v9;
    let apply1@v9 =
      {#- Rewrite - Inline -#}
      let v9 =
        (Control.Monad.State.Trans.applyStateT Monad0@v1);
      {#- Rewrite - Inline -#}
      let v10 =
        (
          v9
        ).apply;
      v10;
    let pure1@v10 =
      {#- Rewrite - Inline -#}
      let v10 =
        (Control.Monad.State.Trans.applicativeStateT Monad0@v1);
      {#- Rewrite - Inline -#}
      let v11 =
        (
          v10
        ).pure;
      v11;
    ((discard2@v3 (liftEffect1@v4 (Effect.Console.log "foo"))) (\$__unused@v11 -> 
      ((bind1@v5 (liftEffect1@v4 ((Effect.Random.randomInt 1) 10))) (\i1@v12 -> 
        ((bind1@v5 get1@v7) (\one@v13 -> 
          ((bind1@v5 ((map1@v8 (\v@v14 -> 
            (add v@v14 one@v13)
          )) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i2@v14 -> 
            ((discard2@v3 ((
              monadStateStateT1@v6
            ).state (\v@v15 -> 
              (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v14)
            ))) (\$__unused@v15 -> 
              ((bind1@v5 ((apply1@v9 ((map1@v8 Data.Semiring.intAdd) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v4 ((Effect.Random.randomInt 1) 10)))) (\i3@v16 -> 
                ((bind1@v5 {#- Rewrite - Inline -#}
                let v17 =
                  (\v@v17 -> 
                    (add v@v17 i3@v16)
                  );
                {#- Rewrite - Inline -#}
                let v18 =
                  ((
                    monadStateStateT1@v6
                  ).state (\s@v18 -> 
                    let s'@v19 =
                      (v17 s@v18);
                    (Data.Tuple.Tuple.Tuple s'@v19 s'@v19)
                  ));
                v18) (\result@v17 -> 
                  (pure1@v10 (Data.Show.showIntImpl (add i1@v12 result@v17)))
                ))
              ))
            ))
          ))
        ))
      ))
    ))
  )
---------------
Snapshot.TransformerStateT01.program1 (Step 2; Final)
  (\dictMonadEffect@v0 -> 
    let Monad0@v1 =
      ((
        dictMonadEffect@v0
      ).Monad0 <PrimUndefined>);
    let bindStateT1@v2 =
      (Control.Monad.State.Trans.bindStateT Monad0@v1);
    let liftEffect1@v3 =
      (
        (Control.Monad.State.Trans.monadEffectState dictMonadEffect@v0)
      ).liftEffect;
    let monadStateStateT1@v4 =
      (Control.Monad.State.Trans.monadStateStateT Monad0@v1);
    let get1@v5 =
      ((
        monadStateStateT1@v4
      ).state (\s@v5 -> 
        (Data.Tuple.Tuple.Tuple s@v5 s@v5)
      ));
    let map1@v6 =
      (
        (Control.Monad.State.Trans.functorStateT ((
          ((
            ((
              Monad0@v1
            ).Bind1 <PrimUndefined>)
          ).Apply0 <PrimUndefined>)
        ).Functor0 <PrimUndefined>))
      ).map;
    let apply1@v7 =
      (
        (Control.Monad.State.Trans.applyStateT Monad0@v1)
      ).apply;
    let pure1@v8 =
      (
        (Control.Monad.State.Trans.applicativeStateT Monad0@v1)
      ).pure;
    (((
      bindStateT1@v2
    ).bind (liftEffect1@v3 (Effect.Console.log "foo"))) (\$__unused@v9 -> 
      (((
        bindStateT1@v2
      ).bind (liftEffect1@v3 ((Effect.Random.randomInt 1) 10))) (\i1@v10 -> 
        (((
          bindStateT1@v2
        ).bind get1@v5) (\one@v11 -> 
          (((
            bindStateT1@v2
          ).bind ((map1@v6 (\v@v12 -> 
            (add v@v12 one@v11)
          )) (liftEffect1@v3 ((Effect.Random.randomInt 1) 10)))) (\i2@v12 -> 
            (((
              bindStateT1@v2
            ).bind ((
              monadStateStateT1@v4
            ).state (\v@v13 -> 
              (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v12)
            ))) (\$__unused@v13 -> 
              (((
                bindStateT1@v2
              ).bind ((apply1@v7 ((map1@v6 Data.Semiring.intAdd) (liftEffect1@v3 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v3 ((Effect.Random.randomInt 1) 10)))) (\i3@v14 -> 
                (((
                  bindStateT1@v2
                ).bind ((
                  monadStateStateT1@v4
                ).state (\s@v15 -> 
                  let s'@v16 =
                    (add s@v15 i3@v14);
                  (Data.Tuple.Tuple.Tuple s'@v16 s'@v16)
                ))) (\result@v15 -> 
                  (pure1@v8 (Data.Show.showIntImpl (add i1@v10 result@v15)))
                ))
              ))
            ))
          ))
        ))
      ))
    ))
  )
===============
Snapshot.TransformerStateT01.program2 (Step 0; Original)
  (\dictMonadState@v0 -> 
    let get1@v1 =
      (Control.Monad.State.Class.get dictMonadState@v0);
    {#- Rewrite - Inline -#}
    let put1@v2 =
      (Control.Monad.State.Class.put dictMonadState@v0);
    {#- Rewrite - Inline -#}
    let modify1@v3 =
      (Control.Monad.State.Class.modify dictMonadState@v0);
    (\dictMonadEffect@v4 -> 
      let Monad0@v5 =
        ((
          dictMonadEffect@v4
        ).Monad0 <PrimUndefined>);
      let Bind1@v6 =
        ((
          Monad0@v5
        ).Bind1 <PrimUndefined>);
      let discard2@v7 =
        (Snapshot.TransformerStateT01.discard Bind1@v6);
      let liftEffect1@v8 =
        (Effect.Class.liftEffect dictMonadEffect@v4);
      let bind1@v9 =
        (Control.Bind.bind Bind1@v6);
      let Apply0@v10 =
        ((
          Bind1@v6
        ).Apply0 <PrimUndefined>);
      let map1@v11 =
        (Data.Functor.map ((
          Apply0@v10
        ).Functor0 <PrimUndefined>));
      let apply1@v12 =
        (Control.Apply.apply Apply0@v10);
      let pure1@v13 =
        (Control.Applicative.pure ((
          Monad0@v5
        ).Applicative0 <PrimUndefined>));
      ((discard2@v7 (liftEffect1@v8 (Effect.Console.log "foo"))) (\$__unused@v14 -> 
        ((bind1@v9 (liftEffect1@v8 ((Effect.Random.randomInt 1) 10))) (\i1@v15 -> 
          ((bind1@v9 get1@v1) (\one@v16 -> 
            ((bind1@v9 ((map1@v11 (\v@v17 -> 
              ((Snapshot.TransformerStateT01.add v@v17) one@v16)
            )) (liftEffect1@v8 ((Effect.Random.randomInt 1) 10)))) (\i2@v17 -> 
              ((discard2@v7 (put1@v2 i2@v17)) (\$__unused@v18 -> 
                ((bind1@v9 ((apply1@v12 ((map1@v11 Snapshot.TransformerStateT01.add) (liftEffect1@v8 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v8 ((Effect.Random.randomInt 1) 10)))) (\i3@v19 -> 
                  ((bind1@v9 (modify1@v3 (\v@v20 -> 
                    ((Snapshot.TransformerStateT01.add v@v20) i3@v19)
                  ))) (\result@v20 -> 
                    (pure1@v13 (Snapshot.TransformerStateT01.show ((Snapshot.TransformerStateT01.add i1@v15) result@v20)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerStateT01.program2 (Step 1)
  (\dictMonadState@v0 -> 
    let get1@v1 =
      ((
        dictMonadState@v0
      ).state (\s@v1 -> 
        (Data.Tuple.Tuple.Tuple s@v1 s@v1)
      ));
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let discard2@v5 =
        (
          Bind1@v4
        ).bind;
      {#- Rewrite - Inline -#}
      let liftEffect1@v6 =
        (
          dictMonadEffect@v2
        ).liftEffect;
      {#- Rewrite - Inline -#}
      let bind1@v7 =
        (
          Bind1@v4
        ).bind;
      let Apply0@v8 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map1@v9 =
        {#- Rewrite - Inline -#}
        let v9 =
          ((
            Apply0@v8
          ).Functor0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v10 =
          (
            v9
          ).map;
        v10;
      {#- Rewrite - Inline -#}
      let apply1@v10 =
        (
          Apply0@v8
        ).apply;
      let pure1@v11 =
        {#- Rewrite - Inline -#}
        let v11 =
          ((
            Monad0@v3
          ).Applicative0 <PrimUndefined>);
        {#- Rewrite - Inline -#}
        let v12 =
          (
            v11
          ).pure;
        v12;
      ((discard2@v5 (liftEffect1@v6 (Effect.Console.log "foo"))) (\$__unused@v12 -> 
        ((bind1@v7 (liftEffect1@v6 ((Effect.Random.randomInt 1) 10))) (\i1@v13 -> 
          ((bind1@v7 get1@v1) (\one@v14 -> 
            ((bind1@v7 ((map1@v9 (\v@v15 -> 
              (add v@v15 one@v14)
            )) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i2@v15 -> 
              ((discard2@v5 ((
                dictMonadState@v0
              ).state (\v@v16 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v15)
              ))) (\$__unused@v16 -> 
                ((bind1@v7 ((apply1@v10 ((map1@v9 Data.Semiring.intAdd) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v6 ((Effect.Random.randomInt 1) 10)))) (\i3@v17 -> 
                  ((bind1@v7 {#- Rewrite - Inline -#}
                  let v18 =
                    (\v@v18 -> 
                      (add v@v18 i3@v17)
                    );
                  {#- Rewrite - Inline -#}
                  let v19 =
                    ((
                      dictMonadState@v0
                    ).state (\s@v19 -> 
                      let s'@v20 =
                        (v18 s@v19);
                      (Data.Tuple.Tuple.Tuple s'@v20 s'@v20)
                    ));
                  v19) (\result@v18 -> 
                    (pure1@v11 (Data.Show.showIntImpl (add i1@v13 result@v18)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
---------------
Snapshot.TransformerStateT01.program2 (Step 2; Final)
  (\dictMonadState@v0 -> 
    let get1@v1 =
      ((
        dictMonadState@v0
      ).state (\s@v1 -> 
        (Data.Tuple.Tuple.Tuple s@v1 s@v1)
      ));
    (\dictMonadEffect@v2 -> 
      let Monad0@v3 =
        ((
          dictMonadEffect@v2
        ).Monad0 <PrimUndefined>);
      let Bind1@v4 =
        ((
          Monad0@v3
        ).Bind1 <PrimUndefined>);
      let Apply0@v5 =
        ((
          Bind1@v4
        ).Apply0 <PrimUndefined>);
      let map1@v6 =
        (
          ((
            Apply0@v5
          ).Functor0 <PrimUndefined>)
        ).map;
      let pure1@v7 =
        (
          ((
            Monad0@v3
          ).Applicative0 <PrimUndefined>)
        ).pure;
      (((
        Bind1@v4
      ).bind ((
        dictMonadEffect@v2
      ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v8 -> 
        (((
          Bind1@v4
        ).bind ((
          dictMonadEffect@v2
        ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v9 -> 
          (((
            Bind1@v4
          ).bind get1@v1) (\one@v10 -> 
            (((
              Bind1@v4
            ).bind ((map1@v6 (\v@v11 -> 
              (add v@v11 one@v10)
            )) ((
              dictMonadEffect@v2
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v11 -> 
              (((
                Bind1@v4
              ).bind ((
                dictMonadState@v0
              ).state (\v@v12 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v11)
              ))) (\$__unused@v12 -> 
                (((
                  Bind1@v4
                ).bind (((
                  Apply0@v5
                ).apply ((map1@v6 Data.Semiring.intAdd) ((
                  dictMonadEffect@v2
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                  dictMonadEffect@v2
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v13 -> 
                  (((
                    Bind1@v4
                  ).bind ((
                    dictMonadState@v0
                  ).state (\s@v14 -> 
                    let s'@v15 =
                      (add s@v14 i3@v13);
                    (Data.Tuple.Tuple.Tuple s'@v15 s'@v15)
                  ))) (\result@v14 -> 
                    (pure1@v7 (Data.Show.showIntImpl (add i1@v9 result@v14)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ))
    )
  )
===============
Snapshot.TransformerStateT01.pure (Step 0; Original)
  (Control.Applicative.pure (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect))
---------------
Snapshot.TransformerStateT01.pure (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect);
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).pure;
  v1
---------------
Snapshot.TransformerStateT01.pure (Step 2; Final)
  (
    (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
  ).pure
===============
Snapshot.TransformerStateT01.put (Step 0; Original)
  (Control.Monad.State.Class.put Snapshot.TransformerStateT01.monadStateStateT)
---------------
Snapshot.TransformerStateT01.put (Step 1; Final)
  (Control.Monad.State.Class.put Snapshot.TransformerStateT01.monadStateStateT)
===============
Snapshot.TransformerStateT01.show (Step 0; Original)
  (Data.Show.show Data.Show.showInt)
---------------
Snapshot.TransformerStateT01.show (Step 1; Final)
  Data.Show.showIntImpl
===============
Snapshot.TransformerStateT01.test1 (Step 0; Original)
  ((Control.Monad.State.Trans.runStateT ((Snapshot.TransformerStateT01.discard1 (Snapshot.TransformerStateT01.liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    ((Snapshot.TransformerStateT01.bind (Snapshot.TransformerStateT01.liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      ((Snapshot.TransformerStateT01.bind Snapshot.TransformerStateT01.get) (\one@v2 -> 
        ((Snapshot.TransformerStateT01.bind ((Snapshot.TransformerStateT01.map (\v@v3 -> 
          ((Snapshot.TransformerStateT01.add v@v3) one@v2)
        )) (Snapshot.TransformerStateT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v3 -> 
          ((Snapshot.TransformerStateT01.discard1 (Snapshot.TransformerStateT01.put i2@v3)) (\$__unused@v4 -> 
            ((Snapshot.TransformerStateT01.bind ((Snapshot.TransformerStateT01.apply ((Snapshot.TransformerStateT01.map Snapshot.TransformerStateT01.add) (Snapshot.TransformerStateT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (Snapshot.TransformerStateT01.liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v5 -> 
              ((Snapshot.TransformerStateT01.bind (Snapshot.TransformerStateT01.modify (\v@v6 -> 
                ((Snapshot.TransformerStateT01.add v@v6) i3@v5)
              ))) (\result@v6 -> 
                (Snapshot.TransformerStateT01.pure (Snapshot.TransformerStateT01.show ((Snapshot.TransformerStateT01.add i1@v1) result@v6)))
              ))
            ))
          ))
        ))
      ))
    ))
  ))) 1)
---------------
Snapshot.TransformerStateT01.test1 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (((
      Snapshot.TransformerStateT01.bindStateT
    ).bind ((
      Snapshot.TransformerStateT01.monadEffectState
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
      (((
        Snapshot.TransformerStateT01.bindStateT
      ).bind ((
        Snapshot.TransformerStateT01.monadEffectState
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
        (((
          Snapshot.TransformerStateT01.bindStateT
        ).bind Snapshot.TransformerStateT01.get) (\one@v2 -> 
          (((
            Snapshot.TransformerStateT01.bindStateT
          ).bind ((Snapshot.TransformerStateT01.map (\v@v3 -> 
            (add v@v3 one@v2)
          )) ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v3 -> 
            (((
              Snapshot.TransformerStateT01.bindStateT
            ).bind ((
              Snapshot.TransformerStateT01.monadStateStateT
            ).state (\v@v4 -> 
              (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v3)
            ))) (\$__unused@v4 -> 
              (((
                Snapshot.TransformerStateT01.bindStateT
              ).bind ((Snapshot.TransformerStateT01.apply ((Snapshot.TransformerStateT01.map Data.Semiring.intAdd) ((
                Snapshot.TransformerStateT01.monadEffectState
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                Snapshot.TransformerStateT01.monadEffectState
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v5 -> 
                (((
                  Snapshot.TransformerStateT01.bindStateT
                ).bind {#- Rewrite - Inline -#}
                let v6 =
                  (\v@v6 -> 
                    (add v@v6 i3@v5)
                  );
                {#- Rewrite - Inline -#}
                let v7 =
                  ((
                    Snapshot.TransformerStateT01.monadStateStateT
                  ).state (\s@v7 -> 
                    let s'@v8 =
                      (v6 s@v7);
                    (Data.Tuple.Tuple.Tuple s'@v8 s'@v8)
                  ));
                v7) (\result@v6 -> 
                  (Snapshot.TransformerStateT01.pure (Data.Show.showIntImpl (add i1@v1 result@v6)))
                ))
              ))
            ))
          ))
        ))
      ))
    ));
  (v0 1)
---------------
Snapshot.TransformerStateT01.test1 (Step 2; Final)
  ((((
    Snapshot.TransformerStateT01.bindStateT
  ).bind ((
    Snapshot.TransformerStateT01.monadEffectState
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v0 -> 
    (((
      Snapshot.TransformerStateT01.bindStateT
    ).bind ((
      Snapshot.TransformerStateT01.monadEffectState
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v1 -> 
      (((
        Snapshot.TransformerStateT01.bindStateT
      ).bind Snapshot.TransformerStateT01.get) (\one@v2 -> 
        (((
          Snapshot.TransformerStateT01.bindStateT
        ).bind ((Snapshot.TransformerStateT01.map (\v@v3 -> 
          (add v@v3 one@v2)
        )) ((
          Snapshot.TransformerStateT01.monadEffectState
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v3 -> 
          (((
            Snapshot.TransformerStateT01.bindStateT
          ).bind ((
            Snapshot.TransformerStateT01.monadStateStateT
          ).state (\v@v4 -> 
            (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v3)
          ))) (\$__unused@v4 -> 
            (((
              Snapshot.TransformerStateT01.bindStateT
            ).bind ((Snapshot.TransformerStateT01.apply ((Snapshot.TransformerStateT01.map Data.Semiring.intAdd) ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v5 -> 
              (((
                Snapshot.TransformerStateT01.bindStateT
              ).bind ((
                Snapshot.TransformerStateT01.monadStateStateT
              ).state (\s@v6 -> 
                let s'@v7 =
                  (add s@v6 i3@v5);
                (Data.Tuple.Tuple.Tuple s'@v7 s'@v7)
              ))) (\result@v6 -> 
                (Snapshot.TransformerStateT01.pure (Data.Show.showIntImpl (add i1@v1 result@v6)))
              ))
            ))
          ))
        ))
      ))
    ))
  )) 1)
===============
Snapshot.TransformerStateT01.test2 (Step 0; Original)
  ((Control.Monad.State.Trans.runStateT (Snapshot.TransformerStateT01.program1 Effect.Class.monadEffectEffect)) 1)
---------------
Snapshot.TransformerStateT01.test2 (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let Monad0@v0 =
      {#- Rewrite - Inline -#}
      let v0 =
        <PrimUndefined>;
      Effect.monadEffect;
    [[ LetAssoc
      let bindStateT1@v1 =
        (Control.Monad.State.Trans.bindStateT Monad0@v0);
      let v1 =
        let liftEffect1@v2 =
          (
            (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
          ).liftEffect;
        let monadStateStateT1@v3 =
          (Control.Monad.State.Trans.monadStateStateT Monad0@v0);
        let get1@v4 =
          ((
            monadStateStateT1@v3
          ).state (\s@v4 -> 
            (Data.Tuple.Tuple.Tuple s@v4 s@v4)
          ));
        let map1@v5 =
          (
            (Control.Monad.State.Trans.functorStateT ((
              ((
                ((
                  Monad0@v0
                ).Bind1 <PrimUndefined>)
              ).Apply0 <PrimUndefined>)
            ).Functor0 <PrimUndefined>))
          ).map;
        let apply1@v6 =
          (
            (Control.Monad.State.Trans.applyStateT Monad0@v0)
          ).apply;
        let pure1@v7 =
          (
            (Control.Monad.State.Trans.applicativeStateT Monad0@v0)
          ).pure;
        (((
          bindStateT1@v1
        ).bind (liftEffect1@v2 (Effect.Console.log "foo"))) (\$__unused@v8 -> 
          (((
            bindStateT1@v1
          ).bind (liftEffect1@v2 ((Effect.Random.randomInt 1) 10))) (\i1@v9 -> 
            (((
              bindStateT1@v1
            ).bind get1@v4) (\one@v10 -> 
              (((
                bindStateT1@v1
              ).bind ((map1@v5 (\v@v11 -> 
                (add v@v11 one@v10)
              )) (liftEffect1@v2 ((Effect.Random.randomInt 1) 10)))) (\i2@v11 -> 
                (((
                  bindStateT1@v1
                ).bind ((
                  monadStateStateT1@v3
                ).state (\v@v12 -> 
                  (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v11)
                ))) (\$__unused@v12 -> 
                  (((
                    bindStateT1@v1
                  ).bind ((apply1@v6 ((map1@v5 Data.Semiring.intAdd) (liftEffect1@v2 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v2 ((Effect.Random.randomInt 1) 10)))) (\i3@v13 -> 
                    (((
                      bindStateT1@v1
                    ).bind ((
                      monadStateStateT1@v3
                    ).state (\s@v14 -> 
                      let s'@v15 =
                        (add s@v14 i3@v13);
                      (Data.Tuple.Tuple.Tuple s'@v15 s'@v15)
                    ))) (\result@v14 -> 
                      (pure1@v7 (Data.Show.showIntImpl (add i1@v9 result@v14)))
                    ))
                  ))
                ))
              ))
            ))
          ))
        ));
      let v1 =
        v1;
      v1
    ]];
  (v0 1)
---------------
Snapshot.TransformerStateT01.test2 (Step 2)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  [[ LetAssoc
    let liftEffect1@v1 =
      (
        (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
      ).liftEffect;
    let v1 =
      let monadStateStateT1@v2 =
        (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
      let get1@v3 =
        ((
          monadStateStateT1@v2
        ).state (\s@v3 -> 
          (Data.Tuple.Tuple.Tuple s@v3 s@v3)
        ));
      let map1@v4 =
        (
          (Control.Monad.State.Trans.functorStateT {#- Rewrite - Inline -#}
          let v4 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v5 =
            {#- Rewrite - Inline -#}
            let v5 =
              {#- Rewrite - Inline -#}
              let v5 =
                (
                  Effect.bindEffect
                ).Apply0;
              (v5 <PrimUndefined>);
            (
              v5
            ).Functor0;
          (v5 <PrimUndefined>))
        ).map;
      let apply1@v5 =
        (
          (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
        ).apply;
      let pure1@v6 =
        (
          (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
        ).pure;
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    let v1 =
      v1;
    (v1 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 3)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  [[ LetAssoc
    let monadStateStateT1@v2 =
      (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
    let v2 =
      let get1@v3 =
        ((
          monadStateStateT1@v2
        ).state (\s@v3 -> 
          (Data.Tuple.Tuple.Tuple s@v3 s@v3)
        ));
      let map1@v4 =
        (
          (Control.Monad.State.Trans.functorStateT {#- Rewrite - Inline -#}
          let v4 =
            <PrimUndefined>;
          {#- Rewrite - Inline -#}
          let v5 =
            (
              Effect.applyEffect
            ).Functor0;
          (v5 <PrimUndefined>))
        ).map;
      let apply1@v5 =
        (
          (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
        ).apply;
      let pure1@v6 =
        (
          (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
        ).pure;
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    (v2 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 4)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  [[ LetAssoc
    let get1@v3 =
      ((
        monadStateStateT1@v2
      ).state (\s@v3 -> 
        (Data.Tuple.Tuple.Tuple s@v3 s@v3)
      ));
    let v3 =
      let map1@v4 =
        (
          (Control.Monad.State.Trans.functorStateT {#- Rewrite - Inline -#}
          let v4 =
            <PrimUndefined>;
          Effect.functorEffect)
        ).map;
      let apply1@v5 =
        (
          (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
        ).apply;
      let pure1@v6 =
        (
          (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
        ).pure;
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    (v3 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 5)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  let get1@v3 =
    ((
      monadStateStateT1@v2
    ).state (\s@v3 -> 
      (Data.Tuple.Tuple.Tuple s@v3 s@v3)
    ));
  [[ LetAssoc
    let map1@v4 =
      (
        (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
      ).map;
    let v4 =
      let apply1@v5 =
        (
          (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
        ).apply;
      let pure1@v6 =
        (
          (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
        ).pure;
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    (v4 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 6)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  let get1@v3 =
    ((
      monadStateStateT1@v2
    ).state (\s@v3 -> 
      (Data.Tuple.Tuple.Tuple s@v3 s@v3)
    ));
  let map1@v4 =
    (
      (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
    ).map;
  [[ LetAssoc
    let apply1@v5 =
      (
        (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
      ).apply;
    let v5 =
      let pure1@v6 =
        (
          (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
        ).pure;
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    (v5 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 7)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  let get1@v3 =
    ((
      monadStateStateT1@v2
    ).state (\s@v3 -> 
      (Data.Tuple.Tuple.Tuple s@v3 s@v3)
    ));
  let map1@v4 =
    (
      (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
    ).map;
  let apply1@v5 =
    (
      (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
    ).apply;
  [[ LetAssoc
    let pure1@v6 =
      (
        (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
      ).pure;
    let v6 =
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
        (((
          bindStateT1@v0
        ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
          (((
            bindStateT1@v0
          ).bind get1@v3) (\one@v9 -> 
            (((
              bindStateT1@v0
            ).bind ((map1@v4 (\v@v10 -> 
              (add v@v10 one@v9)
            )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\v@v11 -> 
                (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
              ))) (\$__unused@v11 -> 
                (((
                  bindStateT1@v0
                ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                  (((
                    bindStateT1@v0
                  ).bind ((
                    monadStateStateT1@v2
                  ).state (\s@v13 -> 
                    let s'@v14 =
                      (add s@v13 i3@v12);
                    (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                  ))) (\result@v13 -> 
                    (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                  ))
                ))
              ))
            ))
          ))
        ))
      ));
    (v6 1)
  ]]
---------------
Snapshot.TransformerStateT01.test2 (Step 8)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  let get1@v3 =
    ((
      monadStateStateT1@v2
    ).state (\s@v3 -> 
      (Data.Tuple.Tuple.Tuple s@v3 s@v3)
    ));
  let map1@v4 =
    (
      (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
    ).map;
  let apply1@v5 =
    (
      (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
    ).apply;
  let pure1@v6 =
    (
      (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
    ).pure;
  {#- Rewrite - Inline -#}
  let v7 =
    (((
      bindStateT1@v0
    ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
      (((
        bindStateT1@v0
      ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
        (((
          bindStateT1@v0
        ).bind get1@v3) (\one@v9 -> 
          (((
            bindStateT1@v0
          ).bind ((map1@v4 (\v@v10 -> 
            (add v@v10 one@v9)
          )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
            (((
              bindStateT1@v0
            ).bind ((
              monadStateStateT1@v2
            ).state (\v@v11 -> 
              (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
            ))) (\$__unused@v11 -> 
              (((
                bindStateT1@v0
              ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                (((
                  bindStateT1@v0
                ).bind ((
                  monadStateStateT1@v2
                ).state (\s@v13 -> 
                  let s'@v14 =
                    (add s@v13 i3@v12);
                  (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                ))) (\result@v13 -> 
                  (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                ))
              ))
            ))
          ))
        ))
      ))
    ));
  (v7 1)
---------------
Snapshot.TransformerStateT01.test2 (Step 9; Final)
  let bindStateT1@v0 =
    (Control.Monad.State.Trans.bindStateT Effect.monadEffect);
  let liftEffect1@v1 =
    (
      (Control.Monad.State.Trans.monadEffectState Effect.Class.monadEffectEffect)
    ).liftEffect;
  let monadStateStateT1@v2 =
    (Control.Monad.State.Trans.monadStateStateT Effect.monadEffect);
  let get1@v3 =
    ((
      monadStateStateT1@v2
    ).state (\s@v3 -> 
      (Data.Tuple.Tuple.Tuple s@v3 s@v3)
    ));
  let map1@v4 =
    (
      (Control.Monad.State.Trans.functorStateT Effect.functorEffect)
    ).map;
  let apply1@v5 =
    (
      (Control.Monad.State.Trans.applyStateT Effect.monadEffect)
    ).apply;
  let pure1@v6 =
    (
      (Control.Monad.State.Trans.applicativeStateT Effect.monadEffect)
    ).pure;
  ((((
    bindStateT1@v0
  ).bind (liftEffect1@v1 (Effect.Console.log "foo"))) (\$__unused@v7 -> 
    (((
      bindStateT1@v0
    ).bind (liftEffect1@v1 ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
      (((
        bindStateT1@v0
      ).bind get1@v3) (\one@v9 -> 
        (((
          bindStateT1@v0
        ).bind ((map1@v4 (\v@v10 -> 
          (add v@v10 one@v9)
        )) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
          (((
            bindStateT1@v0
          ).bind ((
            monadStateStateT1@v2
          ).state (\v@v11 -> 
            (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
          ))) (\$__unused@v11 -> 
            (((
              bindStateT1@v0
            ).bind ((apply1@v5 ((map1@v4 Data.Semiring.intAdd) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (liftEffect1@v1 ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
              (((
                bindStateT1@v0
              ).bind ((
                monadStateStateT1@v2
              ).state (\s@v13 -> 
                let s'@v14 =
                  (add s@v13 i3@v12);
                (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
              ))) (\result@v13 -> 
                (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
              ))
            ))
          ))
        ))
      ))
    ))
  )) 1)
===============
Snapshot.TransformerStateT01.test3 (Step 0; Original)
  ((Control.Monad.State.Trans.runStateT ((Snapshot.TransformerStateT01.program2 Snapshot.TransformerStateT01.monadStateStateT) Snapshot.TransformerStateT01.monadEffectState)) 2)
---------------
Snapshot.TransformerStateT01.test3 (Step 1)
  [[ LetAssoc
    let get1@v0 =
      ((
        Snapshot.TransformerStateT01.monadStateStateT
      ).state (\s@v0 -> 
        (Data.Tuple.Tuple.Tuple s@v0 s@v0)
      ));
    let v0 =
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          (\dictMonadEffect@v1 -> 
            let Monad0@v2 =
              ((
                dictMonadEffect@v1
              ).Monad0 <PrimUndefined>);
            let Bind1@v3 =
              ((
                Monad0@v2
              ).Bind1 <PrimUndefined>);
            let Apply0@v4 =
              ((
                Bind1@v3
              ).Apply0 <PrimUndefined>);
            let map1@v5 =
              (
                ((
                  Apply0@v4
                ).Functor0 <PrimUndefined>)
              ).map;
            let pure1@v6 =
              (
                ((
                  Monad0@v2
                ).Applicative0 <PrimUndefined>)
              ).pure;
            (((
              Bind1@v3
            ).bind ((
              dictMonadEffect@v1
            ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v7 -> 
              (((
                Bind1@v3
              ).bind ((
                dictMonadEffect@v1
              ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v8 -> 
                (((
                  Bind1@v3
                ).bind get1@v0) (\one@v9 -> 
                  (((
                    Bind1@v3
                  ).bind ((map1@v5 (\v@v10 -> 
                    (add v@v10 one@v9)
                  )) ((
                    dictMonadEffect@v1
                  ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v10 -> 
                    (((
                      Bind1@v3
                    ).bind ((
                      Snapshot.TransformerStateT01.monadStateStateT
                    ).state (\v@v11 -> 
                      (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v10)
                    ))) (\$__unused@v11 -> 
                      (((
                        Bind1@v3
                      ).bind (((
                        Apply0@v4
                      ).apply ((map1@v5 Data.Semiring.intAdd) ((
                        dictMonadEffect@v1
                      ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                        dictMonadEffect@v1
                      ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v12 -> 
                        (((
                          Bind1@v3
                        ).bind ((
                          Snapshot.TransformerStateT01.monadStateStateT
                        ).state (\s@v13 -> 
                          let s'@v14 =
                            (add s@v13 i3@v12);
                          (Data.Tuple.Tuple.Tuple s'@v14 s'@v14)
                        ))) (\result@v13 -> 
                          (pure1@v6 (Data.Show.showIntImpl (add i1@v8 result@v13)))
                        ))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          );
        (v1 Snapshot.TransformerStateT01.monadEffectState);
      v1;
    (v0 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 2)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  [[ LetAssoc
    let Monad0@v1 =
      ((
        Snapshot.TransformerStateT01.monadEffectState
      ).Monad0 <PrimUndefined>);
    let v1 =
      [[ LetAssoc
        let Bind1@v2 =
          ((
            Monad0@v1
          ).Bind1 <PrimUndefined>);
        let v2 =
          let Apply0@v3 =
            ((
              Bind1@v2
            ).Apply0 <PrimUndefined>);
          let map1@v4 =
            (
              ((
                Apply0@v3
              ).Functor0 <PrimUndefined>)
            ).map;
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind get1@v0) (\one@v8 -> 
                (((
                  Bind1@v2
                ).bind ((map1@v4 (\v@v9 -> 
                  (add v@v9 one@v8)
                )) ((
                  Snapshot.TransformerStateT01.monadEffectState
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ((
                    Snapshot.TransformerStateT01.monadStateStateT
                  ).state (\v@v10 -> 
                    (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
                  ))) (\$__unused@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Apply0@v3
                    ).apply ((map1@v4 Data.Semiring.intAdd) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                      (((
                        Bind1@v2
                      ).bind ((
                        Snapshot.TransformerStateT01.monadStateStateT
                      ).state (\s@v12 -> 
                        let s'@v13 =
                          (add s@v12 i3@v11);
                        (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                      ))) (\result@v12 -> 
                        (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v2
      ]];
    (v1 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 3)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  [[ LetAssoc
    let Bind1@v2 =
      ((
        Monad0@v1
      ).Bind1 <PrimUndefined>);
    let v2 =
      [[ LetAssoc
        let Apply0@v3 =
          ((
            Bind1@v2
          ).Apply0 <PrimUndefined>);
        let v3 =
          let map1@v4 =
            (
              ((
                Apply0@v3
              ).Functor0 <PrimUndefined>)
            ).map;
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind get1@v0) (\one@v8 -> 
                (((
                  Bind1@v2
                ).bind ((map1@v4 (\v@v9 -> 
                  (add v@v9 one@v8)
                )) ((
                  Snapshot.TransformerStateT01.monadEffectState
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ((
                    Snapshot.TransformerStateT01.monadStateStateT
                  ).state (\v@v10 -> 
                    (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
                  ))) (\$__unused@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Apply0@v3
                    ).apply ((map1@v4 Data.Semiring.intAdd) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                      (((
                        Bind1@v2
                      ).bind ((
                        Snapshot.TransformerStateT01.monadStateStateT
                      ).state (\s@v12 -> 
                        let s'@v13 =
                          (add s@v12 i3@v11);
                        (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                      ))) (\result@v12 -> 
                        (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v3
      ]];
    (v2 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 4)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  [[ LetAssoc
    let Apply0@v3 =
      ((
        Bind1@v2
      ).Apply0 <PrimUndefined>);
    let v3 =
      [[ LetAssoc
        let map1@v4 =
          (
            ((
              Apply0@v3
            ).Functor0 <PrimUndefined>)
          ).map;
        let v4 =
          let pure1@v5 =
            (
              ((
                Monad0@v1
              ).Applicative0 <PrimUndefined>)
            ).pure;
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind get1@v0) (\one@v8 -> 
                (((
                  Bind1@v2
                ).bind ((map1@v4 (\v@v9 -> 
                  (add v@v9 one@v8)
                )) ((
                  Snapshot.TransformerStateT01.monadEffectState
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ((
                    Snapshot.TransformerStateT01.monadStateStateT
                  ).state (\v@v10 -> 
                    (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
                  ))) (\$__unused@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Apply0@v3
                    ).apply ((map1@v4 Data.Semiring.intAdd) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                      (((
                        Bind1@v2
                      ).bind ((
                        Snapshot.TransformerStateT01.monadStateStateT
                      ).state (\s@v12 -> 
                        let s'@v13 =
                          (add s@v12 i3@v11);
                        (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                      ))) (\result@v12 -> 
                        (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v4
      ]];
    (v3 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 5)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  [[ LetAssoc
    let map1@v4 =
      (
        ((
          Apply0@v3
        ).Functor0 <PrimUndefined>)
      ).map;
    let v4 =
      [[ LetAssoc
        let pure1@v5 =
          (
            ((
              Monad0@v1
            ).Applicative0 <PrimUndefined>)
          ).pure;
        let v5 =
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
              (((
                Bind1@v2
              ).bind get1@v0) (\one@v8 -> 
                (((
                  Bind1@v2
                ).bind ((map1@v4 (\v@v9 -> 
                  (add v@v9 one@v8)
                )) ((
                  Snapshot.TransformerStateT01.monadEffectState
                ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                  (((
                    Bind1@v2
                  ).bind ((
                    Snapshot.TransformerStateT01.monadStateStateT
                  ).state (\v@v10 -> 
                    (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
                  ))) (\$__unused@v10 -> 
                    (((
                      Bind1@v2
                    ).bind (((
                      Apply0@v3
                    ).apply ((map1@v4 Data.Semiring.intAdd) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                      Snapshot.TransformerStateT01.monadEffectState
                    ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                      (((
                        Bind1@v2
                      ).bind ((
                        Snapshot.TransformerStateT01.monadStateStateT
                      ).state (\s@v12 -> 
                        let s'@v13 =
                          (add s@v12 i3@v11);
                        (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                      ))) (\result@v12 -> 
                        (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ));
        v5
      ]];
    (v4 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 6)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  [[ LetAssoc
    let pure1@v5 =
      (
        ((
          Monad0@v1
        ).Applicative0 <PrimUndefined>)
      ).pure;
    let v5 =
      {#- Rewrite - Inline -#}
      let v6 =
        (((
          Bind1@v2
        ).bind ((
          Snapshot.TransformerStateT01.monadEffectState
        ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
            (((
              Bind1@v2
            ).bind get1@v0) (\one@v8 -> 
              (((
                Bind1@v2
              ).bind ((map1@v4 (\v@v9 -> 
                (add v@v9 one@v8)
              )) ((
                Snapshot.TransformerStateT01.monadEffectState
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
                (((
                  Bind1@v2
                ).bind ((
                  Snapshot.TransformerStateT01.monadStateStateT
                ).state (\v@v10 -> 
                  (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
                ))) (\$__unused@v10 -> 
                  (((
                    Bind1@v2
                  ).bind (((
                    Apply0@v3
                  ).apply ((map1@v4 Data.Semiring.intAdd) ((
                    Snapshot.TransformerStateT01.monadEffectState
                  ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                    Snapshot.TransformerStateT01.monadEffectState
                  ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                    (((
                      Bind1@v2
                    ).bind ((
                      Snapshot.TransformerStateT01.monadStateStateT
                    ).state (\s@v12 -> 
                      let s'@v13 =
                        (add s@v12 i3@v11);
                      (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                    ))) (\result@v12 -> 
                      (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                    ))
                  ))
                ))
              ))
            ))
          ))
        ));
      v6;
    (v5 2)
  ]]
---------------
Snapshot.TransformerStateT01.test3 (Step 7)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  let pure1@v5 =
    (
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)
    ).pure;
  {#- Rewrite - Inline -#}
  let v6 =
    (((
      Bind1@v2
    ).bind ((
      Snapshot.TransformerStateT01.monadEffectState
    ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
      (((
        Bind1@v2
      ).bind ((
        Snapshot.TransformerStateT01.monadEffectState
      ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
        (((
          Bind1@v2
        ).bind get1@v0) (\one@v8 -> 
          (((
            Bind1@v2
          ).bind ((map1@v4 (\v@v9 -> 
            (add v@v9 one@v8)
          )) ((
            Snapshot.TransformerStateT01.monadEffectState
          ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
            (((
              Bind1@v2
            ).bind ((
              Snapshot.TransformerStateT01.monadStateStateT
            ).state (\v@v10 -> 
              (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
            ))) (\$__unused@v10 -> 
              (((
                Bind1@v2
              ).bind (((
                Apply0@v3
              ).apply ((map1@v4 Data.Semiring.intAdd) ((
                Snapshot.TransformerStateT01.monadEffectState
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
                Snapshot.TransformerStateT01.monadEffectState
              ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
                (((
                  Bind1@v2
                ).bind ((
                  Snapshot.TransformerStateT01.monadStateStateT
                ).state (\s@v12 -> 
                  let s'@v13 =
                    (add s@v12 i3@v11);
                  (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
                ))) (\result@v12 -> 
                  (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
                ))
              ))
            ))
          ))
        ))
      ))
    ));
  (v6 2)
---------------
Snapshot.TransformerStateT01.test3 (Step 8; Final)
  let get1@v0 =
    ((
      Snapshot.TransformerStateT01.monadStateStateT
    ).state (\s@v0 -> 
      (Data.Tuple.Tuple.Tuple s@v0 s@v0)
    ));
  let Monad0@v1 =
    ((
      Snapshot.TransformerStateT01.monadEffectState
    ).Monad0 <PrimUndefined>);
  let Bind1@v2 =
    ((
      Monad0@v1
    ).Bind1 <PrimUndefined>);
  let Apply0@v3 =
    ((
      Bind1@v2
    ).Apply0 <PrimUndefined>);
  let map1@v4 =
    (
      ((
        Apply0@v3
      ).Functor0 <PrimUndefined>)
    ).map;
  let pure1@v5 =
    (
      ((
        Monad0@v1
      ).Applicative0 <PrimUndefined>)
    ).pure;
  ((((
    Bind1@v2
  ).bind ((
    Snapshot.TransformerStateT01.monadEffectState
  ).liftEffect (Effect.Console.log "foo"))) (\$__unused@v6 -> 
    (((
      Bind1@v2
    ).bind ((
      Snapshot.TransformerStateT01.monadEffectState
    ).liftEffect ((Effect.Random.randomInt 1) 10))) (\i1@v7 -> 
      (((
        Bind1@v2
      ).bind get1@v0) (\one@v8 -> 
        (((
          Bind1@v2
        ).bind ((map1@v4 (\v@v9 -> 
          (add v@v9 one@v8)
        )) ((
          Snapshot.TransformerStateT01.monadEffectState
        ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i2@v9 -> 
          (((
            Bind1@v2
          ).bind ((
            Snapshot.TransformerStateT01.monadStateStateT
          ).state (\v@v10 -> 
            (Data.Tuple.Tuple.Tuple <PrimUndefined> i2@v9)
          ))) (\$__unused@v10 -> 
            (((
              Bind1@v2
            ).bind (((
              Apply0@v3
            ).apply ((map1@v4 Data.Semiring.intAdd) ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) ((
              Snapshot.TransformerStateT01.monadEffectState
            ).liftEffect ((Effect.Random.randomInt 1) 10)))) (\i3@v11 -> 
              (((
                Bind1@v2
              ).bind ((
                Snapshot.TransformerStateT01.monadStateStateT
              ).state (\s@v12 -> 
                let s'@v13 =
                  (add s@v12 i3@v11);
                (Data.Tuple.Tuple.Tuple s'@v13 s'@v13)
              ))) (\result@v12 -> 
                (pure1@v5 (Data.Show.showIntImpl (add i1@v7 result@v12)))
              ))
            ))
          ))
        ))
      ))
    ))
  )) 2)