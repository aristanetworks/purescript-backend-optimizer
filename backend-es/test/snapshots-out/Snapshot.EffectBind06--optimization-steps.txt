Snapshot.EffectBind06.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.EffectBind06.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.EffectBind06.bind (Step 0; Original)
  (Control.Bind.bind Effect.bindEffect)
---------------
Snapshot.EffectBind06.bind (Step 1; Final)
  Effect.bindE

===============

Snapshot.EffectBind06.pure (Step 0; Original)
  (Control.Applicative.pure Effect.applicativeEffect)
---------------
Snapshot.EffectBind06.pure (Step 1; Final)
  Effect.pureE

===============

Snapshot.EffectBind06.sub (Step 0; Original)
  (Data.Ring.sub Data.Ring.ringInt)
---------------
Snapshot.EffectBind06.sub (Step 1; Final)
  Data.Ring.intSub

===============

Snapshot.EffectBind06.test (Step 0; Original)
  (\random@v0 ->
    (Snapshot.EffectBind06.bind
      random@v0
      (\x@v1 ->
        (Snapshot.EffectBind06.bind
          (Snapshot.EffectBind06.bind
            random@v0
            (\x1@v2 ->
              (Snapshot.EffectBind06.bind
                random@v0
                (\y@v3 ->
                  (Snapshot.EffectBind06.pure
                    ((Snapshot.EffectBind06.add x1@v2) y@v3)
                  )
                )
              )
            )
          )
          (\n@v2 ->
            (Snapshot.EffectBind06.bind
              random@v0
              (\m@v3 ->
                (Snapshot.EffectBind06.pure
                  (Snapshot.EffectBind06.sub
                    ((Snapshot.EffectBind06.add x@v1) n@v2)
                    m@v3
                  )
                )
              )
            )
          )
        )
      )
    )
  )
---------------
Snapshot.EffectBind06.test (Step 1)
  (\random@v0 ->
    letEffect x@v1 = random@v0;
    -- Inline v2
    let v2 =
      letEffect x1@v2 = random@v0;
      letEffect y@v3 = random@v0;
      let v4 = ((add x1@v2) y@v3);
      -- Inline v5
      let v5 = (# effectPure v4 #);
      v5;
    -- Inline v3
    let v3 =
      letEffect n@v3 = v2;
      letEffect m@v4 = random@v0;
      -- LetAssoc
      let v5 =
        let v5 = ((add x@v1) n@v3);
        -- Inline v6
        let v6 = (\v6 -> ((subtract v5) v6));
        (v6 m@v4);
      -- Inline v6
      let v6 = (# effectPure v5 #);
      v6;
    v3
  )
---------------
Snapshot.EffectBind06.test (Step 2)
  (\random@v0 ->
    letEffect x@v1 = random@v0;
    -- EffectBindAssoc
    let n@v2 =
      letEffect x1@v2 = random@v0;
      letEffect y@v3 = random@v0;
      -- Inline v4
      let v4 = ((add x1@v2) y@v3);
      (# effectPure v4 #);
    letEffect m@v3 = random@v0;
    -- Inline v4
    let v4 = ((add x@v1) n@v2);
    -- Inline v5
    let v5 = ((subtract v4) m@v3);
    (# effectPure v5 #)
  )
---------------
Snapshot.EffectBind06.test (Step 3)
  (\random@v0 ->
    letEffect x@v1 = random@v0;
    letEffect x1@v2 = random@v0;
    -- EffectBindAssoc
    let n@v3 =
      letEffect y@v3 = random@v0;
      (# effectPure ((add x1@v2) y@v3) #);
    letEffect m@v4 = random@v0;
    (# effectPure ((subtract ((add x@v1) n@v3)) m@v4) #)
  )
---------------
Snapshot.EffectBind06.test (Step 4)
  (\random@v0 ->
    letEffect x@v1 = random@v0;
    letEffect x1@v2 = random@v0;
    letEffect y@v3 = random@v0;
    -- Inline n@v4
    let n@v4 = ((add x1@v2) y@v3);
    letEffect m@v5 = random@v0;
    (# effectPure ((subtract ((add x@v1) n@v4)) m@v5) #)
  )
---------------
Snapshot.EffectBind06.test (Step 5; Final)
  (\random@v0 ->
    letEffect x@v1 = random@v0;
    letEffect x1@v2 = random@v0;
    letEffect y@v3 = random@v0;
    letEffect m@v4 = random@v0;
    (# effectPure ((subtract ((add x@v1) ((add x1@v2) y@v3))) m@v4) #)
  )