Snapshot.STArray03.bind (Step 0; Original)
  (Control.Bind.bind Control.Monad.ST.Internal.bindST)
---------------
Snapshot.STArray03.bind (Step 1; Final)
  Control.Monad.ST.Internal.bind_

===============

Snapshot.STArray03.compose (Step 0; Original)
  (Control.Semigroupoid.compose Control.Semigroupoid.semigroupoidFn)
---------------
Snapshot.STArray03.compose (Step 1; Final)
  Control.Semigroupoid.semigroupoidFn.compose

===============

Snapshot.STArray03.discard (Step 0; Original)
  (Control.Bind.discard
    Control.Bind.discardUnit
    Control.Monad.ST.Internal.bindST
  )
---------------
Snapshot.STArray03.discard (Step 1; Final)
  Control.Monad.ST.Internal.bind_

===============

Snapshot.STArray03.pure (Step 0; Original)
  (Control.Applicative.pure Control.Monad.ST.Internal.applicativeST)
---------------
Snapshot.STArray03.pure (Step 1; Final)
  Control.Monad.ST.Internal.pure_

===============

Snapshot.STArray03.test1 (Step 0; Original)
  (\f@v0 -> \as@v1 ->
    (Data.Array.ST.run
      (Snapshot.STArray03.bind
        Data.Array.ST.new
        (\bs@v2 ->
          (Snapshot.STArray03.discard
            (Control.Monad.ST.Internal.foreach
              as@v1
              (\a@v3 ->
                (Snapshot.STArray03.void
                  ((Data.Array.ST.push (f@v0 a@v3)) bs@v2)
                )
              )
            )
            (\$__unused@v3 -> (Snapshot.STArray03.pure bs@v2))
          )
        )
      )
    )
  )
---------------
Snapshot.STArray03.test1 (Step 1)
  (\f@v0 -> \as@v1 ->
    -- Inline v2
    let v2 =
      letEffect bs@v2 = Data.Array.ST.new;
      -- Inline v3
      let v3 =
        (# effectDefer
          (-- Stop
          Control.Monad.ST.Internal.foreach
            as@v1
            (\a@v3 ->
              (# effectDefer
                -- LetAssoc
                let v4 =
                  let v4 = (f@v0 a@v3);
                  -- Inline v5
                  let v5 =
                    (\v5 ->
                      (# effectDefer
                        (-- Stop
                        Data.Array.ST.pushAll
                          [ v4 ]
                          v5
                        )
                      #)
                    );
                  (v5 bs@v2);
                letEffect v5 = v4;
                (# effectPure <PrimUndefined> #)
              #)
            )
          )
        #);
      -- Inline v4
      let v4 =
        letEffect $__unused@v4 = v3;
        (# effectPure bs@v2 #);
      v4;
    -- Inline v3
    let v3 = (Control.Monad.ST.Internal.run v2);
    v3
  )
---------------
Snapshot.STArray03.test1 (Step 2)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              let v4 = (f@v0 a@v3);
              -- Inline v5
              let v5 =
                (# effectDefer
                  (-- Stop
                  Data.Array.ST.pushAll
                    [ v4 ]
                    bs@v2
                  )
                #);
              letEffect v6 = v5;
              (# effectPure <PrimUndefined> #)
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )
---------------
Snapshot.STArray03.test1 (Step 3)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              -- Inline v4
              let v4 = (f@v0 a@v3);
              letEffect v5 =
                (-- Stop
                Data.Array.ST.pushAll
                  [ v4 ]
                  bs@v2
                );
              (# effectPure <PrimUndefined> #)
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )
---------------
Snapshot.STArray03.test1 (Step 4; Final)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              letEffect v4 =
                (-- Stop
                Data.Array.ST.pushAll
                  [ (f@v0 a@v3) ]
                  bs@v2
                );
              (# effectPure <PrimUndefined> #)
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )

===============

Snapshot.STArray03.test2 (Step 0; Original)
  (\f@v0 -> \as@v1 ->
    (Data.Array.ST.run
      (Snapshot.STArray03.bind
        Data.Array.ST.new
        (\bs@v2 ->
          (Snapshot.STArray03.discard
            (Control.Monad.ST.Internal.foreach
              as@v1
              (\a@v3 ->
                -- Inline as'@v4
                let as'@v4 = (f@v0 a@v3);
                (Control.Monad.ST.Internal.foreach
                  as'@v4
                  (Snapshot.STArray03.compose
                    Snapshot.STArray03.void
                    ((Data.Function.flip Data.Array.ST.push) bs@v2)
                  )
                )
              )
            )
            (\$__unused@v3 -> (Snapshot.STArray03.pure bs@v2))
          )
        )
      )
    )
  )
---------------
Snapshot.STArray03.test2 (Step 1)
  (\f@v0 -> \as@v1 ->
    -- Inline v2
    let v2 =
      letEffect bs@v2 = Data.Array.ST.new;
      -- Inline v3
      let v3 =
        (# effectDefer
          (-- Stop
          Control.Monad.ST.Internal.foreach
            as@v1
            (\a@v3 ->
              (# effectDefer
                let v4 = (f@v0 a@v3);
                -- LetAssoc
                let v5 =
                  let v5 =
                    -- Inline v5
                    let v5 =
                      (\v5 ->
                        letEffect v6 = v5;
                        (# effectPure <PrimUndefined> #)
                      );
                    -- Inline v6
                    let v6 =
                      -- Inline v6
                      let v6 =
                        (\a@v6 ->
                          (# effectDefer
                            (-- Stop
                            Data.Array.ST.pushAll
                              [ a@v6 ]
                              bs@v2
                            )
                          #)
                        );
                      (\x@v7 -> (v5 (v6 x@v7)));
                    v6;
                  (# effectDefer
                    (-- Stop
                    Control.Monad.ST.Internal.foreach
                      v4
                      (\v6 -> (# effectDefer (v5 v6) #))
                    )
                  #);
                v5
              #)
            )
          )
        #);
      -- Inline v4
      let v4 =
        letEffect $__unused@v4 = v3;
        (# effectPure bs@v2 #);
      v4;
    -- Inline v3
    let v3 = (Control.Monad.ST.Internal.run v2);
    v3
  )
---------------
Snapshot.STArray03.test2 (Step 2)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              let v4 = (f@v0 a@v3);
              -- Inline v5
              let v5 =
                (\x@v5 ->
                  -- Inline v6
                  let v6 =
                    (# effectDefer
                      (-- Stop
                      Data.Array.ST.pushAll
                        [ x@v5 ]
                        bs@v2
                      )
                    #);
                  letEffect v7 = v6;
                  (# effectPure <PrimUndefined> #)
                );
              -- Inline v6
              let v6 =
                (# effectDefer
                  (-- Stop
                  Control.Monad.ST.Internal.foreach
                    v4
                    (\v6 -> (# effectDefer (v5 v6) #))
                  )
                #);
              v6
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )
---------------
Snapshot.STArray03.test2 (Step 3)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              -- Inline v4
              let v4 = (f@v0 a@v3);
              (# effectDefer
                (-- Stop
                Control.Monad.ST.Internal.foreach
                  v4
                  (\v5 ->
                    (# effectDefer
                      letEffect v6 =
                        (-- Stop
                        Data.Array.ST.pushAll
                          [ v5 ]
                          bs@v2
                        );
                      (# effectPure <PrimUndefined> #)
                    #)
                  )
                )
              #)
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )
---------------
Snapshot.STArray03.test2 (Step 4; Final)
  (\f@v0 -> \as@v1 ->
    (Control.Monad.ST.Internal.run
      letEffect bs@v2 = Data.Array.ST.new;
      letEffect $__unused@v3 =
        (-- Stop
        Control.Monad.ST.Internal.foreach
          as@v1
          (\a@v3 ->
            (# effectDefer
              (-- Stop
              Control.Monad.ST.Internal.foreach
                (f@v0 a@v3)
                (\v4 ->
                  (# effectDefer
                    letEffect v5 =
                      (-- Stop
                      Data.Array.ST.pushAll
                        [ v4 ]
                        bs@v2
                      );
                    (# effectPure <PrimUndefined> #)
                  #)
                )
              )
            #)
          )
        );
      (# effectPure bs@v2 #)
    )
  )

===============

Snapshot.STArray03.void (Step 0; Original)
  (Data.Functor.void Control.Monad.ST.Internal.functorST)
---------------
Snapshot.STArray03.void (Step 1)
  -- Inline v0
  let v0 = (\v@v0 -> <PrimUndefined>);
  -- Inline v1
  let v1 =
    -- Inline v1
    let v1 =
      -- Inline v1
      let v1 =
        (\v1 ->
          letEffect v2 = v1;
          (# effectPure (v0 v2) #)
        );
      v1;
    v1;
  v1
---------------
Snapshot.STArray03.void (Step 2; Final)
  (\v0 ->
    letEffect v1 = v0;
    (# effectPure <PrimUndefined> #)
  )