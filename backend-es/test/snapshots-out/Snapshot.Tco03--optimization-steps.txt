Snapshot.Tco03.eq (Step 0; Original)
  (Data.Eq.eq Data.Eq.eqInt)
---------------
Snapshot.Tco03.eq (Step 1; Final)
  Data.Eq.eqIntImpl

===============

Snapshot.Tco03.lessThanOrEq (Step 0; Original)
  (Data.Ord.lessThanOrEq Data.Ord.ordInt)
---------------
Snapshot.Tco03.lessThanOrEq (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (<= a1@v0 a2@v1)
  )

===============

Snapshot.Tco03.sub (Step 0; Original)
  (Data.Ring.sub Data.Ring.ringInt)
---------------
Snapshot.Tco03.sub (Step 1; Final)
  Data.Ring.intSub

===============

Snapshot.Tco03.test (Step 0; Original)
  letrec
    let go@v0 =
      (\n@v1 -> 
        letrec
          let k@v2 =
            (\m@v3 -> 
              {#- Rewrite - Inline -#}
              let v4 =
                ((Snapshot.Tco03.eq m@v3) 100);
              {#- Rewrite - Inline -#}
              let v5 =
                (\ ->
                  (go@v0 ((Snapshot.Tco03.sub m@v3) 1))
                );
              {#- Rewrite - Inline -#}
              let v6 =
                (\ ->
                  {#- Rewrite - Inline -#}
                  let v6 =
                    ((Snapshot.Tco03.eq m@v3) 900);
                  {#- Rewrite - Inline -#}
                  let v7 =
                    (\ ->
                      42
                    );
                  {#- Rewrite - Inline -#}
                  let v8 =
                    (\ ->
                      (k@v2 ((Snapshot.Tco03.sub m@v3) 1))
                    );
                  if (== v6 true) then
                    (v7)
                  else
                    (v8)
                );
              if (== v4 true) then
                (v5)
              else
                (v6)
            );
        {#- Rewrite - Inline -#}
        let v3 =
          ((Snapshot.Tco03.eq n@v1) 0);
        {#- Rewrite - Inline -#}
        let v4 =
          (\ ->
            n@v1
          );
        {#- Rewrite - Inline -#}
        let v5 =
          (\ ->
            {#- Rewrite - Inline -#}
            let v5 =
              ((Snapshot.Tco03.lessThanOrEq n@v1) 100);
            {#- Rewrite - Inline -#}
            let v6 =
              (\ ->
                (go@v0 ((Snapshot.Tco03.sub n@v1) 1))
              );
            {#- Rewrite - Inline -#}
            let v7 =
              (\ ->
                (k@v2 ((Snapshot.Tco03.sub n@v1) 1))
              );
            if (== v5 true) then
              (v6)
            else
              (v7)
          );
        if (== v3 true) then
          (v4)
        else
          (v5)
      );
  go@v0
---------------
Snapshot.Tco03.test (Step 1)
  letrec
    let go@v0 =
      (\n@v1 -> 
        letrec
          let k@v2 =
            (\m@v3 -> 
              if {#- Rewrite - Inline -#}
                let v4 =
                  100;
                (== m@v3 v4) then
                (go@v0 {#- Rewrite - Inline -#}
                let v4 =
                  1;
                (subtract m@v3 v4))
              else if {#- Rewrite - Inline -#}
                let v4 =
                  900;
                (== m@v3 v4) then
                42
              else
                (k@v2 {#- Rewrite - Inline -#}
                let v4 =
                  1;
                (subtract m@v3 v4))
            );
        if {#- Rewrite - Inline -#}
          let v3 =
            0;
          (== n@v1 v3) then
          n@v1
        else if {#- Rewrite - Inline -#}
          let v3 =
            100;
          (<= n@v1 v3) then
          (go@v0 {#- Rewrite - Inline -#}
          let v3 =
            1;
          (subtract n@v1 v3))
        else
          (k@v2 {#- Rewrite - Inline -#}
          let v3 =
            1;
          (subtract n@v1 v3))
      );
  go@v0
---------------
Snapshot.Tco03.test (Step 2; Final)
  letrec
    let go@v0 =
      (\n@v1 -> 
        letrec
          let k@v2 =
            (\m@v3 -> 
              if (== m@v3 100) then
                (go@v0 (subtract m@v3 1))
              else if (== m@v3 900) then
                42
              else
                (k@v2 (subtract m@v3 1))
            );
        if (== n@v1 0) then
          n@v1
        else if (<= n@v1 100) then
          (go@v0 (subtract n@v1 1))
        else
          (k@v2 (subtract n@v1 1))
      );
  go@v0