Snapshot.FunctionCompose03.compose (Step 0; Original)
  (Control.Semigroupoid.compose Control.Semigroupoid.semigroupoidFn)
---------------
Snapshot.FunctionCompose03.compose (Step 1; Final)
  Control.Semigroupoid.semigroupoidFn.compose

===============

Snapshot.FunctionCompose03.test1 (Step 0; Original)
  (\f@v0 -> \g@v1 ->
    (Snapshot.FunctionCompose03.compose
      (f@v0 Data.Unit.unit)
      (g@v1 Data.Unit.unit)
    )
  )
---------------
Snapshot.FunctionCompose03.test1 (Step 1)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    -- LetAssoc
    let v3 =
      let v3 = (g@v1 <PrimUndefined>);
      (\x@v4 -> (v2 (v3 x@v4)));
    v3
  )
---------------
Snapshot.FunctionCompose03.test1 (Step 2)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    let v3 = (g@v1 <PrimUndefined>);
    -- Inline v4
    let v4 = (\x@v4 -> (v2 (v3 x@v4)));
    v4
  )
---------------
Snapshot.FunctionCompose03.test1 (Step 3; Final)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    let v3 = (g@v1 <PrimUndefined>);
    (\x@v4 -> (v2 (v3 x@v4)))
  )

===============

Snapshot.FunctionCompose03.test2 (Step 0; Original)
  (\f@v0 -> \g@v1 ->
    (Snapshot.FunctionCompose03.compose
      (g@v1 Data.Unit.unit)
      (Snapshot.FunctionCompose03.compose
        (f@v0 Data.Unit.unit)
        (g@v1 Data.Unit.unit)
      )
    )
  )
---------------
Snapshot.FunctionCompose03.test2 (Step 1)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    -- LetAssoc
    let v3 =
      let v3 =
        let v3 = (f@v0 <PrimUndefined>);
        -- LetAssoc
        let v4 =
          let v4 = (g@v1 <PrimUndefined>);
          (\x@v5 -> (v3 (v4 x@v5)));
        v4;
      (\x@v4 -> (v2 (v3 x@v4)));
    v3
  )
---------------
Snapshot.FunctionCompose03.test2 (Step 2)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    -- LetAssoc
    let v4 =
      let v4 = (g@v1 <PrimUndefined>);
      -- Inline v5
      let v5 = (\x@v5 -> (v3 (v4 x@v5)));
      v5;
    -- Inline v5
    let v5 = (\x@v5 -> (v2 (v4 x@v5)));
    v5
  )
---------------
Snapshot.FunctionCompose03.test2 (Step 3)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    let v4 = (g@v1 <PrimUndefined>);
    -- Inline v5
    let v5 = (\x@v5 -> (v3 (v4 x@v5)));
    (\x@v6 -> (v2 (v5 x@v6)))
  )
---------------
Snapshot.FunctionCompose03.test2 (Step 4; Final)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    let v4 = (g@v1 <PrimUndefined>);
    (\x@v5 -> (v2 (v3 (v4 x@v5))))
  )

===============

Snapshot.FunctionCompose03.test3 (Step 0; Original)
  (\f@v0 -> \g@v1 ->
    (Snapshot.FunctionCompose03.compose
      (Snapshot.FunctionCompose03.compose
        (f@v0 Data.Unit.unit)
        (g@v1 Data.Unit.unit)
      )
      (Snapshot.FunctionCompose03.compose
        (f@v0 Data.Unit.unit)
        (g@v1 Data.Unit.unit)
      )
    )
  )
---------------
Snapshot.FunctionCompose03.test3 (Step 1)
  (\f@v0 -> \g@v1 ->
    -- LetAssoc
    let v2 =
      let v2 = (f@v0 <PrimUndefined>);
      -- LetAssoc
      let v3 =
        let v3 = (g@v1 <PrimUndefined>);
        (\x@v4 -> (v2 (v3 x@v4)));
      v3;
    -- LetAssoc
    let v3 =
      let v3 =
        let v3 = (f@v0 <PrimUndefined>);
        -- LetAssoc
        let v4 =
          let v4 = (g@v1 <PrimUndefined>);
          (\x@v5 -> (v3 (v4 x@v5)));
        v4;
      (\x@v4 -> (v2 (v3 x@v4)));
    v3
  )
---------------
Snapshot.FunctionCompose03.test3 (Step 2)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    -- LetAssoc
    let v3 =
      let v3 = (g@v1 <PrimUndefined>);
      -- Inline v4
      let v4 = (\x@v4 -> (v2 (v3 x@v4)));
      v4;
    let v4 = (f@v0 <PrimUndefined>);
    -- LetAssoc
    let v5 =
      let v5 = (g@v1 <PrimUndefined>);
      -- Inline v6
      let v6 = (\x@v6 -> (v4 (v5 x@v6)));
      v6;
    -- Inline v6
    let v6 = (\x@v6 -> (v3 (v5 x@v6)));
    v6
  )
---------------
Snapshot.FunctionCompose03.test3 (Step 3)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    let v3 = (g@v1 <PrimUndefined>);
    -- Inline v4
    let v4 = (\x@v4 -> (v2 (v3 x@v4)));
    let v5 = (f@v0 <PrimUndefined>);
    let v6 = (g@v1 <PrimUndefined>);
    -- Inline v7
    let v7 = (\x@v7 -> (v5 (v6 x@v7)));
    (\x@v8 -> (v4 (v7 x@v8)))
  )
---------------
Snapshot.FunctionCompose03.test3 (Step 4)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    let v3 = (g@v1 <PrimUndefined>);
    let v4 = (f@v0 <PrimUndefined>);
    let v5 = (g@v1 <PrimUndefined>);
    (\x@v6 ->
      -- Inline v7
      let v7 = (v4 (v5 x@v6));
      (v2 (v3 v7))
    )
  )
---------------
Snapshot.FunctionCompose03.test3 (Step 5; Final)
  (\f@v0 -> \g@v1 ->
    let v2 = (f@v0 <PrimUndefined>);
    let v3 = (g@v1 <PrimUndefined>);
    let v4 = (f@v0 <PrimUndefined>);
    let v5 = (g@v1 <PrimUndefined>);
    (\x@v6 -> (v2 (v3 (v4 (v5 x@v6)))))
  )

===============

Snapshot.FunctionCompose03.test4 (Step 0; Original)
  (\f@v0 -> \g@v1 ->
    (Snapshot.FunctionCompose03.compose
      (Snapshot.FunctionCompose03.compose
        (Snapshot.FunctionCompose03.compose
          (g@v1 Data.Unit.unit)
          (f@v0 Data.Unit.unit)
        )
        (g@v1 Data.Unit.unit)
      )
      (Snapshot.FunctionCompose03.compose
        (f@v0 Data.Unit.unit)
        (g@v1 Data.Unit.unit)
      )
    )
  )
---------------
Snapshot.FunctionCompose03.test4 (Step 1)
  (\f@v0 -> \g@v1 ->
    -- LetAssoc
    let v2 =
      let v2 =
        let v2 = (g@v1 <PrimUndefined>);
        -- LetAssoc
        let v3 =
          let v3 = (f@v0 <PrimUndefined>);
          (\x@v4 -> (v2 (v3 x@v4)));
        v3;
      -- LetAssoc
      let v3 =
        let v3 = (g@v1 <PrimUndefined>);
        (\x@v4 -> (v2 (v3 x@v4)));
      v3;
    -- LetAssoc
    let v3 =
      let v3 =
        let v3 = (f@v0 <PrimUndefined>);
        -- LetAssoc
        let v4 =
          let v4 = (g@v1 <PrimUndefined>);
          (\x@v5 -> (v3 (v4 x@v5)));
        v4;
      (\x@v4 -> (v2 (v3 x@v4)));
    v3
  )
---------------
Snapshot.FunctionCompose03.test4 (Step 2)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    -- LetAssoc
    let v3 =
      let v3 = (f@v0 <PrimUndefined>);
      -- Inline v4
      let v4 = (\x@v4 -> (v2 (v3 x@v4)));
      v4;
    -- LetAssoc
    let v4 =
      let v4 = (g@v1 <PrimUndefined>);
      -- Inline v5
      let v5 = (\x@v5 -> (v3 (v4 x@v5)));
      v5;
    let v5 = (f@v0 <PrimUndefined>);
    -- LetAssoc
    let v6 =
      let v6 = (g@v1 <PrimUndefined>);
      -- Inline v7
      let v7 = (\x@v7 -> (v5 (v6 x@v7)));
      v7;
    -- Inline v7
    let v7 = (\x@v7 -> (v4 (v6 x@v7)));
    v7
  )
---------------
Snapshot.FunctionCompose03.test4 (Step 3)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    -- Inline v4
    let v4 = (\x@v4 -> (v2 (v3 x@v4)));
    let v5 = (g@v1 <PrimUndefined>);
    -- Inline v6
    let v6 = (\x@v6 -> (v4 (v5 x@v6)));
    let v7 = (f@v0 <PrimUndefined>);
    let v8 = (g@v1 <PrimUndefined>);
    -- Inline v9
    let v9 = (\x@v9 -> (v7 (v8 x@v9)));
    (\x@v10 -> (v6 (v9 x@v10)))
  )
---------------
Snapshot.FunctionCompose03.test4 (Step 4)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    let v4 = (g@v1 <PrimUndefined>);
    let v5 = (f@v0 <PrimUndefined>);
    let v6 = (g@v1 <PrimUndefined>);
    (\x@v7 ->
      -- Inline v8
      let v8 = (v5 (v6 x@v7));
      -- Inline v9
      let v9 = (v4 v8);
      -- Inline v10
      let v10 = (v2 (v3 v9));
      v10
    )
  )
---------------
Snapshot.FunctionCompose03.test4 (Step 5; Final)
  (\f@v0 -> \g@v1 ->
    let v2 = (g@v1 <PrimUndefined>);
    let v3 = (f@v0 <PrimUndefined>);
    let v4 = (g@v1 <PrimUndefined>);
    let v5 = (f@v0 <PrimUndefined>);
    let v6 = (g@v1 <PrimUndefined>);
    (\x@v7 -> (v2 (v3 (v4 (v5 (v6 x@v7))))))
  )