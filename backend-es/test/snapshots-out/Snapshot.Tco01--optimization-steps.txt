Snapshot.Tco01.eq (Step 0; Original)
  (Data.Eq.eq Data.Eq.eqInt)
---------------
Snapshot.Tco01.eq (Step 1; Final)
  Data.Eq.eqIntImpl

===============

Snapshot.Tco01.sub (Step 0; Original)
  (Data.Ring.sub Data.Ring.ringInt)
---------------
Snapshot.Tco01.sub (Step 1; Final)
  Data.Ring.intSub

===============

Snapshot.Tco01.test (Step 0; Original)
  (\n@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      ((Snapshot.Tco01.eq n@v0) 0);
    {#- Rewrite - Inline -#}
    let v2 =
      (\ ->
        n@v0
      );
    {#- Rewrite - Inline -#}
    let v3 =
      (\ ->
        (Snapshot.Tco01.test ((Snapshot.Tco01.sub n@v0) 1))
      );
    if (== v1 true) then
      (v2)
    else
      (v3)
  )
---------------
Snapshot.Tco01.test (Step 1)
  (\n@v0 -> 
    if {#- Rewrite - Inline -#}
      let v1 =
        0;
      (== n@v0 v1) then
      n@v0
    else
      (Snapshot.Tco01.test {#- Rewrite - Inline -#}
      let v1 =
        1;
      (subtract n@v0 v1))
  )
---------------
Snapshot.Tco01.test (Step 2; Final)
  (\n@v0 -> 
    if (== n@v0 0) then
      n@v0
    else
      (Snapshot.Tco01.test (subtract n@v0 1))
  )