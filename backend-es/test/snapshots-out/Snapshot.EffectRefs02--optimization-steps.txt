Snapshot.EffectRefs02.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.EffectRefs02.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.EffectRefs02.bind (Step 0; Original)
  (Control.Bind.bind Effect.bindEffect)
---------------
Snapshot.EffectRefs02.bind (Step 1; Final)
  Effect.bindE

===============

Snapshot.EffectRefs02.discard (Step 0; Original)
  ((Control.Bind.discard Control.Bind.discardUnit) Effect.bindEffect)
---------------
Snapshot.EffectRefs02.discard (Step 1; Final)
  Effect.bindE

===============

Snapshot.EffectRefs02.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordInt)
---------------
Snapshot.EffectRefs02.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (< a1@v0 a2@v1)
  )

===============

Snapshot.EffectRefs02.pure (Step 0; Original)
  (Control.Applicative.pure Effect.applicativeEffect)
---------------
Snapshot.EffectRefs02.pure (Step 1; Final)
  Effect.pureE

===============

Snapshot.EffectRefs02.test1 (Step 0; Original)
  (\hi@v0 -> 
    ((Snapshot.EffectRefs02.bind (Effect.Ref.new 0)) (\count@v1 -> 
      ((Snapshot.EffectRefs02.bind (Effect.Ref.new true)) (\continue@v2 -> 
        ((Snapshot.EffectRefs02.discard ((Effect.whileE (Effect.Ref.read continue@v2)) ((Snapshot.EffectRefs02.bind (Effect.Ref.read count@v1)) (\n@v3 -> 
          (Snapshot.EffectRefs02.void {#- Rewrite - Inline -#}
          let v4 =
            ((Snapshot.EffectRefs02.lessThan n@v3) hi@v0);
          {#- Rewrite - Inline -#}
          let v5 =
            (\ ->
              ((Effect.Ref.write ((Snapshot.EffectRefs02.add n@v3) 1)) count@v1)
            );
          {#- Rewrite - Inline -#}
          let v6 =
            (\ ->
              ((Effect.Ref.write false) continue@v2)
            );
          if (== v4 true) then
            (v5)
          else
            (v6))
        )))) (\$__unused@v3 -> 
          (Effect.Ref.read count@v1)
        ))
      ))
    ))
  )
---------------
Snapshot.EffectRefs02.test1 (Step 1)
  (\hi@v0 -> 
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        0;
      {#- Rewrite - Inline -#}
      let v2 =
        (refNew v1);
      v2;
    {#- Rewrite - Inline -#}
    let v2 =
      letEffect count@v2 =
        v1;
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          true;
        {#- Rewrite - Inline -#}
        let v4 =
          (refNew v3);
        v4;
      {#- Rewrite - Inline -#}
      let v4 =
        letEffect continue@v4 =
          v3;
        let v5 =
          {#- Rewrite - Inline -#}
          let v5 =
            (refRead continue@v4);
          [[ LetAssoc
            let v6 =
              {#- Rewrite - Inline -#}
              let v6 =
                (refRead count@v2);
              {#- Rewrite - Inline -#}
              let v7 =
                letEffect n@v7 =
                  v6;
                {#- Rewrite - Inline -#}
                let v8 =
                  if (< n@v7 hi@v0) then
                    let v8 =
                      {#- Rewrite - Inline -#}
                      let v8 =
                        1;
                      (add n@v7 v8);
                    {#- Rewrite - Inline -#}
                    let v9 =
                      (refWrite count@v2 v8);
                    v9
                  else
                    {#- Rewrite - Inline -#}
                    let v8 =
                      false;
                    {#- Rewrite - Inline -#}
                    let v9 =
                      (refWrite continue@v4 v8);
                    v9;
                (effectDefer letEffect a'@v9 =
                  v8;
                (effectPure <PrimUndefined>));
              v7;
            let v6 =
              (effectDefer (([[ Stop
                Effect.whileE
              ]] v5) (effectDefer v6)));
            v6
          ]];
        {#- Rewrite - Inline -#}
        let v6 =
          letEffect $__unused@v6 =
            v5;
          (refRead count@v2);
        v6;
      v4;
    v2
  )
---------------
Snapshot.EffectRefs02.test1 (Step 2)
  (\hi@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      (refNew 0);
    letEffect count@v2 =
      v1;
    {#- Rewrite - Inline -#}
    let v3 =
      (refNew true);
    letEffect continue@v4 =
      v3;
    {#- Rewrite - Inline -#}
    let v5 =
      {#- Rewrite - Inline -#}
      let v5 =
        letEffect n@v5 =
          (refRead count@v2);
        letEffect a'@v6 =
          if (< n@v5 hi@v0) then
            {#- Rewrite - Inline -#}
            let v6 =
              (add n@v5 1);
            (refWrite count@v2 v6)
          else
            (refWrite continue@v4 false);
        (effectPure <PrimUndefined>);
      {#- Rewrite - Inline -#}
      let v6 =
        (effectDefer (([[ Stop
          Effect.whileE
        ]] (refRead continue@v4)) (effectDefer v5)));
      v6;
    letEffect $__unused@v6 =
      v5;
    (refRead count@v2)
  )
---------------
Snapshot.EffectRefs02.test1 (Step 3; Final)
  (\hi@v0 -> 
    letEffect count@v1 =
      (refNew 0);
    letEffect continue@v2 =
      (refNew true);
    letEffect $__unused@v3 =
      (([[ Stop
        Effect.whileE
      ]] (refRead continue@v2)) (effectDefer letEffect n@v3 =
        (refRead count@v1);
      letEffect a'@v4 =
        if (< n@v3 hi@v0) then
          (refWrite count@v1 (add n@v3 1))
        else
          (refWrite continue@v2 false);
      (effectPure <PrimUndefined>)));
    (refRead count@v1)
  )

===============

Snapshot.EffectRefs02.test2 (Step 0; Original)
  ((Snapshot.EffectRefs02.bind (Effect.Ref.new 0)) (\count@v0 -> 
    (Snapshot.EffectRefs02.pure (\n@v1 -> 
      (Snapshot.EffectRefs02.void ((Effect.Ref.modify (\v@v2 -> 
        ((Snapshot.EffectRefs02.add v@v2) n@v1)
      )) count@v0))
    ))
  ))
---------------
Snapshot.EffectRefs02.test2 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      0;
    {#- Rewrite - Inline -#}
    let v1 =
      (refNew v0);
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect count@v1 =
      v0;
    {#- Rewrite - Inline -#}
    let v2 =
      (\n@v2 -> 
        let v3 =
          {#- Rewrite - Inline -#}
          let v3 =
            (\v@v3 -> 
              (add v@v3 n@v2)
            );
          {#- Rewrite - Inline -#}
          let v4 =
            letEffect v4 =
              (refRead count@v1);
            (refWrite count@v1 (v3 v4));
          v4;
        (effectDefer letEffect a'@v4 =
          v3;
        (effectPure <PrimUndefined>))
      );
    {#- Rewrite - Inline -#}
    let v3 =
      (effectPure v2);
    v3;
  v1
---------------
Snapshot.EffectRefs02.test2 (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    (refNew 0);
  letEffect count@v1 =
    v0;
  (effectPure (\n@v2 -> 
    {#- Rewrite - Inline -#}
    let v3 =
      letEffect v3 =
        (refRead count@v1);
      (refWrite count@v1 (add v3 n@v2));
    (effectDefer letEffect a'@v4 =
      v3;
    (effectPure <PrimUndefined>))
  ))
---------------
Snapshot.EffectRefs02.test2 (Step 3)
  letEffect count@v0 =
    (refNew 0);
  (effectPure (\n@v1 -> 
    (effectDefer [[ EffectBindAssoc
      letEffect v2 =
        (refRead count@v0);
      letEffect a'@v2 =
        (refWrite count@v0 (add v2 n@v1));
      (effectPure <PrimUndefined>)
    ]])
  ))
---------------
Snapshot.EffectRefs02.test2 (Step 4; Final)
  letEffect count@v0 =
    (refNew 0);
  (effectPure (\n@v1 -> 
    (effectDefer letEffect v2 =
      (refRead count@v0);
    letEffect a'@v3 =
      (refWrite count@v0 (add v2 n@v1));
    (effectPure <PrimUndefined>))
  ))

===============

Snapshot.EffectRefs02.test3 (Step 0; Original)
  ((Snapshot.EffectRefs02.bind (Effect.Ref.new 0)) (\count@v0 -> 
    (Snapshot.EffectRefs02.pure ((Data.Tuple.Tuple count@v0) (\n@v1 -> 
      (Snapshot.EffectRefs02.void ((Effect.Ref.modify (\v@v2 -> 
        ((Snapshot.EffectRefs02.add v@v2) n@v1)
      )) count@v0))
    )))
  ))
---------------
Snapshot.EffectRefs02.test3 (Step 1)
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      0;
    {#- Rewrite - Inline -#}
    let v1 =
      (refNew v0);
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    letEffect count@v1 =
      v0;
    let v2 =
      (Data.Tuple.Tuple.Tuple count@v1 (\n@v2 -> 
        let v3 =
          {#- Rewrite - Inline -#}
          let v3 =
            (\v@v3 -> 
              (add v@v3 n@v2)
            );
          {#- Rewrite - Inline -#}
          let v4 =
            letEffect v4 =
              (refRead count@v1);
            (refWrite count@v1 (v3 v4));
          v4;
        (effectDefer letEffect a'@v4 =
          v3;
        (effectPure <PrimUndefined>))
      ));
    {#- Rewrite - Inline -#}
    let v3 =
      (effectPure v2);
    v3;
  v1
---------------
Snapshot.EffectRefs02.test3 (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    (refNew 0);
  letEffect count@v1 =
    v0;
  {#- Rewrite - Inline -#}
  let v2 =
    (Data.Tuple.Tuple.Tuple count@v1 (\n@v2 -> 
      {#- Rewrite - Inline -#}
      let v3 =
        letEffect v3 =
          (refRead count@v1);
        (refWrite count@v1 (add v3 n@v2));
      (effectDefer letEffect a'@v4 =
        v3;
      (effectPure <PrimUndefined>))
    ));
  (effectPure v2)
---------------
Snapshot.EffectRefs02.test3 (Step 3)
  letEffect count@v0 =
    (refNew 0);
  (effectPure (Data.Tuple.Tuple.Tuple count@v0 (\n@v1 -> 
    (effectDefer [[ EffectBindAssoc
      letEffect v2 =
        (refRead count@v0);
      letEffect a'@v2 =
        (refWrite count@v0 (add v2 n@v1));
      (effectPure <PrimUndefined>)
    ]])
  )))
---------------
Snapshot.EffectRefs02.test3 (Step 4; Final)
  letEffect count@v0 =
    (refNew 0);
  (effectPure (Data.Tuple.Tuple.Tuple count@v0 (\n@v1 -> 
    (effectDefer letEffect v2 =
      (refRead count@v0);
    letEffect a'@v3 =
      (refWrite count@v0 (add v2 n@v1));
    (effectPure <PrimUndefined>))
  )))

===============

Snapshot.EffectRefs02.void (Step 0; Original)
  (Data.Functor.void Effect.functorEffect)
---------------
Snapshot.EffectRefs02.void (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\v@v0 -> 
      <PrimUndefined>
    );
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\a@v1 -> 
          (effectDefer letEffect a'@v2 =
            a@v1;
          (effectPure (v0 a'@v2)))
        );
      v1;
    v1;
  v1
---------------
Snapshot.EffectRefs02.void (Step 2; Final)
  (\a@v0 -> 
    (effectDefer letEffect a'@v1 =
      a@v0;
    (effectPure <PrimUndefined>))
  )