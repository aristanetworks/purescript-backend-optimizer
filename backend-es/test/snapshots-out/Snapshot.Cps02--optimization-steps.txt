Snapshot.Cps02.State (Step 0; Original)
  (\x@v0 -> x@v0)
---------------
Snapshot.Cps02.State (Step 1; Final)
  (\x@v0 -> x@v0)

===============

Snapshot.Cps02.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.Cps02.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.Cps02.applicativeState (Step 0; Original)
  { pure:
      (\a@v0 ->
        (Snapshot.Cps02.mkState (\next@v1 -> \s1@v2 -> ((next@v1 s1@v2) a@v0)))
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.applicativeState (Step 1)
  { pure:
      (\a@v0 ->
        -- Inline v1
        let v1 = (\next@v1 -> \s1@v2 -> ((next@v1 s1@v2) a@v0));
        (\k'@v2 s@v3 -> ((v1 (\v4 -> \v5 -> (k'@v2 v4 v5))) s@v3))
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.applicativeState (Step 2)
  { pure:
      (\a@v0 ->
        (\k'@v1 s@v2 ->
          -- Inline v3
          let v3 = (\v3 -> \v4 -> (k'@v1 v3 v4));
          ((v3 s@v2) a@v0)
        )
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.applicativeState (Step 3; Final)
  { pure:
      (\a@v0 -> (\k'@v1 s@v2 -> (k'@v1 s@v2 a@v0)))
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }

===============

Snapshot.Cps02.applyState (Step 0; Original)
  { apply:
      (Control.Monad.ap Snapshot.Cps02.monadState)
  , Functor0:
      (\$__unused@v0 -> Snapshot.Cps02.functorState)
  }
---------------
Snapshot.Cps02.applyState (Step 1)
  { apply:
      -- Inline bind@v0
      let bind@v0 =
        -- Inline v0
        let v0 = <PrimUndefined>;
        Snapshot.Cps02.bindState.bind;
      -- Inline v1
      let v1 =
        -- Inline v1
        let v1 =
          -- Inline pure@v1
          let pure@v1 =
            -- Inline v1
            let v1 = <PrimUndefined>;
            Snapshot.Cps02.applicativeState.pure;
          (\f@v2 -> \a@v3 ->
            (bind@v0
              f@v2
              (\f'@v4 -> ((bind@v0 a@v3) (\a'@v5 -> (pure@v1 (f'@v4 a'@v5)))))
            )
          );
        v1;
      v1
  , Functor0:
      (\$__unused@v0 -> Snapshot.Cps02.functorState)
  }
---------------
Snapshot.Cps02.applyState (Step 2)
  { apply:
      (\f@v0 -> \a@v1 ->
        -- Inline v2
        let v2 =
          (\f'@v2 ->
            -- Inline v3
            let v3 =
              (\a'@v3 -> (Snapshot.Cps02.applicativeState.pure (f'@v2 a'@v3)));
            (\k'@v4 s@v5 ->
              (a@v1 (\v6 v7 -> ((v3 v7) (\v8 v9 -> (k'@v4 v8 v9)) v6)) s@v5)
            )
          );
        (\k'@v3 s@v4 ->
          (f@v0 (\v5 v6 -> ((v2 v6) (\v7 v8 -> (k'@v3 v7 v8)) v5)) s@v4)
        )
      )
  , Functor0:
      (\$__unused@v0 -> Snapshot.Cps02.functorState)
  }
---------------
Snapshot.Cps02.applyState (Step 3)
  { apply:
      (\f@v0 -> \a@v1 ->
        (\k'@v2 s@v3 ->
          (f@v0
            (\v4 v5 ->
              -- Inline v6
              let v6 = (\v6 v7 -> (k'@v2 v6 v7));
              (a@v1
                (\v7 v8 ->
                  ((Snapshot.Cps02.applicativeState.pure (v5 v8))
                    (\v9 v10 -> (v6 v9 v10))
                    v7
                  )
                )
                v4
              )
            )
            s@v3
          )
        )
      )
  , Functor0:
      (\$__unused@v0 -> Snapshot.Cps02.functorState)
  }
---------------
Snapshot.Cps02.applyState (Step 4; Final)
  { apply:
      (\f@v0 -> \a@v1 ->
        (\k'@v2 s@v3 ->
          (f@v0
            (\v4 v5 ->
              (a@v1
                (\v6 v7 ->
                  ((Snapshot.Cps02.applicativeState.pure (v5 v7))
                    (\v8 v9 -> (k'@v2 v8 v9))
                    v6
                  )
                )
                v4
              )
            )
            s@v3
          )
        )
      )
  , Functor0:
      (\$__unused@v0 -> Snapshot.Cps02.functorState)
  }

===============

Snapshot.Cps02.bind (Step 0; Original)
  (Control.Bind.bind Snapshot.Cps02.bindState)
---------------
Snapshot.Cps02.bind (Step 1; Final)
  Snapshot.Cps02.bindState.bind

===============

Snapshot.Cps02.bindState (Step 0; Original)
  { bind:
      (\k1@v0 -> \k2@v1 ->
        (Snapshot.Cps02.mkState
          (\next1@v2 -> \s1@v3 ->
            (Snapshot.Cps02.unState
              k1@v0
              (\s2@v4 -> \a@v5 ->
                (((Snapshot.Cps02.unState (k2@v1 a@v5)) next1@v2) s2@v4)
              )
              s1@v3
            )
          )
        )
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.bindState (Step 1)
  { bind:
      (\k1@v0 -> \k2@v1 ->
        -- Inline v2
        let v2 =
          (\next1@v2 -> \s1@v3 ->
            -- Inline v4
            let v4 =
              (\s2@v4 -> \a@v5 ->
                -- Inline v6
                let v6 = (k2@v1 a@v5);
                (v6 (\v7 v8 -> ((next1@v2 v7) v8)) s2@v4)
              );
            (k1@v0 (\v5 v6 -> ((v4 v5) v6)) s1@v3)
          );
        (\k'@v3 s@v4 -> ((v2 (\v5 -> \v6 -> (k'@v3 v5 v6))) s@v4))
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.bindState (Step 2)
  { bind:
      (\k1@v0 -> \k2@v1 ->
        (\k'@v2 s@v3 ->
          -- Inline v4
          let v4 = (\v4 -> \v5 -> (k'@v2 v4 v5));
          (k1@v0 (\v5 v6 -> ((k2@v1 v6) (\v7 v8 -> ((v4 v7) v8)) v5)) s@v3)
        )
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }
---------------
Snapshot.Cps02.bindState (Step 3; Final)
  { bind:
      (\k1@v0 -> \k2@v1 ->
        (\k'@v2 s@v3 ->
          (k1@v0 (\v4 v5 -> ((k2@v1 v5) (\v6 v7 -> (k'@v2 v6 v7)) v4)) s@v3)
        )
      )
  , Apply0:
      (\$__unused@v0 -> Snapshot.Cps02.applyState)
  }

===============

Snapshot.Cps02.compose (Step 0; Original)
  (Control.Semigroupoid.compose Control.Semigroupoid.semigroupoidFn)
---------------
Snapshot.Cps02.compose (Step 1; Final)
  Control.Semigroupoid.semigroupoidFn.compose

===============

Snapshot.Cps02.discard (Step 0; Original)
  ((Control.Bind.discard Control.Bind.discardUnit) Snapshot.Cps02.bindState)
---------------
Snapshot.Cps02.discard (Step 1; Final)
  Snapshot.Cps02.bindState.bind

===============

Snapshot.Cps02.functorState (Step 0; Original)
  { map:
      (\f@v0 -> \k@v1 ->
        (Snapshot.Cps02.mkState
          (\next1@v2 -> \s1@v3 ->
            (Snapshot.Cps02.unState
              k@v1
              (\s2@v4 -> ((Snapshot.Cps02.compose (next1@v2 s2@v4)) f@v0))
              s1@v3
            )
          )
        )
      )
  }
---------------
Snapshot.Cps02.functorState (Step 1)
  { map:
      (\f@v0 -> \k@v1 ->
        -- Inline v2
        let v2 =
          (\next1@v2 -> \s1@v3 ->
            -- Inline v4
            let v4 =
              (\s2@v4 ->
                let v5 = (next1@v2 s2@v4);
                -- Inline v6
                let v6 = (\x@v6 -> (v5 (f@v0 x@v6)));
                v6
              );
            (k@v1 (\v5 v6 -> ((v4 v5) v6)) s1@v3)
          );
        (\k'@v3 s@v4 -> ((v2 (\v5 -> \v6 -> (k'@v3 v5 v6))) s@v4))
      )
  }
---------------
Snapshot.Cps02.functorState (Step 2)
  { map:
      (\f@v0 -> \k@v1 ->
        (\k'@v2 s@v3 ->
          -- Inline v4
          let v4 = (\v4 -> \v5 -> (k'@v2 v4 v5));
          (k@v1
            (\v5 v6 ->
              let v7 = (v4 v5);
              -- Inline v8
              let v8 = (\x@v8 -> (v7 (f@v0 x@v8)));
              (v8 v6)
            )
            s@v3
          )
        )
      )
  }
---------------
Snapshot.Cps02.functorState (Step 3)
  { map:
      (\f@v0 -> \k@v1 ->
        (\k'@v2 s@v3 ->
          (k@v1
            (\v4 v5 ->
              -- Inline v6
              let v6 = (\v6 -> (k'@v2 v4 v6));
              (v6 (f@v0 v5))
            )
            s@v3
          )
        )
      )
  }
---------------
Snapshot.Cps02.functorState (Step 4)
  { map:
      (\f@v0 -> \k@v1 ->
        (\k'@v2 s@v3 ->
          (k@v1
            (\v4 v5 ->
              -- Inline v6
              let v6 = (f@v0 v5);
              (k'@v2 v4 v6)
            )
            s@v3
          )
        )
      )
  }
---------------
Snapshot.Cps02.functorState (Step 5; Final)
  { map:
      (\f@v0 -> \k@v1 ->
        (\k'@v2 s@v3 -> (k@v1 (\v4 v5 -> (k'@v2 v4 (f@v0 v5))) s@v3))
      )
  }

===============

Snapshot.Cps02.get (Step 0; Original)
  (Snapshot.Cps02.mkState (\next@v0 -> \s@v1 -> ((next@v0 s@v1) s@v1)))
---------------
Snapshot.Cps02.get (Step 1)
  -- Inline v0
  let v0 = (\next@v0 -> \s@v1 -> ((next@v0 s@v1) s@v1));
  (\k'@v1 s@v2 -> ((v0 (\v3 -> \v4 -> (k'@v1 v3 v4))) s@v2))
---------------
Snapshot.Cps02.get (Step 2)
  (\k'@v0 s@v1 ->
    -- Inline v2
    let v2 = (\v2 -> \v3 -> (k'@v0 v2 v3));
    ((v2 s@v1) s@v1)
  )
---------------
Snapshot.Cps02.get (Step 3; Final)
  (\k'@v0 s@v1 -> (k'@v0 s@v1 s@v1))

===============

Snapshot.Cps02.mkState (Step 0; Original)
  (\k@v0 ->
    (Data.Function.Uncurried.mkFn2
      (\k'@v1 -> \s@v2 -> ((k@v0 (Data.Function.Uncurried.runFn2 k'@v1)) s@v2))
    )
  )
---------------
Snapshot.Cps02.mkState (Step 1; Final)
  (\k@v0 -> (\k'@v1 s@v2 -> ((k@v0 (\v3 -> \v4 -> (k'@v1 v3 v4))) s@v2)))

===============

Snapshot.Cps02.monadState (Step 0; Original)
  { Applicative0:
      (\$__unused@v0 -> Snapshot.Cps02.applicativeState)
  , Bind1:
      (\$__unused@v0 -> Snapshot.Cps02.bindState)
  }
---------------
Snapshot.Cps02.monadState (Step 1; Final)
  { Applicative0:
      (\$__unused@v0 -> Snapshot.Cps02.applicativeState)
  , Bind1:
      (\$__unused@v0 -> Snapshot.Cps02.bindState)
  }

===============

Snapshot.Cps02.put (Step 0; Original)
  (\s@v0 ->
    (Snapshot.Cps02.mkState
      (\next@v1 -> \v@v2 -> ((next@v1 s@v0) Data.Unit.unit))
    )
  )
---------------
Snapshot.Cps02.put (Step 1)
  (\s@v0 ->
    -- Inline v1
    let v1 = (\next@v1 -> \v@v2 -> ((next@v1 s@v0) <PrimUndefined>));
    (\k'@v2 s@v3 -> ((v1 (\v4 -> \v5 -> (k'@v2 v4 v5))) s@v3))
  )
---------------
Snapshot.Cps02.put (Step 2)
  (\s@v0 ->
    (\k'@v1 s@v2 ->
      -- Inline v3
      let v3 = (\v3 -> \v4 -> (k'@v1 v3 v4));
      ((v3 s@v0) <PrimUndefined>)
    )
  )
---------------
Snapshot.Cps02.put (Step 3)
  (\s@v0 ->
    (\k'@v1 s@v2 ->
      -- Inline v3
      let v3 = <PrimUndefined>;
      (k'@v1 s@v0 v3)
    )
  )
---------------
Snapshot.Cps02.put (Step 4; Final)
  (\s@v0 -> (\k'@v1 s@v2 -> (k'@v1 s@v0 <PrimUndefined>)))

===============

Snapshot.Cps02.runState (Step 0; Original)
  (\s@v0 -> \k@v1 -> (((Snapshot.Cps02.unState k@v1) Data.Tuple.Tuple) s@v0))
---------------
Snapshot.Cps02.runState (Step 1; Final)
  (\s@v0 -> \k@v1 -> (k@v1 (\v2 v3 -> (Data.Tuple.Tuple.Tuple v2 v3)) s@v0))

===============

Snapshot.Cps02.test4 (Step 0; Original)
  (Snapshot.Cps02.bind
    Snapshot.Cps02.get
    (\res1@v0 ->
      (Snapshot.Cps02.discard
        (Snapshot.Cps02.put ((Snapshot.Cps02.add res1@v0) 1))
        (\$__unused@v1 ->
          (Snapshot.Cps02.bind
            Snapshot.Cps02.get
            (\res2@v2 -> (Snapshot.Cps02.put ((Snapshot.Cps02.add res2@v2) 1)))
          )
        )
      )
    )
  )
---------------
Snapshot.Cps02.test4 (Step 1)
  -- Inline v0
  let v0 = (\k'@v0 s@v1 -> (k'@v0 s@v1 s@v1));
  -- Inline v1
  let v1 =
    (\k2@v1 ->
      (\k'@v2 s@v3 ->
        (v0 (\v4 v5 -> ((k2@v1 v5) (\v6 v7 -> (k'@v2 v6 v7)) v4)) s@v3)
      )
    );
  (v1
    (\res1@v2 ->
      -- LetAssoc
      let v3 =
        let v3 =
          -- Inline v3
          let v3 = 1;
          ((add res1@v2) v3);
        -- Inline v4
        let v4 = (\k'@v4 s@v5 -> (k'@v4 v3 <PrimUndefined>));
        v4;
      -- Inline v4
      let v4 =
        (\k2@v4 ->
          (\k'@v5 s@v6 ->
            (v3 (\v7 v8 -> ((k2@v4 v8) (\v9 v10 -> (k'@v5 v9 v10)) v7)) s@v6)
          )
        );
      (v4
        (\$__unused@v5 ->
          -- Inline v6
          let v6 = (\k'@v6 s@v7 -> (k'@v6 s@v7 s@v7));
          -- Inline v7
          let v7 =
            (\k2@v7 ->
              (\k'@v8 s@v9 ->
                (v6
                  (\v10 v11 -> ((k2@v7 v11) (\v12 v13 -> (k'@v8 v12 v13)) v10))
                  s@v9
                )
              )
            );
          (v7
            (\res2@v8 ->
              let v9 =
                -- Inline v9
                let v9 = 1;
                ((add res2@v8) v9);
              -- Inline v10
              let v10 = (\k'@v10 s@v11 -> (k'@v10 v9 <PrimUndefined>));
              v10
            )
          )
        )
      )
    )
  )
---------------
Snapshot.Cps02.test4 (Step 2)
  -- Inline v0
  let v0 =
    (\res1@v0 ->
      let v1 = ((add res1@v0) 1);
      -- Inline v2
      let v2 = (\k'@v2 s@v3 -> (k'@v2 v1 <PrimUndefined>));
      -- Inline v3
      let v3 =
        (\$__unused@v3 ->
          -- Inline v4
          let v4 =
            (\res2@v4 ->
              let v5 = ((add res2@v4) 1);
              (\k'@v6 s@v7 -> (k'@v6 v5 <PrimUndefined>))
            );
          (\k'@v5 s@v6 ->
            -- Inline v7
            let v7 = (\v7 v8 -> ((v4 v8) (\v9 v10 -> (k'@v5 v9 v10)) v7));
            (v7 s@v6 s@v6)
          )
        );
      (\k'@v4 s@v5 ->
        (v2 (\v6 v7 -> ((v3 v7) (\v8 v9 -> (k'@v4 v8 v9)) v6)) s@v5)
      )
    );
  (\k'@v1 s@v2 ->
    -- Inline v3
    let v3 = (\v3 v4 -> ((v0 v4) (\v5 v6 -> (k'@v1 v5 v6)) v3));
    (v3 s@v2 s@v2)
  )
---------------
Snapshot.Cps02.test4 (Step 3)
  (\k'@v0 s@v1 ->
    let v2 = ((add s@v1) 1);
    -- Inline v3
    let v3 =
      -- Inline v3
      let v3 =
        (\k'@v3 s@v4 ->
          -- Inline v5
          let v5 =
            (\v5 v6 ->
              -- Inline v7
              let v7 = (\v7 v8 -> (k'@v3 v7 v8));
              let v8 = ((add v5) 1);
              -- Inline v9
              let v9 =
                -- Inline v9
                let v9 = (\k'@v9 s@v10 -> (k'@v9 v8 <PrimUndefined>));
                v9;
              (v9 (\v10 v11 -> (v7 v10 v11)) v5)
            );
          (v5 v2 <PrimUndefined>)
        );
      v3;
    (v3 (\v4 v5 -> (k'@v0 v4 v5)) s@v1)
  )
---------------
Snapshot.Cps02.test4 (Step 4)
  (\k'@v0 s@v1 ->
    -- Inline v2
    let v2 = ((add s@v1) 1);
    -- Inline v3
    let v3 = (\v3 v4 -> (k'@v0 v3 v4));
    -- Inline v4
    let v4 = <PrimUndefined>;
    -- Inline v5
    let v5 = ((add v2) 1);
    -- Inline v6
    let v6 = (\v6 v7 -> (v3 v6 v7));
    (v6 v5 <PrimUndefined>)
  )
---------------
Snapshot.Cps02.test4 (Step 5)
  (\k'@v0 s@v1 ->
    -- Inline v2
    let v2 = ((add s@v1) 2);
    -- Inline v3
    let v3 = <PrimUndefined>;
    (k'@v0 v2 v3)
  )
---------------
Snapshot.Cps02.test4 (Step 6; Final)
  (\k'@v0 s@v1 -> (k'@v0 ((add s@v1) 2) <PrimUndefined>))

===============

Snapshot.Cps02.unState (Step 0; Original)
  (\v@v0 -> \k'@v1 -> \s@v2 ->
    -- Inline v3
    let v3 = v@v0;
    -- Inline v4
    let v4 = k'@v1;
    -- Inline v5
    let v5 = s@v2;
    -- Inline v6
    let v6 =
      (\k@v6 k'1@v7 s1@v8 ->
        (Data.Function.Uncurried.runFn2
          k@v6
          (Data.Function.Uncurried.mkFn2 k'1@v7)
          s1@v8
        )
      );
    (v6 k@v3 k'1@v4 s1@v5)
  )
---------------
Snapshot.Cps02.unState (Step 1)
  (\v@v0 -> \k'@v1 -> \s@v2 ->
    -- Inline v3
    let v3 = (\v3 v4 -> ((k'@v1 v3) v4));
    (v@v0 v3 s@v2)
  )
---------------
Snapshot.Cps02.unState (Step 2; Final)
  (\v@v0 -> \k'@v1 -> \s@v2 -> (v@v0 (\v3 v4 -> ((k'@v1 v3) v4)) s@v2))