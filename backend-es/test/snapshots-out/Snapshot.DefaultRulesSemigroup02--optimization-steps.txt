Snapshot.DefaultRulesSemigroup02.append (Step 0; Original)
  (Data.Semigroup.append ((Data.Semigroup.semigroupRecord <PrimUndefined>) ((((Data.Semigroup.semigroupRecordCons { reflectSymbol =
      (\$__unused@v0 -> 
        "bar"
      )
  }) <PrimUndefined>) ((((Data.Semigroup.semigroupRecordCons { reflectSymbol =
      (\$__unused@v0 -> 
        "foo"
      )
  }) <PrimUndefined>) Data.Semigroup.semigroupRecordNil) Data.Semigroup.semigroupString)) Data.Semigroup.semigroupArray)))
---------------
Snapshot.DefaultRulesSemigroup02.append (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    {#- Rewrite - Inline -#}
    let v0 =
      <PrimUndefined>;
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          { reflectSymbol =
              (\$__unused@v1 -> 
                "bar"
              )
          };
        {#- Rewrite - Inline -#}
        let v2 =
          {#- Rewrite - Inline -#}
          let v2 =
            <PrimUndefined>;
          let v3 =
            {#- Rewrite - Inline -#}
            let v3 =
              { reflectSymbol =
                  (\$__unused@v3 -> 
                    "foo"
                  )
              };
            {#- Rewrite - Inline -#}
            let v4 =
              {#- Rewrite - Inline -#}
              let v4 =
                <PrimUndefined>;
              { appendRecord =
                  (\v@v5 -> \ra@v6 -> \rb@v7 -> 
                    let key@v8 =
                      ((
                        v3
                      ).reflectSymbol Type.Proxy.Proxy);
                    let get@v9 =
                      (Record.Unsafe.unsafeGet key@v8);
                    (((Record.Unsafe.unsafeSet key@v8) let v10 =
                      (get@v9 ra@v6);
                    {#- Rewrite - Inline -#}
                    let v11 =
                      (\v11 -> 
                        (stringAppend v10 v11)
                      );
                    (v11 (get@v9 rb@v7))) {#- Rewrite - Inline -#}
                    let v10 =
                      Type.Proxy.Proxy;
                    {#- Rewrite - Inline -#}
                    let v11 =
                      (\v1@v11 -> \v2@v12 -> 
                        }
                      );
                    ((v11 ra@v6) rb@v7))
                  )
              };
            v4;
          { appendRecord =
              (\v@v4 -> \ra@v5 -> \rb@v6 -> 
                let key@v7 =
                  ((
                    v1
                  ).reflectSymbol Type.Proxy.Proxy);
                let get@v8 =
                  (Record.Unsafe.unsafeGet key@v7);
                (((Record.Unsafe.unsafeSet key@v7) ((Data.Semigroup.concatArray (get@v8 ra@v5)) (get@v8 rb@v6))) ((((
                  v3
                ).appendRecord Type.Proxy.Proxy) ra@v5) rb@v6))
              )
          };
        v2;
      { append =
          ((
            v1
          ).appendRecord Type.Proxy.Proxy)
      };
    v1;
  {#- Rewrite - Inline -#}
  let v1 =
    (
      v0
    ).append;
  v1
---------------
Snapshot.DefaultRulesSemigroup02.append (Step 2)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["appendRecord"]
    inside
      {#- Rewrite - Inline -#}
      let v1 =
        {#- Rewrite - Inline -#}
        let v1 =
          { appendRecord =
              (\v@v1 -> \ra@v2 -> \rb@v3 -> 
                {#- Rewrite - Inline -#}
                let key@v4 =
                  {#- Rewrite - Inline -#}
                  let v4 =
                    Type.Proxy.Proxy;
                  "bar";
                let get@v5 =
                  (Record.Unsafe.unsafeGet key@v4);
                (((Record.Unsafe.unsafeSet key@v4) ((Data.Semigroup.concatArray (get@v5 ra@v2)) (get@v5 rb@v3))) ((((
                  v0
                ).appendRecord Type.Proxy.Proxy) ra@v2) rb@v3))
              )
          };
        (
          v1
        ).appendRecord;
      (v1 Type.Proxy.Proxy)
  ]]
---------------
Snapshot.DefaultRulesSemigroup02.append (Step 3)
  {#- Rewrite - Inline -#}
  let v0 =
    (\v@v0 -> \ra@v1 -> \rb@v2 -> 
      {#- Rewrite - Inline -#}
      let get@v3 =
        (\v3 -> 
          (
            v3
          ).foo
        );
      { foo =
          (stringAppend (get@v3 ra@v1) (get@v3 rb@v2))
      }
    );
  {#- Rewrite - Inline -#}
  let v1 =
    Type.Proxy.Proxy;
  (\ra@v2 -> \rb@v3 -> 
    {#- Rewrite - Inline -#}
    let get@v4 =
      (\v4 -> 
        (
          v4
        ).bar
      );
    (
      (((v0 Type.Proxy.Proxy) ra@v2) rb@v3)
        {
        bar = ((Data.Semigroup.concatArray (get@v4 ra@v2)) (get@v4 rb@v3))
        }
    )
  )
---------------
Snapshot.DefaultRulesSemigroup02.append (Step 4)
  (\ra@v0 -> \rb@v1 -> 
    {#- Rewrite - Inline -#}
    let v2 =
      Type.Proxy.Proxy;
    {#- Rewrite - Inline -#}
    let v3 =
      { foo =
          (stringAppend (
            ra@v0
          ).foo (
            rb@v1
          ).foo)
      };
    (
      v3
        {
        bar = ((Data.Semigroup.concatArray (
          ra@v0
        ).bar) (
          rb@v1
        ).bar)
        }
    )
  )
---------------
Snapshot.DefaultRulesSemigroup02.append (Step 5; Final)
  (\ra@v0 -> \rb@v1 -> 
    { bar =
        ((Data.Semigroup.concatArray (
          ra@v0
        ).bar) (
          rb@v1
        ).bar)
    , foo =
        (stringAppend (
          ra@v0
        ).foo (
          rb@v1
        ).foo)
    }
  )

===============

Snapshot.DefaultRulesSemigroup02.test1 (Step 0; Original)
  Snapshot.DefaultRulesSemigroup02.append
---------------
Snapshot.DefaultRulesSemigroup02.test1 (Step 1; Final)
  Snapshot.DefaultRulesSemigroup02.append

===============

Snapshot.DefaultRulesSemigroup02.test2 (Step 0; Original)
  (\a@v0 -> \b@v1 -> 
    ((Snapshot.DefaultRulesSemigroup02.append a@v0) b@v1)
  )
---------------
Snapshot.DefaultRulesSemigroup02.test2 (Step 1; Final)
  (\a@v0 -> \b@v1 -> 
    { bar =
        ((Data.Semigroup.concatArray (
          a@v0
        ).bar) (
          b@v1
        ).bar)
    , foo =
        (stringAppend (
          a@v0
        ).foo (
          b@v1
        ).foo)
    }
  )

===============

Snapshot.DefaultRulesSemigroup02.test3 (Step 0; Original)
  (Snapshot.DefaultRulesSemigroup02.append { foo =
      "hello"
  , bar =
      [
        "hello",
      ]
  })
---------------
Snapshot.DefaultRulesSemigroup02.test3 (Step 1; Final)
  (Snapshot.DefaultRulesSemigroup02.append { foo =
      "hello"
  , bar =
      [
        "hello",
      ]
  })

===============

Snapshot.DefaultRulesSemigroup02.test4 (Step 0; Original)
  ((Snapshot.DefaultRulesSemigroup02.append { foo =
      "hello"
  , bar =
      [
        "hello",
      ]
  }) { foo =
      ", World!"
  , bar =
      [
        "World!",
      ]
  })
---------------
Snapshot.DefaultRulesSemigroup02.test4 (Step 1)
  [[ UnpackOp
    For identifier v0
      Unpack record
      labels = ["foo","bar"]
    inside
      {#- Rewrite - Inline -#}
      let v1 =
        [[ UnpackOp
          For identifier v1
            Unpack record
            labels = ["foo","bar"]
          inside
            { bar =
                ((Data.Semigroup.concatArray (
                  v0
                ).bar) (
                  v1
                ).bar)
            , foo =
                (stringAppend (
                  v0
                ).foo (
                  v1
                ).foo)
            }
        ]];
      v1
  ]]
---------------
Snapshot.DefaultRulesSemigroup02.test4 (Step 2)
  {#- Rewrite - Inline -#}
  let v0 =
    "hello";
  {#- Rewrite - Inline -#}
  let v1 =
    [
      "hello",
    ];
  {#- Rewrite - Inline -#}
  let v2 =
    ", World!";
  {#- Rewrite - Inline -#}
  let v3 =
    [
      "World!",
    ];
  { bar =
      ((Data.Semigroup.concatArray v1) v3)
  , foo =
      (stringAppend v0 v2)
  }
---------------
Snapshot.DefaultRulesSemigroup02.test4 (Step 3; Final)
  { bar =
      [
        "hello",
        "World!",
      ]
  , foo =
      "hello, World!"
  }