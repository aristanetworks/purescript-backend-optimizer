Snapshot.KnownConstructors04.append (Step 0; Original)
  (Data.Semigroup.append Data.Semigroup.semigroupString)
---------------
Snapshot.KnownConstructors04.append (Step 1; Final)
  Data.Semigroup.concatString

===============

Snapshot.KnownConstructors04.conj (Step 0; Original)
  (Data.HeytingAlgebra.conj Data.HeytingAlgebra.heytingAlgebraBoolean)
---------------
Snapshot.KnownConstructors04.conj (Step 1; Final)
  Data.HeytingAlgebra.boolConj

===============

Snapshot.KnownConstructors04.fromJust (Step 0; Original)
  (Data.Maybe.fromJust <PrimUndefined>)
---------------
Snapshot.KnownConstructors04.fromJust (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    <PrimUndefined>;
  {#- Rewrite - Inline -#}
  let v1 =
    (\v@v1 -> 
      if (isTag Data.Maybe.Just v@v1) then
        (
          v@v1
        )#value0
      else
        <PatternMatchFailure>
    );
  v1
---------------
Snapshot.KnownConstructors04.fromJust (Step 2; Final)
  (\v@v0 -> 
    if (isTag Data.Maybe.Just v@v0) then
      (
        v@v0
      )#value0
    else
      <PatternMatchFailure>
  )

===============

Snapshot.KnownConstructors04.greaterThan (Step 0; Original)
  (Data.Ord.greaterThan Data.Ord.ordInt)
---------------
Snapshot.KnownConstructors04.greaterThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (> a1@v0 a2@v1)
  )

===============

Snapshot.KnownConstructors04.not (Step 0; Original)
  (Data.HeytingAlgebra.not Data.HeytingAlgebra.heytingAlgebraBoolean)
---------------
Snapshot.KnownConstructors04.not (Step 1; Final)
  Data.HeytingAlgebra.boolNot

===============

Snapshot.KnownConstructors04.test1 (Step 0; Original)
  (\x@v0 -> 
    let a@v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        ((Snapshot.KnownConstructors04.greaterThan x@v0) 42);
      {#- Rewrite - Inline -#}
      let v2 =
        (\ ->
          (Data.Maybe.Just "Hello")
        );
      {#- Rewrite - Inline -#}
      let v3 =
        (\ ->
          Data.Maybe.Nothing
        );
      if (== v1 true) then
        (v2)
      else
        (v3);
    [
      ((Snapshot.KnownConstructors04.append ((Partial.Unsafe.unsafePartial (\$__unused@v2 -> 
        Snapshot.KnownConstructors04.fromJust
      )) a@v1)) ", World"),
      ((Snapshot.KnownConstructors04.append ((Partial.Unsafe.unsafePartial (\$__unused@v2 -> 
        Snapshot.KnownConstructors04.fromJust
      )) a@v1)) ", Universe"),
    ]
  )
---------------
Snapshot.KnownConstructors04.test1 (Step 1)
  (\x@v0 -> 
    [[ DistBranchesLet
      let a@v1 =
        if {#- Rewrite - Inline -#}
          let v1 =
            42;
          (> x@v0 v1) then
          (Data.Maybe.Just.Maybe "Hello")
        else
          Data.Maybe.Nothing;
      [
        let v2 =
          if (isTag Data.Maybe.Just a@v1) then
            (
              a@v1
            )#value0
          else
            <PatternMatchFailure>;
        {#- Rewrite - Inline -#}
        let v3 =
          (\v3 -> 
            (stringAppend v2 v3)
          );
        (v3 ", World"),
        let v2 =
          if (isTag Data.Maybe.Just a@v1) then
            (
              a@v1
            )#value0
          else
            <PatternMatchFailure>;
        {#- Rewrite - Inline -#}
        let v3 =
          (\v3 -> 
            (stringAppend v2 v3)
          );
        (v3 ", Universe"),
      ]
    ]]
  )
---------------
Snapshot.KnownConstructors04.test1 (Step 2)
  (\x@v0 -> 
    if (> x@v0 42) then
      [
        {#- Rewrite - Inline -#}
        let v1 =
          "Hello";
        {#- Rewrite - Inline -#}
        let v2 =
          ", World";
        (stringAppend v1 v2),
        {#- Rewrite - Inline -#}
        let v1 =
          "Hello";
        {#- Rewrite - Inline -#}
        let v2 =
          ", Universe";
        (stringAppend v1 v2),
      ]
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.KnownConstructors04.test1 (Step 3; Final)
  (\x@v0 -> 
    if (> x@v0 42) then
      [
        "Hello, World",
        "Hello, Universe",
      ]
    else
      <PatternMatchFailure>
  )

===============

Snapshot.KnownConstructors04.test2 (Step 0; Original)
  (\f@v0 -> \x@v1 -> 
    let a@v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        ((Snapshot.KnownConstructors04.greaterThan x@v1) 42);
      {#- Rewrite - Inline -#}
      let v3 =
        (\ ->
          (Data.Maybe.Just "Hello")
        );
      {#- Rewrite - Inline -#}
      let v4 =
        (\ ->
          Data.Maybe.Nothing
        );
      if (== v2 true) then
        (v3)
      else
        (v4);
    ((f@v0 ((Snapshot.KnownConstructors04.append ((Partial.Unsafe.unsafePartial (\$__unused@v3 -> 
      Snapshot.KnownConstructors04.fromJust
    )) a@v2)) ", World")) ((Snapshot.KnownConstructors04.append ((Partial.Unsafe.unsafePartial (\$__unused@v3 -> 
      Snapshot.KnownConstructors04.fromJust
    )) a@v2)) ", Universe"))
  )
---------------
Snapshot.KnownConstructors04.test2 (Step 1)
  (\f@v0 -> \x@v1 -> 
    [[ DistBranchesLet
      let a@v2 =
        if {#- Rewrite - Inline -#}
          let v2 =
            42;
          (> x@v1 v2) then
          (Data.Maybe.Just.Maybe "Hello")
        else
          Data.Maybe.Nothing;
      ((f@v0 let v3 =
        if (isTag Data.Maybe.Just a@v2) then
          (
            a@v2
          )#value0
        else
          <PatternMatchFailure>;
      {#- Rewrite - Inline -#}
      let v4 =
        (\v4 -> 
          (stringAppend v3 v4)
        );
      (v4 ", World")) let v3 =
        if (isTag Data.Maybe.Just a@v2) then
          (
            a@v2
          )#value0
        else
          <PatternMatchFailure>;
      {#- Rewrite - Inline -#}
      let v4 =
        (\v4 -> 
          (stringAppend v3 v4)
        );
      (v4 ", Universe"))
    ]]
  )
---------------
Snapshot.KnownConstructors04.test2 (Step 2)
  (\f@v0 -> \x@v1 -> 
    if (> x@v1 42) then
      ((f@v0 {#- Rewrite - Inline -#}
      let v2 =
        "Hello";
      {#- Rewrite - Inline -#}
      let v3 =
        ", World";
      (stringAppend v2 v3)) {#- Rewrite - Inline -#}
      let v2 =
        "Hello";
      {#- Rewrite - Inline -#}
      let v3 =
        ", Universe";
      (stringAppend v2 v3))
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.KnownConstructors04.test2 (Step 3; Final)
  (\f@v0 -> \x@v1 -> 
    if (> x@v1 42) then
      ((f@v0 "Hello, World") "Hello, Universe")
    else
      <PatternMatchFailure>
  )

===============

Snapshot.KnownConstructors04.test3 (Step 0; Original)
  (\x@v0 -> 
    let a@v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        ((Snapshot.KnownConstructors04.greaterThan x@v0) 42);
      {#- Rewrite - Inline -#}
      let v2 =
        (\ ->
          (Data.Maybe.Just true)
        );
      {#- Rewrite - Inline -#}
      let v3 =
        (\ ->
          Data.Maybe.Nothing
        );
      if (== v1 true) then
        (v2)
      else
        (v3);
    ((Snapshot.KnownConstructors04.conj ((Partial.Unsafe.unsafePartial (\$__unused@v2 -> 
      Snapshot.KnownConstructors04.fromJust
    )) a@v1)) (Snapshot.KnownConstructors04.not ((Partial.Unsafe.unsafePartial (\$__unused@v2 -> 
      Snapshot.KnownConstructors04.fromJust
    )) a@v1)))
  )
---------------
Snapshot.KnownConstructors04.test3 (Step 1)
  (\x@v0 -> 
    [[ DistBranchesLet
      let a@v1 =
        if {#- Rewrite - Inline -#}
          let v1 =
            42;
          (> x@v0 v1) then
          (Data.Maybe.Just.Maybe true)
        else
          Data.Maybe.Nothing;
      let v2 =
        if (isTag Data.Maybe.Just a@v1) then
          (
            a@v1
          )#value0
        else
          <PatternMatchFailure>;
      {#- Rewrite - Inline -#}
      let v3 =
        (\v3 -> 
          (booleanAnd v2 v3)
        );
      (v3 [[ DistBranchesOp
        DistPrimOp1
        not
        if (isTag Data.Maybe.Just a@v1) then
          (
            a@v1
          )#value0
        else
          <PatternMatchFailure>
      ]])
    ]]
  )
---------------
Snapshot.KnownConstructors04.test3 (Step 2)
  (\x@v0 -> 
    if (> x@v0 42) then
      {#- Rewrite - Inline -#}
      let v1 =
        true;
      {#- Rewrite - Inline -#}
      let v2 =
        false;
      (booleanAnd v1 v2)
    else
      <PatternMatchFailure>
  )
---------------
Snapshot.KnownConstructors04.test3 (Step 3; Final)
  (\x@v0 -> 
    if (> x@v0 42) then
      false
    else
      <PatternMatchFailure>
  )