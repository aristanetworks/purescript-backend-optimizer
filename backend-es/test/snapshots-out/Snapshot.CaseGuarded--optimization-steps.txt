Snapshot.CaseGuarded.NInt (Step 0; Original)
  (\x@v0 -> x@v0)
---------------
Snapshot.CaseGuarded.NInt (Step 1; Final)
  (\x@v0 -> x@v0)

===============

Snapshot.CaseGuarded.Product3 (Step 0; Original)
  letCtor Product3 =
    (\value0 value1 value2 ->
      { tag: "Product3", value0: value0, value1: value1, value2: value2 }
    );
---------------
Snapshot.CaseGuarded.Product3 (Step 1; Final)
  letCtor Product3 =
    (\value0 value1 value2 ->
      { tag: "Product3", value0: value0, value1: value1, value2: value2 }
    );

===============

Snapshot.CaseGuarded.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.CaseGuarded.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.CaseGuarded.append (Step 0; Original)
  (Data.Semigroup.append Data.Semigroup.semigroupString)
---------------
Snapshot.CaseGuarded.append (Step 1; Final)
  Data.Semigroup.concatString

===============

Snapshot.CaseGuarded.eq (Step 0; Original)
  (Data.Eq.eq Data.Eq.eqInt)
---------------
Snapshot.CaseGuarded.eq (Step 1; Final)
  Data.Eq.eqIntImpl

===============

Snapshot.CaseGuarded.greaterThan (Step 0; Original)
  (Data.Ord.greaterThan Data.Ord.ordInt)
---------------
Snapshot.CaseGuarded.greaterThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> ((gt a1@v0) a2@v1))

===============

Snapshot.CaseGuarded.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordInt)
---------------
Snapshot.CaseGuarded.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> ((lt a1@v0) a2@v1))

===============

Snapshot.CaseGuarded.show (Step 0; Original)
  (Data.Show.show Data.Show.showInt)
---------------
Snapshot.CaseGuarded.show (Step 1; Final)
  Data.Show.showIntImpl

===============

Snapshot.CaseGuarded.test1 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 =
      (\n@v2 ->
        ((Snapshot.CaseGuarded.append "n: ") (Snapshot.CaseGuarded.show n@v2))
      );
    -- Inline v3
    let v3 =
      (\->
        -- Uncurry v1@v3
        let v1@v3 =
          (\v2@v3 ->
            -- Inline v3@v4
            let v3@v4 =
              (\v4@v4 ->
                -- Inline v5
                let v5 = v@v0;
                -- Inline v6
                let v6 = (\x@v6 -> "catch");
                -- Inline x@v7
                let x@v7 = v5;
                if Data.Boolean.otherwise then
                  (v6 x@v7)
                else
                  <PatternMatchFailure>
              );
            -- Inline v5
            let v5 = v@v0;
            -- Inline v6
            let v6 =
              (\x@v6 ->
                -- Inline v7
                let v7 = ((Snapshot.CaseGuarded.greaterThan x@v6) 1);
                -- Inline v8
                let v8 =
                  (\->
                    -- Inline v8
                    let v8 = ((Snapshot.CaseGuarded.lessThan x@v6) 50);
                    -- Inline v9
                    let v9 =
                      (\->
                        (Snapshot.CaseGuarded.append
                          "1 < x < 50: "
                          (Snapshot.CaseGuarded.show x@v6)
                        )
                      );
                    -- Inline v10
                    let v10 = (\-> (v3@v4 true));
                    if ((eq v8) true) then (v9!) else (v10!)
                  );
                -- Inline v9
                let v9 = (\-> (v3@v4 true));
                if ((eq v7) true) then (v8!) else (v9!)
              );
            (v6 x@v5)
          );
        -- Inline v4
        let v4 = v@v0;
        -- Inline v5
        let v5 =
          (\x@v5 ->
            -- Inline v6
            let v6 = ((Snapshot.CaseGuarded.greaterThan x@v5) 1);
            -- Inline v7
            let v7 =
              (\->
                -- Inline v7
                let v7 = ((Snapshot.CaseGuarded.lessThan x@v5) 100);
                -- Inline v8
                let v8 =
                  (\->
                    (Snapshot.CaseGuarded.append
                      "1 < x < 100: "
                      (Snapshot.CaseGuarded.show x@v5)
                    )
                  );
                -- Inline v9
                let v9 = (\-> (v1@v3 true));
                if ((eq v7) true) then (v8!) else (v9!)
              );
            -- Inline v8
            let v8 = (\-> (v1@v3 true));
            if ((eq v6) true) then (v7!) else (v8!)
          );
        (v5 x@v4)
      );
    -- Inline n@v4
    let n@v4 = v1;
    if ((Snapshot.CaseGuarded.lessThan n@v4) 1) then (v2 n@v4) else (v3!)
  )
---------------
Snapshot.CaseGuarded.test1 (Step 1)
  (\v@v0 ->
    if -- Inline v1
    let v1 = 1;
    ((lt v@v0) v1) then
      -- Inline v1
      let v1 = "n: ";
      -- Inline v2
      let v2 = (\v2 -> ((stringAppend v1) v2));
      (v2 (Data.Show.showIntImpl v@v0))
    else
      let v1@v1 =
        (\v2@v1 ->
          if -- Inline v2
          let v2 = 1;
          ((gt v@v0) v2) then
            if -- Inline v2
            let v2 = 50;
            ((lt v@v0) v2) then
              -- Inline v2
              let v2 = "1 < x < 50: ";
              -- Inline v3
              let v3 = (\v3 -> ((stringAppend v2) v3));
              (v3 (Data.Show.showIntImpl v@v0))
            else
              -- Inline v2
              let v2 = true;
              "catch"
          else
            -- Inline v2
            let v2 = true;
            "catch"
        );
      if -- Inline v2
      let v2 = 1;
      ((gt v@v0) v2) then
        if -- Inline v2
        let v2 = 100;
        ((lt v@v0) v2) then
          -- Inline v2
          let v2 = "1 < x < 100: ";
          -- Inline v3
          let v3 = (\v3 -> ((stringAppend v2) v3));
          (v3 (Data.Show.showIntImpl v@v0))
        else
          -- Inline v2
          let v2 = true;
          (v1@v1 v2)
      else
        -- Inline v2
        let v2 = true;
        (v1@v1 v2)
  )
---------------
Snapshot.CaseGuarded.test1 (Step 2)
  (\v@v0 ->
    if ((lt v@v0) 1) then
      -- Inline v1
      let v1 = (Data.Show.showIntImpl v@v0);
      ((stringAppend "n: ") v1)
    else
      let v1@v1 =
        (\v2@v1 ->
          if ((gt v@v0) 1) then
            if ((lt v@v0) 50) then
              -- Inline v2
              let v2 = (Data.Show.showIntImpl v@v0);
              ((stringAppend "1 < x < 50: ") v2)
            else
              "catch"
          else
            "catch"
        );
      if ((gt v@v0) 1) then
        if ((lt v@v0) 100) then
          -- Inline v2
          let v2 = (Data.Show.showIntImpl v@v0);
          ((stringAppend "1 < x < 100: ") v2)
        else
          (v1@v1 true)
      else
        (v1@v1 true)
  )
---------------
Snapshot.CaseGuarded.test1 (Step 3)
  (\v@v0 ->
    if ((lt v@v0) 1) then
      ((stringAppend "n: ") (Data.Show.showIntImpl v@v0))
    else
      -- Inline v1@v1
      let v1@v1 =
        (\v2@v1 ->
          if ((gt v@v0) 1) then
            if ((lt v@v0) 50) then
              ((stringAppend "1 < x < 50: ") (Data.Show.showIntImpl v@v0))
            else
              "catch"
          else
            "catch"
        );
      if ((gt v@v0) 1) then
        if ((lt v@v0) 100) then
          ((stringAppend "1 < x < 100: ") (Data.Show.showIntImpl v@v0))
        else
          (v1@v1 true)
      else
        (v1@v1 true)
  )
---------------
Snapshot.CaseGuarded.test1 (Step 4)
  (\v@v0 ->
    if ((lt v@v0) 1) then
      ((stringAppend "n: ") (Data.Show.showIntImpl v@v0))
    else if ((gt v@v0) 1) then
      if ((lt v@v0) 100) then
        ((stringAppend "1 < x < 100: ") (Data.Show.showIntImpl v@v0))
      else
        -- Inline v1
        let v1 = true;
        if ((gt v@v0) 1) then
          if ((lt v@v0) 50) then
            ((stringAppend "1 < x < 50: ") (Data.Show.showIntImpl v@v0))
          else
            "catch"
        else
          "catch"
    else
      -- Inline v1
      let v1 = true;
      if ((gt v@v0) 1) then
        if ((lt v@v0) 50) then
          ((stringAppend "1 < x < 50: ") (Data.Show.showIntImpl v@v0))
        else
          "catch"
      else
        "catch"
  )
---------------
Snapshot.CaseGuarded.test1 (Step 5; Final)
  (\v@v0 ->
    if ((lt v@v0) 1) then
      ((stringAppend "n: ") (Data.Show.showIntImpl v@v0))
    else if ((gt v@v0) 1) then
      if ((lt v@v0) 100) then
        ((stringAppend "1 < x < 100: ") (Data.Show.showIntImpl v@v0))
      else if ((gt v@v0) 1) then
        if ((lt v@v0) 50) then
          ((stringAppend "1 < x < 50: ") (Data.Show.showIntImpl v@v0))
        else
          "catch"
      else
        "catch"
    else if ((gt v@v0) 1) then
      if ((lt v@v0) 50) then
        ((stringAppend "1 < x < 50: ") (Data.Show.showIntImpl v@v0))
      else
        "catch"
    else
      "catch"
  )

===============

Snapshot.CaseGuarded.test2 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\i@v2 -> i@v2);
    -- Inline v3
    let v3 = (\i@v3 -> i@v3);
    -- Inline v4
    let v4 = (\i@v4 -> 1);
    -- Inline v5
    let v5 = (\-> 0);
    -- Inline i@v6
    let i@v6 = v1;
    if ((Snapshot.CaseGuarded.lessThan i@v6) 1) then
      (v2 i@v6)
    else
      -- Inline i@v7
      let i@v7 = v1;
      if ((Snapshot.CaseGuarded.greaterThan i@v7) 1) then
        (v3 i@v7)
      else
        -- Inline i@v8
        let i@v8 = v1;
        if ((Snapshot.CaseGuarded.eq i@v8) 1) then (v4 i@v8) else (v5!)
  )
---------------
Snapshot.CaseGuarded.test2 (Step 1)
  (\v@v0 ->
    if -- Inline v1
    let v1 = 1;
    ((lt v@v0) v1) then
      v@v0
    else if -- Inline v1
    let v1 = 1;
    ((gt v@v0) v1) then
      v@v0
    else if -- Inline v1
    let v1 = 1;
    ((eq v@v0) v1) then
      1
    else
      0
  )
---------------
Snapshot.CaseGuarded.test2 (Step 2; Final)
  (\v@v0 ->
    if ((lt v@v0) 1) then
      v@v0
    else if ((gt v@v0) 1) then
      v@v0
    else if ((eq v@v0) 1) then
      1
    else
      0
  )

===============

Snapshot.CaseGuarded.test3 (Step 0; Original)
  (\v@v0 ->
    -- Inline v1
    let v1 = v@v0;
    -- Inline v2
    let v2 = (\a@v2 b@v3 -> a@v2);
    -- Inline v3
    let v3 = (\a@v3 b@v4 c@v5 -> a@v3);
    -- Inline v4
    let v4 = (\a@v4 c@v5 -> c@v5);
    -- Inline v5
    let v5 = (\b@v5 -> b@v5);
    -- Inline v6
    let v6 = v1#value0;
    -- Inline v7
    let v7 = v1#value1;
    -- Inline v8
    let v8 = v1#value2;
    -- Inline a@v9
    let a@v9 = v6;
    -- Inline b@v10
    let b@v10 = v7;
    if ((Snapshot.CaseGuarded.eq a@v9) b@v10) then
      (v2 a@v9 b@v10)
    else
      -- Inline a@v11
      let a@v11 = v6;
      -- Inline b@v12
      let b@v12 = v7;
      -- Inline c@v13
      let c@v13 = v8;
      if ((Snapshot.CaseGuarded.eq c@v13) b@v12) then
        (v3 a@v11 b@v12 c@v13)
      else
        -- Inline a@v14
        let a@v14 = v6;
        -- Inline c@v15
        let c@v15 = v8;
        if ((Snapshot.CaseGuarded.eq a@v14) c@v15) then
          (v4 a@v14 c@v15)
        else
          (v5 b@v7)
  )
---------------
Snapshot.CaseGuarded.test3 (Step 1)
  (\v@v0 ->
    if let v1 = v@v0#value0;
    -- Inline v2
    let v2 = (\v2 -> ((eq v1) v2));
    (v2 v@v0#value1) then
      -- Inline v1
      let v1 = v@v0#value0;
      -- Inline v2
      let v2 = v@v0#value1;
      v1
    else if let v1 = v@v0#value2;
    -- Inline v2
    let v2 = (\v2 -> ((eq v1) v2));
    (v2 v@v0#value1) then
      -- Inline v1
      let v1 = v@v0#value0;
      -- Inline v2
      let v2 = v@v0#value1;
      -- Inline v3
      let v3 = v@v0#value2;
      v1
    else if let v1 = v@v0#value0;
    -- Inline v2
    let v2 = (\v2 -> ((eq v1) v2));
    (v2 v@v0#value2) then
      -- Inline v1
      let v1 = v@v0#value0;
      -- Inline v2
      let v2 = v@v0#value2;
      v2
    else
      -- Inline v1
      let v1 = v@v0#value1;
      v1
  )
---------------
Snapshot.CaseGuarded.test3 (Step 2)
  (\v@v0 ->
    if -- Inline v1
    let v1 = v@v0#value0;
    -- Inline v2
    let v2 = v@v0#value1;
    ((eq v1) v2) then
      v@v0#value0
    else if -- Inline v1
    let v1 = v@v0#value2;
    -- Inline v2
    let v2 = v@v0#value1;
    ((eq v1) v2) then
      v@v0#value0
    else if -- Inline v1
    let v1 = v@v0#value0;
    -- Inline v2
    let v2 = v@v0#value2;
    ((eq v1) v2) then
      v@v0#value2
    else
      v@v0#value1
  )
---------------
Snapshot.CaseGuarded.test3 (Step 3; Final)
  (\v@v0 ->
    if ((eq v@v0#value0) v@v0#value1) then
      v@v0#value0
    else if ((eq v@v0#value2) v@v0#value1) then
      v@v0#value0
    else if ((eq v@v0#value0) v@v0#value2) then
      v@v0#value2
    else
      v@v0#value1
  )

===============

Snapshot.CaseGuarded.test4 (Step 0; Original)
  (\v@v0 -> \v1@v1 ->
    -- Inline v2
    let v2 = v@v0;
    -- Inline v3
    let v3 = v1@v1;
    -- Inline v4
    let v4 = (\-> 1);
    -- Inline v5
    let v5 = (\-> 2);
    -- Inline v6
    let v6 = (\-> 3);
    -- Inline v7
    let v7 = (\-> 4);
    -- Inline v8
    let v8 = (\-> 5);
    -- Inline v9
    let v9 = (\-> 6);
    -- Inline v10
    let v10 = (\c@v10 e@v11 -> 7);
    -- Inline v11
    let v11 = (\c@v11 e@v12 -> 8);
    -- Inline v12
    let v12 = (\c@v12 e@v13 -> 9);
    -- Inline v13
    let v13 = (\-> 10);
    -- Inline v14
    let v14 =
      (\c@v14 f@v15 ->
        ((Snapshot.CaseGuarded.add ((Snapshot.CaseGuarded.add 11) c@v14)) f@v15)
      );
    -- Inline v15
    let v15 = v2.a;
    -- Inline v16
    let v16 = v2.b;
    -- Inline v17
    let v17 = v2.c;
    -- Inline v18
    let v18 = v3.d;
    -- Inline v19
    let v19 = v3.e;
    -- Inline v20
    let v20 = v3.f;
    if ((eq v15) 1) then
      if ((eq v18) 1) then
        (v4!)
      else if ((eq v18) 2) then
        (v5!)
      else if ((eq v18) 3) then
        (v6!)
      else if ((eq v18) 4) then
        (v7!)
      else if ((eq v18) 5) then
        (v8!)
      else
        (v14 c@v17 f@v20)
    else if ((eq v18) 2) then
      (v5!)
    else if ((eq v18) 3) then
      (v6!)
    else if ((eq v15) 2) then
      if ((eq v18) 1) then
        (v9!)
      else if ((eq v18) 4) then
        -- Inline c@v21
        let c@v21 = v17;
        -- Inline e@v22
        let e@v22 = v19;
        if ((Snapshot.CaseGuarded.eq c@v21) e@v22) then
          (v10 c@v21 e@v22)
        else if ((Snapshot.CaseGuarded.lessThan c@v21) e@v22) then
          (v11 c@v21 e@v22)
        else if ((Snapshot.CaseGuarded.greaterThan c@v21) e@v22) then
          (v12 c@v21 e@v22)
        else
          (v14 c@v17 f@v20)
      else
        (v14 c@v17 f@v20)
    else if ((eq v18) 4) then
      -- Inline c@v21
      let c@v21 = v17;
      -- Inline e@v22
      let e@v22 = v19;
      if ((Snapshot.CaseGuarded.eq c@v21) e@v22) then
        (v10 c@v21 e@v22)
      else if ((Snapshot.CaseGuarded.lessThan c@v21) e@v22) then
        (v11 c@v21 e@v22)
      else if ((Snapshot.CaseGuarded.greaterThan c@v21) e@v22) then
        (v12 c@v21 e@v22)
      else
        (v14 c@v17 f@v20)
    else if ((eq v16) 2) then
      if ((eq v18) 1) then
        if ((eq v20) 10) then (v13!) else (v14 c@v17 f@v20)
      else
        (v14 c@v17 f@v20)
    else
      (v14 c@v17 f@v20)
  )
---------------
Snapshot.CaseGuarded.test4 (Step 1)
  (\v@v0 -> \v1@v1 ->
    if ((eq v@v0.a) 1) then
      if ((eq v1@v1.d) 1) then
        1
      else if ((eq v1@v1.d) 2) then
        2
      else if ((eq v1@v1.d) 3) then
        3
      else if ((eq v1@v1.d) 4) then
        4
      else if ((eq v1@v1.d) 5) then
        5
      else
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.f;
        let v4 =
          -- Inline v4
          let v4 = 11;
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v2);
        -- Inline v5
        let v5 = (\v5 -> ((add v4) v5));
        (v5 v3)
    else if ((eq v1@v1.d) 2) then
      2
    else if ((eq v1@v1.d) 3) then
      3
    else if ((eq v@v0.a) 2) then
      if ((eq v1@v1.d) 1) then
        6
      else if ((eq v1@v1.d) 4) then
        if let v2 = v@v0.c;
        -- Inline v3
        let v3 = (\v3 -> ((eq v2) v3));
        (v3 v1@v1.e) then
          -- Inline v2
          let v2 = v@v0.c;
          -- Inline v3
          let v3 = v1@v1.e;
          7
        else if let v2 = v@v0.c;
        -- Inline v3
        let v3 = (\a2@v3 -> ((lt v2) a2@v3));
        (v3 v1@v1.e) then
          -- Inline v2
          let v2 = v@v0.c;
          -- Inline v3
          let v3 = v1@v1.e;
          8
        else if let v2 = v@v0.c;
        -- Inline v3
        let v3 = (\a2@v3 -> ((gt v2) a2@v3));
        (v3 v1@v1.e) then
          -- Inline v2
          let v2 = v@v0.c;
          -- Inline v3
          let v3 = v1@v1.e;
          9
        else
          -- Inline v2
          let v2 = v@v0.c;
          -- Inline v3
          let v3 = v1@v1.f;
          let v4 =
            -- Inline v4
            let v4 = 11;
            -- Inline v5
            let v5 = (\v5 -> ((add v4) v5));
            (v5 v2);
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v3)
      else
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.f;
        let v4 =
          -- Inline v4
          let v4 = 11;
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v2);
        -- Inline v5
        let v5 = (\v5 -> ((add v4) v5));
        (v5 v3)
    else if ((eq v1@v1.d) 4) then
      if let v2 = v@v0.c;
      -- Inline v3
      let v3 = (\v3 -> ((eq v2) v3));
      (v3 v1@v1.e) then
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        7
      else if let v2 = v@v0.c;
      -- Inline v3
      let v3 = (\a2@v3 -> ((lt v2) a2@v3));
      (v3 v1@v1.e) then
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        8
      else if let v2 = v@v0.c;
      -- Inline v3
      let v3 = (\a2@v3 -> ((gt v2) a2@v3));
      (v3 v1@v1.e) then
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        9
      else
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.f;
        let v4 =
          -- Inline v4
          let v4 = 11;
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v2);
        -- Inline v5
        let v5 = (\v5 -> ((add v4) v5));
        (v5 v3)
    else if ((eq v@v0.b) 2) then
      if ((eq v1@v1.d) 1) then
        if ((eq v1@v1.f) 10) then
          10
        else
          -- Inline v2
          let v2 = v@v0.c;
          -- Inline v3
          let v3 = v1@v1.f;
          let v4 =
            -- Inline v4
            let v4 = 11;
            -- Inline v5
            let v5 = (\v5 -> ((add v4) v5));
            (v5 v2);
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v3)
      else
        -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.f;
        let v4 =
          -- Inline v4
          let v4 = 11;
          -- Inline v5
          let v5 = (\v5 -> ((add v4) v5));
          (v5 v2);
        -- Inline v5
        let v5 = (\v5 -> ((add v4) v5));
        (v5 v3)
    else
      -- Inline v2
      let v2 = v@v0.c;
      -- Inline v3
      let v3 = v1@v1.f;
      let v4 =
        -- Inline v4
        let v4 = 11;
        -- Inline v5
        let v5 = (\v5 -> ((add v4) v5));
        (v5 v2);
      -- Inline v5
      let v5 = (\v5 -> ((add v4) v5));
      (v5 v3)
  )
---------------
Snapshot.CaseGuarded.test4 (Step 2)
  (\v@v0 -> \v1@v1 ->
    if ((eq v@v0.a) 1) then
      if ((eq v1@v1.d) 1) then
        1
      else if ((eq v1@v1.d) 2) then
        2
      else if ((eq v1@v1.d) 3) then
        3
      else if ((eq v1@v1.d) 4) then
        4
      else if ((eq v1@v1.d) 5) then
        5
      else
        -- Inline v2
        let v2 =
          -- Inline v2
          let v2 = v@v0.c;
          ((add 11) v2);
        -- Inline v3
        let v3 = v1@v1.f;
        ((add v2) v3)
    else if ((eq v1@v1.d) 2) then
      2
    else if ((eq v1@v1.d) 3) then
      3
    else if ((eq v@v0.a) 2) then
      if ((eq v1@v1.d) 1) then
        6
      else if ((eq v1@v1.d) 4) then
        if -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        ((eq v2) v3) then
          7
        else if -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        ((lt v2) v3) then
          8
        else if -- Inline v2
        let v2 = v@v0.c;
        -- Inline v3
        let v3 = v1@v1.e;
        ((gt v2) v3) then
          9
        else
          -- Inline v2
          let v2 =
            -- Inline v2
            let v2 = v@v0.c;
            ((add 11) v2);
          -- Inline v3
          let v3 = v1@v1.f;
          ((add v2) v3)
      else
        -- Inline v2
        let v2 =
          -- Inline v2
          let v2 = v@v0.c;
          ((add 11) v2);
        -- Inline v3
        let v3 = v1@v1.f;
        ((add v2) v3)
    else if ((eq v1@v1.d) 4) then
      if -- Inline v2
      let v2 = v@v0.c;
      -- Inline v3
      let v3 = v1@v1.e;
      ((eq v2) v3) then
        7
      else if -- Inline v2
      let v2 = v@v0.c;
      -- Inline v3
      let v3 = v1@v1.e;
      ((lt v2) v3) then
        8
      else if -- Inline v2
      let v2 = v@v0.c;
      -- Inline v3
      let v3 = v1@v1.e;
      ((gt v2) v3) then
        9
      else
        -- Inline v2
        let v2 =
          -- Inline v2
          let v2 = v@v0.c;
          ((add 11) v2);
        -- Inline v3
        let v3 = v1@v1.f;
        ((add v2) v3)
    else if ((eq v@v0.b) 2) then
      if ((eq v1@v1.d) 1) then
        if ((eq v1@v1.f) 10) then
          10
        else
          -- Inline v2
          let v2 =
            -- Inline v2
            let v2 = v@v0.c;
            ((add 11) v2);
          -- Inline v3
          let v3 = v1@v1.f;
          ((add v2) v3)
      else
        -- Inline v2
        let v2 =
          -- Inline v2
          let v2 = v@v0.c;
          ((add 11) v2);
        -- Inline v3
        let v3 = v1@v1.f;
        ((add v2) v3)
    else
      -- Inline v2
      let v2 =
        -- Inline v2
        let v2 = v@v0.c;
        ((add 11) v2);
      -- Inline v3
      let v3 = v1@v1.f;
      ((add v2) v3)
  )
---------------
Snapshot.CaseGuarded.test4 (Step 3; Final)
  (\v@v0 -> \v1@v1 ->
    if ((eq v@v0.a) 1) then
      if ((eq v1@v1.d) 1) then
        1
      else if ((eq v1@v1.d) 2) then
        2
      else if ((eq v1@v1.d) 3) then
        3
      else if ((eq v1@v1.d) 4) then
        4
      else if ((eq v1@v1.d) 5) then
        5
      else
        ((add ((add 11) v@v0.c)) v1@v1.f)
    else if ((eq v1@v1.d) 2) then
      2
    else if ((eq v1@v1.d) 3) then
      3
    else if ((eq v@v0.a) 2) then
      if ((eq v1@v1.d) 1) then
        6
      else if ((eq v1@v1.d) 4) then
        if ((eq v@v0.c) v1@v1.e) then
          7
        else if ((lt v@v0.c) v1@v1.e) then
          8
        else if ((gt v@v0.c) v1@v1.e) then
          9
        else
          ((add ((add 11) v@v0.c)) v1@v1.f)
      else
        ((add ((add 11) v@v0.c)) v1@v1.f)
    else if ((eq v1@v1.d) 4) then
      if ((eq v@v0.c) v1@v1.e) then
        7
      else if ((lt v@v0.c) v1@v1.e) then
        8
      else if ((gt v@v0.c) v1@v1.e) then
        9
      else
        ((add ((add 11) v@v0.c)) v1@v1.f)
    else if ((eq v@v0.b) 2) then
      if ((eq v1@v1.d) 1) then
        if ((eq v1@v1.f) 10) then 10 else ((add ((add 11) v@v0.c)) v1@v1.f)
      else
        ((add ((add 11) v@v0.c)) v1@v1.f)
    else
      ((add ((add 11) v@v0.c)) v1@v1.f)
  )

===============

Snapshot.CaseGuarded.test5 (Step 0; Original)
  (\v@v0 ->
    -- Uncurry v1@v1
    let v1@v1 =
      (\v2@v1 ->
        -- Inline v3@v2
        let v3@v2 = (\v4@v2 -> 5);
        -- Inline v3
        let v3 = v@v0;
        -- Inline v4
        let v4 =
          (\x@v4 ->
            -- Inline v5
            let v5 = x@v4;
            -- Inline v6
            let v6 = (\-> 4);
            -- Inline v7
            let v7 = (\-> (v3@v2 true));
            if (isTag Data.Either.Left v5) then
              -- Inline v8
              let v8 = v5#value0;
              if ((eq v8) 2) then (v6!) else (v7!)
            else
              (v7!)
          );
        -- Inline v5
        let v5 = (\-> (v3@v2 true));
        if (isTag Data.Maybe.Just v3) then
          -- Inline v6
          let v6 = v3#value0;
          (v4 x@v6)
        else
          (v5!)
      );
    -- Inline v2
    let v2 = v@v0;
    -- Inline v3
    let v3 =
      (\x@v3 ->
        -- Inline v4
        let v4 = x@v3;
        -- Inline v5
        let v5 = (\y@v5 -> y@v5);
        -- Inline v6
        let v6 = (\-> (v1@v1 true));
        if (isTag Data.Either.Right v4) then
          -- Inline v7
          let v7 = v4#value0;
          (v5 y@v7)
        else
          (v6!)
      );
    -- Inline v4
    let v4 = (\-> (v1@v1 true));
    if (isTag Data.Maybe.Just v2) then
      -- Inline v5
      let v5 = v2#value0;
      (v3 x@v5)
    else
      (v4!)
  )
---------------
Snapshot.CaseGuarded.test5 (Step 1)
  (\v@v0 ->
    let v1@v1 =
      (\v2@v1 ->
        if (isTag Data.Maybe.Just v@v0) then
          -- Inline v2
          let v2 = v@v0#value0;
          if (isTag Data.Either.Left v2) then
            if ((eq v2#value0) 2) then
              4
            else
              -- Inline v3
              let v3 = true;
              5
          else
            -- Inline v3
            let v3 = true;
            5
        else
          -- Inline v2
          let v2 = true;
          5
      );
    if (isTag Data.Maybe.Just v@v0) then
      -- Inline v2
      let v2 = v@v0#value0;
      if (isTag Data.Either.Right v2) then
        -- Inline v3
        let v3 = v2#value0;
        v3
      else
        -- Inline v3
        let v3 = true;
        (v1@v1 v3)
    else
      -- Inline v2
      let v2 = true;
      (v1@v1 v2)
  )
---------------
Snapshot.CaseGuarded.test5 (Step 2)
  (\v@v0 ->
    -- Inline v1@v1
    let v1@v1 =
      (\v2@v1 ->
        if (isTag Data.Maybe.Just v@v0) then
          if (isTag Data.Either.Left v@v0#value0) then
            if ((eq v@v0#value0#value0) 2) then 4 else 5
          else
            5
        else
          5
      );
    if (isTag Data.Maybe.Just v@v0) then
      if (isTag Data.Either.Right v@v0#value0) then
        v@v0#value0#value0
      else
        (v1@v1 true)
    else
      (v1@v1 true)
  )
---------------
Snapshot.CaseGuarded.test5 (Step 3)
  (\v@v0 ->
    if (isTag Data.Maybe.Just v@v0) then
      if (isTag Data.Either.Right v@v0#value0) then
        v@v0#value0#value0
      else
        -- Inline v1
        let v1 = true;
        if (isTag Data.Maybe.Just v@v0) then
          if (isTag Data.Either.Left v@v0#value0) then
            if ((eq v@v0#value0#value0) 2) then 4 else 5
          else
            5
        else
          5
    else
      -- Inline v1
      let v1 = true;
      if (isTag Data.Maybe.Just v@v0) then
        if (isTag Data.Either.Left v@v0#value0) then
          if ((eq v@v0#value0#value0) 2) then 4 else 5
        else
          5
      else
        5
  )
---------------
Snapshot.CaseGuarded.test5 (Step 4; Final)
  (\v@v0 ->
    if (isTag Data.Maybe.Just v@v0) then
      if (isTag Data.Either.Right v@v0#value0) then
        v@v0#value0#value0
      else if (isTag Data.Maybe.Just v@v0) then
        if (isTag Data.Either.Left v@v0#value0) then
          if ((eq v@v0#value0#value0) 2) then 4 else 5
        else
          5
      else
        5
    else if (isTag Data.Maybe.Just v@v0) then
      if (isTag Data.Either.Left v@v0#value0) then
        if ((eq v@v0#value0#value0) 2) then 4 else 5
      else
        5
    else
      5
  )