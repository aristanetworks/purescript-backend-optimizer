Snapshot.EffectLoops02.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.EffectLoops02.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.EffectLoops02.discard (Step 0; Original)
  ((Control.Bind.discard Control.Bind.discardUnit) Effect.bindEffect)
---------------
Snapshot.EffectLoops02.discard (Step 1; Final)
  Effect.bindE

===============

Snapshot.EffectLoops02.lessThan (Step 0; Original)
  (Data.Ord.lessThan Data.Ord.ordInt)
---------------
Snapshot.EffectLoops02.lessThan (Step 1; Final)
  (\a1@v0 -> \a2@v1 -> 
    (< a1@v0 a2@v1)
  )

===============

Snapshot.EffectLoops02.log (Step 0; Original)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)
---------------
Snapshot.EffectLoops02.log (Step 1; Final)
  (Effect.Class.Console.log Effect.Class.monadEffectEffect)

===============

Snapshot.EffectLoops02.logShow (Step 0; Original)
  ((Effect.Class.Console.logShow Effect.Class.monadEffectEffect) Data.Show.showInt)
---------------
Snapshot.EffectLoops02.logShow (Step 1; Final)
  ((Effect.Class.Console.logShow Effect.Class.monadEffectEffect) Data.Show.showInt)

===============

Snapshot.EffectLoops02.test1 (Step 0; Original)
  (\lo@v0 -> \hi@v1 -> 
    (((Effect.forE ((Snapshot.EffectLoops02.add lo@v0) 1)) ((Snapshot.EffectLoops02.add hi@v1) 1)) (\a@v2 -> 
      ((Snapshot.EffectLoops02.discard (Snapshot.EffectLoops02.logShow a@v2)) (\$__unused@v3 -> 
        (Snapshot.EffectLoops02.logShow a@v2)
      ))
    ))
  )
---------------
Snapshot.EffectLoops02.test1 (Step 1)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      {#- Rewrite - Inline -#}
      let v2 =
        1;
      (add lo@v0 v2);
    [[ LetAssoc
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          1;
        (add hi@v1 v3);
      let v3 =
        (effectDefer ((([[ Stop
          Effect.forE
        ]] v2) v3) (\a@v4 -> 
          (effectDefer let v5 =
            {#- Rewrite - Inline -#}
            let v5 =
              (Effect.Console.log (Data.Show.showIntImpl a@v4));
            v5;
          {#- Rewrite - Inline -#}
          let v6 =
            letEffect $__unused@v6 =
              v5;
            {#- Rewrite - Inline -#}
            let v7 =
              (Effect.Console.log (Data.Show.showIntImpl a@v4));
            v7;
          v6)
        )));
      v3
    ]]
  )
---------------
Snapshot.EffectLoops02.test1 (Step 2)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    let v3 =
      (add hi@v1 1);
    {#- Rewrite - Inline -#}
    let v4 =
      (effectDefer ((([[ Stop
        Effect.forE
      ]] v2) v3) (\a@v4 -> 
        (effectDefer {#- Rewrite - Inline -#}
        let v5 =
          (Effect.Console.log (Data.Show.showIntImpl a@v4));
        letEffect $__unused@v6 =
          v5;
        (Effect.Console.log (Data.Show.showIntImpl a@v4)))
      )));
    v4
  )
---------------
Snapshot.EffectLoops02.test1 (Step 3; Final)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    let v3 =
      (add hi@v1 1);
    (effectDefer ((([[ Stop
      Effect.forE
    ]] v2) v3) (\a@v4 -> 
      (effectDefer letEffect $__unused@v5 =
        (Effect.Console.log (Data.Show.showIntImpl a@v4));
      (Effect.Console.log (Data.Show.showIntImpl a@v4)))
    )))
  )

===============

Snapshot.EffectLoops02.test2 (Step 0; Original)
  (\lo@v0 -> \hi@v1 -> 
    ((Snapshot.EffectLoops02.discard (((Effect.forE ((Snapshot.EffectLoops02.add lo@v0) 1)) ((Snapshot.EffectLoops02.add hi@v1) 1)) (\a@v2 -> 
      (Snapshot.EffectLoops02.logShow a@v2)
    ))) (\$__unused@v2 -> 
      ((Snapshot.EffectLoops02.discard (((Effect.forE ((Snapshot.EffectLoops02.add lo@v0) 1)) ((Snapshot.EffectLoops02.add hi@v1) 1)) Snapshot.EffectLoops02.logShow)) (\$__unused@v3 -> 
        (((Effect.forE ((Snapshot.EffectLoops02.add lo@v0) 1)) ((Snapshot.EffectLoops02.add hi@v1) 1)) (Data.Function.const (Snapshot.EffectLoops02.log "wat")))
      ))
    ))
  )
---------------
Snapshot.EffectLoops02.test2 (Step 1)
  (\lo@v0 -> \hi@v1 -> 
    [[ LetAssoc
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          1;
        (add lo@v0 v2);
      let v2 =
        [[ LetAssoc
          let v3 =
            {#- Rewrite - Inline -#}
            let v3 =
              1;
            (add hi@v1 v3);
          let v3 =
            (effectDefer ((([[ Stop
              Effect.forE
            ]] v2) v3) (\a@v4 -> 
              (effectDefer {#- Rewrite - Inline -#}
              let v5 =
                (Effect.Console.log (Data.Show.showIntImpl a@v4));
              v5)
            )));
          v3
        ]];
      {#- Rewrite - Inline -#}
      let v3 =
        letEffect $__unused@v3 =
          v2;
        [[ LetAssoc
          let v4 =
            {#- Rewrite - Inline -#}
            let v4 =
              1;
            (add lo@v0 v4);
          let v4 =
            [[ LetAssoc
              let v5 =
                {#- Rewrite - Inline -#}
                let v5 =
                  1;
                (add hi@v1 v5);
              let v5 =
                {#- Rewrite - Inline -#}
                let v6 =
                  ((Effect.Class.Console.logShow Effect.Class.monadEffectEffect) Data.Show.showInt);
                (effectDefer ((([[ Stop
                  Effect.forE
                ]] v4) v5) (\v7 -> 
                  (effectDefer (v6 v7))
                )));
              v5
            ]];
          {#- Rewrite - Inline -#}
          let v5 =
            letEffect $__unused@v5 =
              v4;
            let v6 =
              {#- Rewrite - Inline -#}
              let v6 =
                1;
              (add lo@v0 v6);
            [[ LetAssoc
              let v7 =
                {#- Rewrite - Inline -#}
                let v7 =
                  1;
                (add hi@v1 v7);
              let v7 =
                [[ LetAssoc
                  let v8 =
                    {#- Rewrite - Inline -#}
                    let v8 =
                      "wat";
                    {#- Rewrite - Inline -#}
                    let v9 =
                      {#- Rewrite - Inline -#}
                      let v9 =
                        (Effect.Console.log v8);
                      v9;
                    v9;
                  let v8 =
                    {#- Rewrite - Inline -#}
                    let v9 =
                      (\v@v9 -> 
                        v8
                      );
                    v9;
                  (effectDefer ((([[ Stop
                    Effect.forE
                  ]] v6) v7) (\v9 -> 
                    (effectDefer (v8 v9))
                  )))
                ]];
              v7
            ]];
          v5
        ]];
      v3
    ]]
  )
---------------
Snapshot.EffectLoops02.test2 (Step 2)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    [[ LetAssoc
      let v3 =
        (add hi@v1 1);
      let v3 =
        {#- Rewrite - Inline -#}
        let v4 =
          (effectDefer ((([[ Stop
            Effect.forE
          ]] v2) v3) (\a@v4 -> 
            (effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v4)))
          )));
        v4;
      letEffect $__unused@v4 =
        v3;
      let v5 =
        (add lo@v0 1);
      [[ LetAssoc
        let v6 =
          (add hi@v1 1);
        let v6 =
          {#- Rewrite - Inline -#}
          let v7 =
            (effectDefer ((([[ Stop
              Effect.forE
            ]] v5) v6) (\v7 -> 
              (effectDefer {#- Rewrite - Inline -#}
              let v8 =
                (Effect.Console.log (Data.Show.showIntImpl v7));
              v8)
            )));
          v7;
        letEffect $__unused@v7 =
          v6;
        let v8 =
          (add lo@v0 1);
        let v9 =
          (add hi@v1 1);
        [[ LetAssoc
          let v10 =
            (Effect.Console.log "wat");
          let v10 =
            {#- Rewrite - Inline -#}
            let v11 =
              (\v@v11 -> 
                v10
              );
            (effectDefer ((([[ Stop
              Effect.forE
            ]] v8) v9) (\v12 -> 
              (effectDefer (v11 v12))
            )));
          v10
        ]]
      ]]
    ]]
  )
---------------
Snapshot.EffectLoops02.test2 (Step 3)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    let v3 =
      (add hi@v1 1);
    {#- Rewrite - Inline -#}
    let v4 =
      (effectDefer ((([[ Stop
        Effect.forE
      ]] v2) v3) (\a@v4 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v4)))
      )));
    letEffect $__unused@v5 =
      v4;
    let v6 =
      (add lo@v0 1);
    let v7 =
      (add hi@v1 1);
    {#- Rewrite - Inline -#}
    let v8 =
      (effectDefer ((([[ Stop
        Effect.forE
      ]] v6) v7) (\v8 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl v8)))
      )));
    letEffect $__unused@v9 =
      v8;
    let v10 =
      (add lo@v0 1);
    let v11 =
      (add hi@v1 1);
    let v12 =
      (Effect.Console.log "wat");
    {#- Rewrite - Inline -#}
    let v13 =
      (effectDefer ((([[ Stop
        Effect.forE
      ]] v10) v11) (\v13 -> 
        (effectDefer v12)
      )));
    v13
  )
---------------
Snapshot.EffectLoops02.test2 (Step 4)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    let v3 =
      (add hi@v1 1);
    letEffect $__unused@v4 =
      ((([[ Stop
        Effect.forE
      ]] v2) v3) (\a@v4 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v4)))
      ));
    {#- Rewrite - Inline -#}
    let v5 =
      (add lo@v0 1);
    {#- Rewrite - Inline -#}
    let v6 =
      (add hi@v1 1);
    letEffect $__unused@v7 =
      ((([[ Stop
        Effect.forE
      ]] v5) v6) (\v7 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl v7)))
      ));
    {#- Rewrite - Inline -#}
    let v8 =
      (add lo@v0 1);
    {#- Rewrite - Inline -#}
    let v9 =
      (add hi@v1 1);
    let v10 =
      (Effect.Console.log "wat");
    (effectDefer ((([[ Stop
      Effect.forE
    ]] v8) v9) (\v11 -> 
      (effectDefer v10)
    )))
  )
---------------
Snapshot.EffectLoops02.test2 (Step 5; Final)
  (\lo@v0 -> \hi@v1 -> 
    let v2 =
      (add lo@v0 1);
    let v3 =
      (add hi@v1 1);
    letEffect $__unused@v4 =
      ((([[ Stop
        Effect.forE
      ]] v2) v3) (\a@v4 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl a@v4)))
      ));
    letEffect $__unused@v5 =
      ((([[ Stop
        Effect.forE
      ]] (add lo@v0 1)) (add hi@v1 1)) (\v5 -> 
        (effectDefer (Effect.Console.log (Data.Show.showIntImpl v5)))
      ));
    let v6 =
      (Effect.Console.log "wat");
    (effectDefer ((([[ Stop
      Effect.forE
    ]] (add lo@v0 1)) (add hi@v1 1)) (\v7 -> 
      (effectDefer v6)
    )))
  )

===============

Snapshot.EffectLoops02.test3 (Step 0; Original)
  (\lo@v0 -> \hi@v1 -> 
    (((Effect.forE lo@v0) hi@v1) (\a@v2 -> 
      ((Snapshot.EffectLoops02.when ((Snapshot.EffectLoops02.lessThan a@v2) 10)) (Snapshot.EffectLoops02.logShow a@v2))
    ))
  )
---------------
Snapshot.EffectLoops02.test3 (Step 1)
  (\lo@v0 -> \hi@v1 -> 
    (effectDefer ((([[ Stop
      Effect.forE
    ]] lo@v0) hi@v1) (\a@v2 -> 
      (effectDefer {#- Rewrite - Inline -#}
      let v3 =
        {#- Rewrite - Inline -#}
        let v3 =
          10;
        (< a@v2 v3);
      let v4 =
        {#- Rewrite - Inline -#}
        let v4 =
          (Effect.Console.log (Data.Show.showIntImpl a@v2));
        v4;
      if v3 then
        v4
      else
        (effectPure <PrimUndefined>))
    )))
  )
---------------
Snapshot.EffectLoops02.test3 (Step 2; Final)
  (\lo@v0 -> \hi@v1 -> 
    (effectDefer ((([[ Stop
      Effect.forE
    ]] lo@v0) hi@v1) (\a@v2 -> 
      (effectDefer let v3 =
        (Effect.Console.log (Data.Show.showIntImpl a@v2));
      if (< a@v2 10) then
        v3
      else
        (effectPure <PrimUndefined>))
    )))
  )

===============

Snapshot.EffectLoops02.test4 (Step 0; Original)
  (\lo@v0 -> \hi@v1 -> 
    (((Effect.forE lo@v0) hi@v1) (\a@v2 -> 
      (Snapshot.EffectLoops02.void {#- Rewrite - Inline -#}
      let v3 =
        ((Snapshot.EffectLoops02.lessThan a@v2) 10);
      {#- Rewrite - Inline -#}
      let v4 =
        (\ ->
          (Snapshot.EffectLoops02.logShow a@v2)
        );
      {#- Rewrite - Inline -#}
      let v5 =
        (\ ->
          (Snapshot.EffectLoops02.log "wat")
        );
      if (== v3 true) then
        (v4)
      else
        (v5))
    ))
  )
---------------
Snapshot.EffectLoops02.test4 (Step 1)
  (\lo@v0 -> \hi@v1 -> 
    (effectDefer ((([[ Stop
      Effect.forE
    ]] lo@v0) hi@v1) (\a@v2 -> 
      (effectDefer {#- Rewrite - Inline -#}
      let v3 =
        if {#- Rewrite - Inline -#}
          let v3 =
            10;
          (< a@v2 v3) then
          {#- Rewrite - Inline -#}
          let v3 =
            (Effect.Console.log (Data.Show.showIntImpl a@v2));
          v3
        else
          {#- Rewrite - Inline -#}
          let v3 =
            "wat";
          {#- Rewrite - Inline -#}
          let v4 =
            {#- Rewrite - Inline -#}
            let v4 =
              (Effect.Console.log v3);
            v4;
          v4;
      (effectDefer letEffect a'@v4 =
        v3;
      (effectPure <PrimUndefined>)))
    )))
  )
---------------
Snapshot.EffectLoops02.test4 (Step 2; Final)
  (\lo@v0 -> \hi@v1 -> 
    (effectDefer ((([[ Stop
      Effect.forE
    ]] lo@v0) hi@v1) (\a@v2 -> 
      (effectDefer letEffect a'@v3 =
        if (< a@v2 10) then
          (Effect.Console.log (Data.Show.showIntImpl a@v2))
        else
          (Effect.Console.log "wat");
      (effectPure <PrimUndefined>))
    )))
  )

===============

Snapshot.EffectLoops02.void (Step 0; Original)
  (Data.Functor.void Effect.functorEffect)
---------------
Snapshot.EffectLoops02.void (Step 1)
  {#- Rewrite - Inline -#}
  let v0 =
    (\v@v0 -> 
      <PrimUndefined>
    );
  {#- Rewrite - Inline -#}
  let v1 =
    {#- Rewrite - Inline -#}
    let v1 =
      {#- Rewrite - Inline -#}
      let v1 =
        (\a@v1 -> 
          (effectDefer letEffect a'@v2 =
            a@v1;
          (effectPure (v0 a'@v2)))
        );
      v1;
    v1;
  v1
---------------
Snapshot.EffectLoops02.void (Step 2; Final)
  (\a@v0 -> 
    (effectDefer letEffect a'@v1 =
      a@v0;
    (effectPure <PrimUndefined>))
  )

===============

Snapshot.EffectLoops02.when (Step 0; Original)
  (Control.Applicative.when Effect.applicativeEffect)
---------------
Snapshot.EffectLoops02.when (Step 1)
  (\v@v0 -> \v1@v1 -> 
    if v@v0 then
      v1@v1
    else
      {#- Rewrite - Inline -#}
      let v2 =
        <PrimUndefined>;
      {#- Rewrite - Inline -#}
      let v3 =
        (effectPure v2);
      v3
  )
---------------
Snapshot.EffectLoops02.when (Step 2; Final)
  (\v@v0 -> \v1@v1 -> 
    if v@v0 then
      v1@v1
    else
      (effectPure <PrimUndefined>)
  )