Snapshot.Heterogeneous01.ZipProps (Step 0; Original)
  (\x@v0 -> x@v0)
---------------
Snapshot.Heterogeneous01.ZipProps (Step 1; Final)
  (\x@v0 -> x@v0)

===============

Snapshot.Heterogeneous01.aIsSymbol (Step 0; Original)
  { reflectSymbol: (\$__unused@v0 -> "a") }
---------------
Snapshot.Heterogeneous01.aIsSymbol (Step 1; Final)
  { reflectSymbol: (\$__unused@v0 -> "a") }

===============

Snapshot.Heterogeneous01.add (Step 0; Original)
  (Data.Semiring.add Data.Semiring.semiringInt)
---------------
Snapshot.Heterogeneous01.add (Step 1; Final)
  Data.Semiring.intAdd

===============

Snapshot.Heterogeneous01.bIsSymbol (Step 0; Original)
  { reflectSymbol: (\$__unused@v0 -> "b") }
---------------
Snapshot.Heterogeneous01.bIsSymbol (Step 1; Final)
  { reflectSymbol: (\$__unused@v0 -> "b") }

===============

Snapshot.Heterogeneous01.cIsSymbol (Step 0; Original)
  { reflectSymbol: (\$__unused@v0 -> "c") }
---------------
Snapshot.Heterogeneous01.cIsSymbol (Step 1; Final)
  { reflectSymbol: (\$__unused@v0 -> "c") }

===============

Snapshot.Heterogeneous01.compose (Step 0; Original)
  (Control.Semigroupoid.compose Control.Semigroupoid.semigroupoidFn)
---------------
Snapshot.Heterogeneous01.compose (Step 1; Final)
  Control.Semigroupoid.semigroupoidFn.compose

===============

Snapshot.Heterogeneous01.not (Step 0; Original)
  (Data.HeytingAlgebra.not Data.HeytingAlgebra.heytingAlgebraBoolean)
---------------
Snapshot.Heterogeneous01.not (Step 1; Final)
  Data.HeytingAlgebra.boolNot

===============

Snapshot.Heterogeneous01.test1 (Step 0; Original)
  (Snapshot.Heterogeneous01.zipRecord1
    { a:
        (Snapshot.Heterogeneous01.add 1)
    , b:
        (Data.Tuple.Tuple "bar")
    , c:
        (\a@v0 -> (Snapshot.Heterogeneous01.not a@v0))
    }
    { a: 12, b: 42.0, c: true }
  )
---------------
Snapshot.Heterogeneous01.test1 (Step 1)
  -- UnpackOp v0 Record ["a","b","c"]
  let v0 =
    { a:
        -- Inline v0
        let v0 = 1;
        -- Inline v1
        let v1 = (\v1 -> ((add v0) v1));
        v1
    , b:
        (Data.Tuple.Tuple "bar")
    , c:
        (\a@v0 -> (not a@v0))
    };
  -- Inline v1
  let v1 =
    (\r1@v1 ->
      (r1@v1 { a= (v0.a r1@v1.a), b= (v0.b r1@v1.b), c= (v0.c r1@v1.c) })
    );
  (v1 { a: 12, b: 42.0, c: true })
---------------
Snapshot.Heterogeneous01.test1 (Step 2)
  -- Inline v0
  let v0 = (\v0 -> ((add 1) v0));
  -- Inline v1
  let v1 = (Data.Tuple.Tuple "bar");
  -- Inline v2
  let v2 = (\a@v2 -> (not a@v2));
  -- UnpackOp v3 Record ["a","b","c"]
  let v3 = { a: 12, b: 42.0, c: true };
  (v3 { a= (v0 v3.a), b= (v1 v3.b), c= (v2 v3.c) })
---------------
Snapshot.Heterogeneous01.test1 (Step 3)
  -- Inline v0
  let v0 = 12;
  -- Inline v1
  let v1 = 42.0;
  -- Inline v2
  let v2 = true;
  { a: ((add 1) v0), b: (Data.Tuple.Tuple.Tuple "bar" v1), c: (not v2) }
---------------
Snapshot.Heterogeneous01.test1 (Step 4; Final)
  { a: 13, b: (Data.Tuple.Tuple.Tuple "bar" 42.0), c: false }

===============

Snapshot.Heterogeneous01.test2 (Step 0; Original)
  (Snapshot.Heterogeneous01.zipRecord1
    { a:
        (Snapshot.Heterogeneous01.add 1)
    , b:
        (Data.Tuple.Tuple "bar")
    , c:
        (\a@v0 -> (Snapshot.Heterogeneous01.not a@v0))
    }
  )
---------------
Snapshot.Heterogeneous01.test2 (Step 1)
  -- UnpackOp v0 Record ["a","b","c"]
  let v0 =
    { a:
        -- Inline v0
        let v0 = 1;
        -- Inline v1
        let v1 = (\v1 -> ((add v0) v1));
        v1
    , b:
        (Data.Tuple.Tuple "bar")
    , c:
        (\a@v0 -> (not a@v0))
    };
  -- Inline v1
  let v1 =
    (\r1@v1 ->
      (r1@v1 { a= (v0.a r1@v1.a), b= (v0.b r1@v1.b), c= (v0.c r1@v1.c) })
    );
  v1
---------------
Snapshot.Heterogeneous01.test2 (Step 2)
  -- Inline v0
  let v0 = (\v0 -> ((add 1) v0));
  let v1 = (Data.Tuple.Tuple "bar");
  -- Inline v2
  let v2 = (\a@v2 -> (not a@v2));
  (\r1@v3 -> (r1@v3 { a= (v0 r1@v3.a), b= (v1 r1@v3.b), c= (v2 r1@v3.c) }))
---------------
Snapshot.Heterogeneous01.test2 (Step 3)
  let v0 = (Data.Tuple.Tuple "bar");
  (\r1@v1 ->
    (r1@v1
      { a=
          -- Inline v2
          let v2 = r1@v1.a;
          ((add 1) v2)
      , b=
          (v0 r1@v1.b)
      , c=
          -- Inline v2
          let v2 = r1@v1.c;
          (not v2)
      }
    )
  )
---------------
Snapshot.Heterogeneous01.test2 (Step 4; Final)
  let v0 = (Data.Tuple.Tuple "bar");
  (\r1@v1 ->
    (r1@v1 { a= ((add 1) r1@v1.a), b= (v0 r1@v1.b), c= (not r1@v1.c) })
  )

===============

Snapshot.Heterogeneous01.zipProps (Step 0; Original)
  (\dictIsSymbol@v0 ->
    -- Inline get@v1
    let get@v1 = ((Record.get dictIsSymbol@v0) <PrimUndefined>);
    (\$__unused@v2 ->
      { mappingWithIndex:
          (\v@v3 -> \prop@v4 ->
            -- Inline v5
            let v5 = v@v3;
            -- Inline v6
            let v6 = prop@v4;
            -- Inline v7
            let v7 = (\fns@v7 prop1@v8 -> ((get@v1 prop1@v8) fns@v7));
            (v7 fns@v5 prop1@v6)
          )
      }
    )
  )
---------------
Snapshot.Heterogeneous01.zipProps (Step 1)
  (\dictIsSymbol@v0 -> \$__unused@v1 ->
    { mappingWithIndex:
        (\v@v2 -> \prop@v3 ->
          -- Inline v4
          let v4 = <PrimUndefined>;
          -- Inline v5
          let v5 =
            (Record.Unsafe.unsafeGet
              (dictIsSymbol@v0.reflectSymbol prop@v3)
              v@v2
            );
          v5
        )
    }
  )
---------------
Snapshot.Heterogeneous01.zipProps (Step 2; Final)
  (\dictIsSymbol@v0 -> \$__unused@v1 ->
    { mappingWithIndex:
        (\v@v2 -> \prop@v3 ->
          (Record.Unsafe.unsafeGet
            (dictIsSymbol@v0.reflectSymbol prop@v3)
            v@v2
          )
        )
    }
  )

===============

Snapshot.Heterogeneous01.zipRecord (Step 0; Original)
  (\dictHMapWithIndex@v0 ->
    (Snapshot.Heterogeneous01.compose
      (Heterogeneous.Mapping.hmapWithIndex dictHMapWithIndex@v0)
      Snapshot.Heterogeneous01.ZipProps
    )
  )
---------------
Snapshot.Heterogeneous01.zipRecord (Step 1)
  (\dictHMapWithIndex@v0 ->
    -- Inline v1
    let v1 = dictHMapWithIndex@v0.hmapWithIndex;
    -- Inline v2
    let v2 = (\x@v2 -> (v1 x@v2));
    v2
  )
---------------
Snapshot.Heterogeneous01.zipRecord (Step 2; Final)
  (\dictHMapWithIndex@v0 -> \x@v1 -> (dictHMapWithIndex@v0.hmapWithIndex x@v1))

===============

Snapshot.Heterogeneous01.zipRecord1 (Step 0; Original)
  (Snapshot.Heterogeneous01.zipRecord
    (Heterogeneous.Mapping.hmapWithIndexRecord
      <PrimUndefined>
      (Heterogeneous.Mapping.mapRecordWithIndexCons
        Snapshot.Heterogeneous01.aIsSymbol
        (Snapshot.Heterogeneous01.zipProps
          Snapshot.Heterogeneous01.aIsSymbol
          <PrimUndefined>
        )
        (Heterogeneous.Mapping.mapRecordWithIndexCons
          Snapshot.Heterogeneous01.bIsSymbol
          (Snapshot.Heterogeneous01.zipProps
            Snapshot.Heterogeneous01.bIsSymbol
            <PrimUndefined>
          )
          (Heterogeneous.Mapping.mapRecordWithIndexCons
            Snapshot.Heterogeneous01.cIsSymbol
            (Snapshot.Heterogeneous01.zipProps
              Snapshot.Heterogeneous01.cIsSymbol
              <PrimUndefined>
            )
            Heterogeneous.Mapping.mapRecordWithIndexNil
            <PrimUndefined>
            <PrimUndefined>
          )
          <PrimUndefined>
          <PrimUndefined>
        )
        <PrimUndefined>
        <PrimUndefined>
      )
    )
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 1)
  let v0 =
    -- Inline v0
    let v0 = <PrimUndefined>;
    -- Inline v1
    let v1 =
      -- Inline v1
      let v1 =
        -- Inline v1
        let v1 =
          -- Inline v1
          let v1 = <PrimUndefined>;
          -- Inline v2
          let v2 = { mappingWithIndex: (\v@v2 -> \prop@v3 -> v@v2.a) };
          v2;
        -- LetAssoc
        let v2 =
          let v2 =
            -- Inline v2
            let v2 =
              -- Inline v2
              let v2 = <PrimUndefined>;
              -- Inline v3
              let v3 = { mappingWithIndex: (\v@v3 -> \prop@v4 -> v@v3.b) };
              v3;
            -- LetAssoc
            let v3 =
              let v3 =
                -- Inline v3
                let v3 =
                  -- Inline v3
                  let v3 = <PrimUndefined>;
                  -- Inline v4
                  let v4 = { mappingWithIndex: (\v@v4 -> \prop@v5 -> v@v4.c) };
                  v4;
                -- Inline v4
                let v4 =
                  -- Inline v4
                  let v4 = <PrimUndefined>;
                  -- Inline v5
                  let v5 = <PrimUndefined>;
                  { mapRecordWithIndexBuilder:
                      (\v@v6 -> \f@v7 ->
                        let v8 =
                          (Record.Builder.modify
                            <PrimUndefined>
                            <PrimUndefined>
                            Snapshot.Heterogeneous01.cIsSymbol
                            Type.Proxy.Proxy
                            ((v3.mappingWithIndex f@v7) Type.Proxy.Proxy)
                          );
                        -- Inline v9
                        let v9 =
                          -- Inline v9
                          let v9 = Type.Proxy.Proxy;
                          Heterogeneous.Mapping.identity;
                        (\x@v10 -> (v8 (v9 x@v10)))
                      )
                  };
                v4;
              -- Inline v4
              let v4 = <PrimUndefined>;
              -- Inline v5
              let v5 = <PrimUndefined>;
              { mapRecordWithIndexBuilder:
                  (\v@v6 -> \f@v7 ->
                    let v8 =
                      (Record.Builder.modify
                        <PrimUndefined>
                        <PrimUndefined>
                        Snapshot.Heterogeneous01.bIsSymbol
                        Type.Proxy.Proxy
                        ((v2.mappingWithIndex f@v7) Type.Proxy.Proxy)
                      );
                    let v9 =
                      ((v3.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v7);
                    (\x@v10 -> (v8 (v9 x@v10)))
                  )
              };
            v3;
          -- Inline v3
          let v3 = <PrimUndefined>;
          -- Inline v4
          let v4 = <PrimUndefined>;
          { mapRecordWithIndexBuilder:
              (\v@v5 -> \f@v6 ->
                let v7 =
                  (Record.Builder.modify
                    <PrimUndefined>
                    <PrimUndefined>
                    Snapshot.Heterogeneous01.aIsSymbol
                    Type.Proxy.Proxy
                    ((v1.mappingWithIndex f@v6) Type.Proxy.Proxy)
                  );
                let v8 = ((v2.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v6);
                (\x@v9 -> (v7 (v8 x@v9)))
              )
          };
        v2;
      { hmapWithIndex:
          let v2 = (v1.mapRecordWithIndexBuilder Type.Proxy.Proxy);
          (\x@v3 ->
            let v4 = (v2 x@v3);
            (\r1@v5 -> (v4 (Record.Builder.copyRecord r1@v5)))
          )
      };
    v1;
  -- Inline v1
  let v1 = (\x@v1 -> (v0.hmapWithIndex x@v1));
  v1
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 2)
  -- UnpackOp v0 Record ["hmapWithIndex"]
  let v0 =
    { hmapWithIndex:
        -- LetAssoc
        let v0 =
          let v0 =
            -- UnpackOp v0 Record ["mapRecordWithIndexBuilder"]
            let v0 =
              { mapRecordWithIndexBuilder:
                  (\v@v0 -> \f@v1 ->
                    -- Inline v2
                    let v2 =
                      (Record.Builder.modify
                        <PrimUndefined>
                        <PrimUndefined>
                        Snapshot.Heterogeneous01.cIsSymbol
                        Type.Proxy.Proxy
                        -- Inline v2
                        let v2 = Type.Proxy.Proxy;
                        f@v1.c
                      );
                    (\x@v3 -> (v2 x@v3))
                  )
              };
            -- Inline v1
            let v1 =
              { mapRecordWithIndexBuilder:
                  (\v@v1 -> \f@v2 ->
                    -- Inline v3
                    let v3 =
                      (Record.Builder.modify
                        <PrimUndefined>
                        <PrimUndefined>
                        Snapshot.Heterogeneous01.bIsSymbol
                        Type.Proxy.Proxy
                        -- Inline v3
                        let v3 = Type.Proxy.Proxy;
                        f@v2.b
                      );
                    let v4 =
                      ((v0.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v2);
                    (\x@v5 -> (v3 (v4 x@v5)))
                  )
              };
            v1;
          -- Inline v1
          let v1 =
            -- Inline v1
            let v1 =
              -- Inline v1
              let v1 =
                { mapRecordWithIndexBuilder:
                    (\v@v1 -> \f@v2 ->
                      -- Inline v3
                      let v3 =
                        (Record.Builder.modify
                          <PrimUndefined>
                          <PrimUndefined>
                          Snapshot.Heterogeneous01.aIsSymbol
                          Type.Proxy.Proxy
                          -- Inline v3
                          let v3 = Type.Proxy.Proxy;
                          f@v2.a
                        );
                      let v4 =
                        ((v0.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v2);
                      (\x@v5 -> (v3 (v4 x@v5)))
                    )
                };
              v1;
            v1.mapRecordWithIndexBuilder;
          (v1 Type.Proxy.Proxy);
        (\x@v1 ->
          let v2 = (v0 x@v1);
          (\r1@v3 -> (v2 (Record.Builder.copyRecord r1@v3)))
        )
    };
  (\x@v1 -> (v0.hmapWithIndex x@v1))
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 3)
  -- LetAssoc
  let v0 =
    let v0 =
      -- Inline v0
      let v0 =
        (\v@v0 -> \f@v1 -> \x@v2 ->
          -- Inline v3
          let v3 = <PrimUndefined>;
          -- Inline v4
          let v4 =
            -- Inline v4
            let v4 = <PrimUndefined>;
            -- Inline v5
            let v5 = Type.Proxy.Proxy;
            -- Inline v6
            let v6 = f@v1.c;
            (((Record.Builder.unsafeModify "c") v6) x@v2);
          v4
        );
      { mapRecordWithIndexBuilder:
          (\v@v1 -> \f@v2 ->
            let v3 = ((v0 Type.Proxy.Proxy) f@v2);
            (\x@v4 ->
              -- Inline v5
              let v5 = <PrimUndefined>;
              -- Inline v6
              let v6 =
                -- Inline v6
                let v6 = <PrimUndefined>;
                -- Inline v7
                let v7 = Type.Proxy.Proxy;
                -- Inline v8
                let v8 = f@v2.b;
                -- Inline v9
                let v9 = (v3 x@v4);
                (((Record.Builder.unsafeModify "b") v8) v9);
              v6
            )
          )
      };
    let v1 =
      -- Inline v1
      let v1 = Type.Proxy.Proxy;
      (\f@v2 ->
        let v3 = ((v0.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v2);
        (\x@v4 ->
          -- Inline v5
          let v5 = <PrimUndefined>;
          -- Inline v6
          let v6 =
            -- Inline v6
            let v6 = <PrimUndefined>;
            -- Inline v7
            let v7 = Type.Proxy.Proxy;
            -- Inline v8
            let v8 = f@v2.a;
            -- Inline v9
            let v9 = (v3 x@v4);
            (((Record.Builder.unsafeModify "a") v8) v9);
          v6
        )
      );
    (\x@v2 ->
      let v3 = (v1 x@v2);
      (\r1@v4 -> (v3 (Record.Builder.copyRecord r1@v4)))
    );
  (\x@v1 -> (v0 x@v1))
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 4)
  -- UnpackOp v0 Record ["mapRecordWithIndexBuilder"]
  let v0 =
    { mapRecordWithIndexBuilder:
        (\v@v0 -> \f@v1 ->
          let v2 =
            -- Inline v2
            let v2 = Type.Proxy.Proxy;
            (\x@v3 -> (((Record.Builder.unsafeModify "c") f@v1.c) x@v3));
          (\x@v3 -> (((Record.Builder.unsafeModify "b") f@v1.b) (v2 x@v3)))
        )
    };
  -- Inline v1
  let v1 =
    (\f@v1 ->
      let v2 = ((v0.mapRecordWithIndexBuilder Type.Proxy.Proxy) f@v1);
      (\x@v3 -> (((Record.Builder.unsafeModify "a") f@v1.a) (v2 x@v3)))
    );
  (\x@v2 ->
    let v3 = (v1 x@v2);
    (\r1@v4 -> (v3 (Record.Builder.copyRecord r1@v4)))
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 5)
  -- Inline v0
  let v0 =
    (\v@v0 -> \f@v1 ->
      -- Inline v2
      let v2 = (\x@v2 -> (((Record.Builder.unsafeModify "c") f@v1.c) x@v2));
      (\x@v3 -> (((Record.Builder.unsafeModify "b") f@v1.b) (v2 x@v3)))
    );
  (\x@v1 ->
    -- LetAssoc
    let v2 =
      let v2 = ((v0 Type.Proxy.Proxy) x@v1);
      -- Inline v3
      let v3 =
        (\x@v3 -> (((Record.Builder.unsafeModify "a") x@v1.a) (v2 x@v3)));
      v3;
    (\r1@v3 -> (v2 (Record.Builder.copyRecord r1@v3)))
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 6)
  (\x@v0 ->
    let v1 =
      -- Inline v1
      let v1 = Type.Proxy.Proxy;
      (\x@v2 ->
        (Record.Builder.unsafeModify
          "b"
          x@v0.b
          (((Record.Builder.unsafeModify "c") x@v0.c) x@v2)
        )
      );
    -- Inline v2
    let v2 = (\x@v2 -> (((Record.Builder.unsafeModify "a") x@v0.a) (v1 x@v2)));
    (\r1@v3 -> (v2 (Record.Builder.copyRecord r1@v3)))
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 7)
  (\x@v0 ->
    -- Inline v1
    let v1 =
      (\x@v1 ->
        (Record.Builder.unsafeModify
          "b"
          x@v0.b
          (((Record.Builder.unsafeModify "c") x@v0.c) x@v1)
        )
      );
    (\r1@v2 ->
      -- Inline v3
      let v3 = (Record.Builder.copyRecord r1@v2);
      (((Record.Builder.unsafeModify "a") x@v0.a) (v1 v3))
    )
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 8)
  (\x@v0 -> \r1@v1 ->
    (Record.Builder.unsafeModify
      "a"
      x@v0.a
      -- Inline v2
      let v2 = (Record.Builder.copyRecord r1@v1);
      (Record.Builder.unsafeModify
        "b"
        x@v0.b
        (((Record.Builder.unsafeModify "c") x@v0.c) v2)
      )
    )
  )
---------------
Snapshot.Heterogeneous01.zipRecord1 (Step 9; Final)
  (\x@v0 -> \r1@v1 ->
    (r1@v1 { a= (x@v0.a r1@v1.a), b= (x@v0.b r1@v1.b), c= (x@v0.c r1@v1.c) })
  )