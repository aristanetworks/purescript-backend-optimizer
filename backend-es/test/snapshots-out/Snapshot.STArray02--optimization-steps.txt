Snapshot.STArray02.append (Step 0; Original)
  (Data.Semigroup.append Data.Semigroup.semigroupArray)
---------------
Snapshot.STArray02.append (Step 1; Final)
  Data.Semigroup.concatArray

===============

Snapshot.STArray02.bind (Step 0; Original)
  (Control.Bind.bind Control.Monad.ST.Internal.bindST)
---------------
Snapshot.STArray02.bind (Step 1; Final)
  Control.Monad.ST.Internal.bind_

===============

Snapshot.STArray02.pure (Step 0; Original)
  (Control.Applicative.pure Control.Monad.ST.Internal.applicativeST)
---------------
Snapshot.STArray02.pure (Step 1; Final)
  Control.Monad.ST.Internal.pure_

===============

Snapshot.STArray02.test1 (Step 0; Original)
  (\inp@v0 -> 
    (Data.Array.ST.run ((Snapshot.STArray02.bind Data.Array.ST.new) (\arr@v1 -> 
      ((Snapshot.STArray02.bind ((Data.Array.ST.push 1) arr@v1)) (\n@v2 -> 
        ((Snapshot.STArray02.bind ((Data.Array.ST.pushAll [
          1,
          n@v2,
        ]) arr@v1)) (\$__unused@v3 -> 
          ((Snapshot.STArray02.bind ((Data.Array.ST.pushAll inp@v0) arr@v1)) (\$__unused@v4 -> 
            ((Snapshot.STArray02.bind ((Data.Array.ST.pushAll ((Snapshot.STArray02.append [
              1,
              2,
              3,
            ]) inp@v0)) arr@v1)) (\$__unused@v5 -> 
              ((Snapshot.STArray02.bind ((Data.Array.ST.pushAll ((Snapshot.STArray02.append inp@v0) [
                2,
                3,
                4,
              ])) arr@v1)) (\$__unused@v6 -> 
                ((Snapshot.STArray02.bind ((Data.Array.ST.pushAll ((Snapshot.STArray02.append [
                  1,
                  2,
                  3,
                ]) ((Snapshot.STArray02.append inp@v0) [
                  5,
                  6,
                  7,
                ]))) arr@v1)) (\$__unused@v7 -> 
                  (Snapshot.STArray02.pure arr@v1)
                ))
              ))
            ))
          ))
        ))
      ))
    )))
  )
---------------
Snapshot.STArray02.test1 (Step 1)
  (\inp@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      letEffect arr@v1 =
        Data.Array.ST.new;
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          1;
        {#- Rewrite - Inline -#}
        let v3 =
          (\v3 -> 
            (effectDefer (([[ Stop
              Data.Array.ST.pushAll
            ]] [
              v2,
            ]) v3))
          );
        (v3 arr@v1);
      {#- Rewrite - Inline -#}
      let v3 =
        letEffect n@v3 =
          v2;
        let v4 =
          ((Data.Array.ST.pushAll [
            1,
            n@v3,
          ]) arr@v1);
        {#- Rewrite - Inline -#}
        let v5 =
          letEffect $__unused@v5 =
            v4;
          let v6 =
            ((Data.Array.ST.pushAll inp@v0) arr@v1);
          {#- Rewrite - Inline -#}
          let v7 =
            letEffect $__unused@v7 =
              v6;
            let v8 =
              ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
                1,
                2,
                3,
              ]) inp@v0)) arr@v1);
            {#- Rewrite - Inline -#}
            let v9 =
              letEffect $__unused@v9 =
                v8;
              let v10 =
                ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray inp@v0) [
                  2,
                  3,
                  4,
                ])) arr@v1);
              {#- Rewrite - Inline -#}
              let v11 =
                letEffect $__unused@v11 =
                  v10;
                let v12 =
                  ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
                    1,
                    2,
                    3,
                  ]) ((Data.Semigroup.concatArray inp@v0) [
                    5,
                    6,
                    7,
                  ]))) arr@v1);
                {#- Rewrite - Inline -#}
                let v13 =
                  letEffect $__unused@v13 =
                    v12;
                  (effectPure arr@v1);
                v13;
              v11;
            v9;
          v7;
        v5;
      v3;
    {#- Rewrite - Inline -#}
    let v2 =
      (Control.Monad.ST.Internal.run v1);
    v2
  )
---------------
Snapshot.STArray02.test1 (Step 2)
  (\inp@v0 -> 
    (Control.Monad.ST.Internal.run letEffect arr@v1 =
      Data.Array.ST.new;
    {#- Rewrite - Inline -#}
    let v2 =
      (effectDefer (([[ Stop
        Data.Array.ST.pushAll
      ]] [
        1,
      ]) arr@v1));
    letEffect n@v3 =
      v2;
    {#- Rewrite - Inline -#}
    let v4 =
      ((Data.Array.ST.pushAll [
        1,
        n@v3,
      ]) arr@v1);
    letEffect $__unused@v5 =
      v4;
    {#- Rewrite - Inline -#}
    let v6 =
      ((Data.Array.ST.pushAll inp@v0) arr@v1);
    letEffect $__unused@v7 =
      v6;
    {#- Rewrite - Inline -#}
    let v8 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) inp@v0)) arr@v1);
    letEffect $__unused@v9 =
      v8;
    {#- Rewrite - Inline -#}
    let v10 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray inp@v0) [
        2,
        3,
        4,
      ])) arr@v1);
    letEffect $__unused@v11 =
      v10;
    {#- Rewrite - Inline -#}
    let v12 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) ((Data.Semigroup.concatArray inp@v0) [
        5,
        6,
        7,
      ]))) arr@v1);
    letEffect $__unused@v13 =
      v12;
    (effectPure arr@v1))
  )
---------------
Snapshot.STArray02.test1 (Step 3; Final)
  (\inp@v0 -> 
    (Control.Monad.ST.Internal.run letEffect arr@v1 =
      Data.Array.ST.new;
    letEffect n@v2 =
      (([[ Stop
        Data.Array.ST.pushAll
      ]] [
        1,
      ]) arr@v1);
    letEffect $__unused@v3 =
      ((Data.Array.ST.pushAll [
        1,
        n@v2,
      ]) arr@v1);
    letEffect $__unused@v4 =
      ((Data.Array.ST.pushAll inp@v0) arr@v1);
    letEffect $__unused@v5 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) inp@v0)) arr@v1);
    letEffect $__unused@v6 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray inp@v0) [
        2,
        3,
        4,
      ])) arr@v1);
    letEffect $__unused@v7 =
      ((Data.Array.ST.pushAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) ((Data.Semigroup.concatArray inp@v0) [
        5,
        6,
        7,
      ]))) arr@v1);
    (effectPure arr@v1))
  )

===============

Snapshot.STArray02.test2 (Step 0; Original)
  (\inp@v0 -> 
    (Data.Array.ST.run ((Snapshot.STArray02.bind Data.Array.ST.new) (\arr@v1 -> 
      ((Snapshot.STArray02.bind ((Data.Array.ST.unshift 1) arr@v1)) (\n@v2 -> 
        ((Snapshot.STArray02.bind ((Data.Array.ST.unshiftAll [
          1,
          n@v2,
        ]) arr@v1)) (\$__unused@v3 -> 
          ((Snapshot.STArray02.bind ((Data.Array.ST.unshiftAll inp@v0) arr@v1)) (\$__unused@v4 -> 
            ((Snapshot.STArray02.bind ((Data.Array.ST.unshiftAll ((Snapshot.STArray02.append [
              1,
              2,
              3,
            ]) inp@v0)) arr@v1)) (\$__unused@v5 -> 
              ((Snapshot.STArray02.bind ((Data.Array.ST.unshiftAll ((Snapshot.STArray02.append inp@v0) [
                2,
                3,
                4,
              ])) arr@v1)) (\$__unused@v6 -> 
                ((Snapshot.STArray02.bind ((Data.Array.ST.unshiftAll ((Snapshot.STArray02.append [
                  1,
                  2,
                  3,
                ]) ((Snapshot.STArray02.append inp@v0) [
                  5,
                  6,
                  7,
                ]))) arr@v1)) (\$__unused@v7 -> 
                  (Snapshot.STArray02.pure arr@v1)
                ))
              ))
            ))
          ))
        ))
      ))
    )))
  )
---------------
Snapshot.STArray02.test2 (Step 1)
  (\inp@v0 -> 
    {#- Rewrite - Inline -#}
    let v1 =
      letEffect arr@v1 =
        Data.Array.ST.new;
      let v2 =
        {#- Rewrite - Inline -#}
        let v2 =
          1;
        {#- Rewrite - Inline -#}
        let v3 =
          (\v3 -> 
            (effectDefer (([[ Stop
              Data.Array.ST.unshiftAll
            ]] [
              v2,
            ]) v3))
          );
        (v3 arr@v1);
      {#- Rewrite - Inline -#}
      let v3 =
        letEffect n@v3 =
          v2;
        let v4 =
          ((Data.Array.ST.unshiftAll [
            1,
            n@v3,
          ]) arr@v1);
        {#- Rewrite - Inline -#}
        let v5 =
          letEffect $__unused@v5 =
            v4;
          let v6 =
            ((Data.Array.ST.unshiftAll inp@v0) arr@v1);
          {#- Rewrite - Inline -#}
          let v7 =
            letEffect $__unused@v7 =
              v6;
            let v8 =
              ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
                1,
                2,
                3,
              ]) inp@v0)) arr@v1);
            {#- Rewrite - Inline -#}
            let v9 =
              letEffect $__unused@v9 =
                v8;
              let v10 =
                ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray inp@v0) [
                  2,
                  3,
                  4,
                ])) arr@v1);
              {#- Rewrite - Inline -#}
              let v11 =
                letEffect $__unused@v11 =
                  v10;
                let v12 =
                  ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
                    1,
                    2,
                    3,
                  ]) ((Data.Semigroup.concatArray inp@v0) [
                    5,
                    6,
                    7,
                  ]))) arr@v1);
                {#- Rewrite - Inline -#}
                let v13 =
                  letEffect $__unused@v13 =
                    v12;
                  (effectPure arr@v1);
                v13;
              v11;
            v9;
          v7;
        v5;
      v3;
    {#- Rewrite - Inline -#}
    let v2 =
      (Control.Monad.ST.Internal.run v1);
    v2
  )
---------------
Snapshot.STArray02.test2 (Step 2)
  (\inp@v0 -> 
    (Control.Monad.ST.Internal.run letEffect arr@v1 =
      Data.Array.ST.new;
    {#- Rewrite - Inline -#}
    let v2 =
      (effectDefer (([[ Stop
        Data.Array.ST.unshiftAll
      ]] [
        1,
      ]) arr@v1));
    letEffect n@v3 =
      v2;
    {#- Rewrite - Inline -#}
    let v4 =
      ((Data.Array.ST.unshiftAll [
        1,
        n@v3,
      ]) arr@v1);
    letEffect $__unused@v5 =
      v4;
    {#- Rewrite - Inline -#}
    let v6 =
      ((Data.Array.ST.unshiftAll inp@v0) arr@v1);
    letEffect $__unused@v7 =
      v6;
    {#- Rewrite - Inline -#}
    let v8 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) inp@v0)) arr@v1);
    letEffect $__unused@v9 =
      v8;
    {#- Rewrite - Inline -#}
    let v10 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray inp@v0) [
        2,
        3,
        4,
      ])) arr@v1);
    letEffect $__unused@v11 =
      v10;
    {#- Rewrite - Inline -#}
    let v12 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) ((Data.Semigroup.concatArray inp@v0) [
        5,
        6,
        7,
      ]))) arr@v1);
    letEffect $__unused@v13 =
      v12;
    (effectPure arr@v1))
  )
---------------
Snapshot.STArray02.test2 (Step 3; Final)
  (\inp@v0 -> 
    (Control.Monad.ST.Internal.run letEffect arr@v1 =
      Data.Array.ST.new;
    letEffect n@v2 =
      (([[ Stop
        Data.Array.ST.unshiftAll
      ]] [
        1,
      ]) arr@v1);
    letEffect $__unused@v3 =
      ((Data.Array.ST.unshiftAll [
        1,
        n@v2,
      ]) arr@v1);
    letEffect $__unused@v4 =
      ((Data.Array.ST.unshiftAll inp@v0) arr@v1);
    letEffect $__unused@v5 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) inp@v0)) arr@v1);
    letEffect $__unused@v6 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray inp@v0) [
        2,
        3,
        4,
      ])) arr@v1);
    letEffect $__unused@v7 =
      ((Data.Array.ST.unshiftAll ((Data.Semigroup.concatArray [
        1,
        2,
        3,
      ]) ((Data.Semigroup.concatArray inp@v0) [
        5,
        6,
        7,
      ]))) arr@v1);
    (effectPure arr@v1))
  )